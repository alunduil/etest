Created by PLY version 3.4 (http://www.dabeaz.com/ply)

Unused terminals:

    COMMENT

Grammar

Rule 0     S' -> inputunit_list
Rule 1     inputunit_list -> inputunit
Rule 2     inputunit_list -> inputunit_list inputunit
Rule 3     inputunit -> simple_list simple_list_terminator
Rule 4     inputunit -> NEWLINE
Rule 5     word_list -> WORD
Rule 6     word_list -> word_list WORD
Rule 7     redirection -> > WORD
Rule 8     redirection -> < WORD
Rule 9     redirection -> NUMBER > WORD
Rule 10    redirection -> NUMBER < WORD
Rule 11    redirection -> REDIR_WORD > WORD
Rule 12    redirection -> REDIR_WORD < WORD
Rule 13    redirection -> GREATER_GREATER WORD
Rule 14    redirection -> NUMBER GREATER_GREATER WORD
Rule 15    redirection -> REDIR_WORD GREATER_GREATER WORD
Rule 16    redirection -> GREATER_BAR WORD
Rule 17    redirection -> NUMBER GREATER_BAR WORD
Rule 18    redirection -> REDIR_WORD GREATER_BAR WORD
Rule 19    redirection -> LESS_GREATER WORD
Rule 20    redirection -> NUMBER LESS_GREATER WORD
Rule 21    redirection -> REDIR_WORD LESS_GREATER WORD
Rule 22    redirection -> LESS_LESS WORD
Rule 23    redirection -> NUMBER LESS_LESS WORD
Rule 24    redirection -> REDIR_WORD LESS_LESS WORD
Rule 25    redirection -> LESS_LESS_MINUS WORD
Rule 26    redirection -> NUMBER LESS_LESS_MINUS WORD
Rule 27    redirection -> REDIR_WORD LESS_LESS_MINUS WORD
Rule 28    redirection -> LESS_LESS_LESS WORD
Rule 29    redirection -> NUMBER LESS_LESS_LESS WORD
Rule 30    redirection -> REDIR_WORD LESS_LESS_LESS WORD
Rule 31    redirection -> LESS_AND NUMBER
Rule 32    redirection -> NUMBER LESS_AND NUMBER
Rule 33    redirection -> REDIR_WORD LESS_AND NUMBER
Rule 34    redirection -> GREATER_AND NUMBER
Rule 35    redirection -> NUMBER GREATER_AND NUMBER
Rule 36    redirection -> REDIR_WORD GREATER_AND NUMBER
Rule 37    redirection -> LESS_AND WORD
Rule 38    redirection -> NUMBER LESS_AND WORD
Rule 39    redirection -> REDIR_WORD LESS_AND WORD
Rule 40    redirection -> GREATER_AND WORD
Rule 41    redirection -> NUMBER GREATER_AND WORD
Rule 42    redirection -> REDIR_WORD GREATER_AND WORD
Rule 43    redirection -> GREATER_AND -
Rule 44    redirection -> NUMBER GREATER_AND -
Rule 45    redirection -> REDIR_WORD GREATER_AND -
Rule 46    redirection -> LESS_AND -
Rule 47    redirection -> NUMBER LESS_AND -
Rule 48    redirection -> REDIR_WORD LESS_AND -
Rule 49    redirection -> AND_GREATER WORD
Rule 50    redirection -> AND_GREATER_GREATER WORD
Rule 51    simple_command_element -> WORD
Rule 52    simple_command_element -> ASSIGNMENT_WORD
Rule 53    simple_command_element -> redirection
Rule 54    redirection_list -> redirection
Rule 55    redirection_list -> redirection_list redirection
Rule 56    simple_command -> simple_command_element
Rule 57    simple_command -> simple_command simple_command_element
Rule 58    command -> simple_command
Rule 59    command -> shell_command
Rule 60    command -> shell_command redirection_list
Rule 61    command -> function_def
Rule 62    command -> coproc
Rule 63    shell_command -> for_command
Rule 64    shell_command -> case_command
Rule 65    shell_command -> WHILE compound_list DO compound_list DONE
Rule 66    shell_command -> UNTIL compound_list DO compound_list DONE
Rule 67    shell_command -> select_command
Rule 68    shell_command -> if_command
Rule 69    shell_command -> subshell
Rule 70    shell_command -> group_command
Rule 71    shell_command -> arith_command
Rule 72    shell_command -> cond_command
Rule 73    shell_command -> arith_for_command
Rule 74    for_command -> FOR WORD newline_list DO compound_list DONE
Rule 75    for_command -> FOR WORD newline_list { compound_list }
Rule 76    for_command -> FOR WORD ; newline_list DO compound_list DONE
Rule 77    for_command -> FOR WORD ; newline_list { compound_list }
Rule 78    for_command -> FOR WORD newline_list IN word_list list_terminator newline_list DO compound_list DONE
Rule 79    for_command -> FOR WORD newline_list IN word_list list_terminator newline_list { compound_list }
Rule 80    for_command -> FOR WORD newline_list IN list_terminator newline_list DO compound_list DONE
Rule 81    for_command -> FOR WORD newline_list IN list_terminator newline_list { compound_list }
Rule 82    arith_for_command -> FOR ARITH_FOR_EXPRS list_terminator newline_list DO compound_list DONE
Rule 83    arith_for_command -> FOR ARITH_FOR_EXPRS list_terminator newline_list { compound_list }
Rule 84    arith_for_command -> FOR ARITH_FOR_EXPRS DO compound_list DONE
Rule 85    arith_for_command -> FOR ARITH_FOR_EXPRS { compound_list }
Rule 86    select_command -> SELECT WORD newline_list DO list DONE
Rule 87    select_command -> SELECT WORD newline_list { list }
Rule 88    select_command -> SELECT WORD ; newline_list DO list DONE
Rule 89    select_command -> SELECT WORD ; newline_list { list }
Rule 90    select_command -> SELECT WORD newline_list IN word_list list_terminator newline_list DO list DONE
Rule 91    select_command -> SELECT WORD newline_list IN word_list list_terminator newline_list { list }
Rule 92    case_command -> CASE WORD newline_list IN newline_list ESAC
Rule 93    case_command -> CASE WORD newline_list IN case_clause_sequence newline_list ESAC
Rule 94    case_command -> CASE WORD newline_list IN case_clause ESAC
Rule 95    function_def -> WORD ( ) newline_list function_body
Rule 96    function_def -> FUNCTION WORD ( ) newline_list function_body
Rule 97    function_def -> FUNCTION WORD newline_list function_body
Rule 98    function_body -> shell_command
Rule 99    function_body -> shell_command redirection_list
Rule 100   subshell -> ( compound_list )
Rule 101   coproc -> COPROC shell_command
Rule 102   coproc -> COPROC shell_command redirection_list
Rule 103   coproc -> COPROC WORD shell_command
Rule 104   coproc -> COPROC WORD shell_command redirection_list
Rule 105   coproc -> COPROC simple_command
Rule 106   if_command -> IF compound_list THEN compound_list FI
Rule 107   if_command -> IF compound_list THEN compound_list ELSE compound_list FI
Rule 108   if_command -> IF compound_list THEN compound_list elif_clause FI
Rule 109   group_command -> { compound_list }
Rule 110   arith_command -> ARITH_CMD
Rule 111   cond_command -> COND_START COND_CMD COND_END
Rule 112   elif_clause -> ELIF compound_list THEN compound_list
Rule 113   elif_clause -> ELIF compound_list THEN compound_list ELSE compound_list
Rule 114   elif_clause -> ELIF compound_list THEN compound_list elif_clause
Rule 115   case_clause -> pattern_list
Rule 116   case_clause -> case_clause_sequence pattern_list
Rule 117   pattern_list -> newline_list pattern ) compound_list
Rule 118   pattern_list -> newline_list pattern ) newline_list
Rule 119   pattern_list -> newline_list ( pattern ) compound_list
Rule 120   pattern_list -> newline_list ( pattern ) newline_list
Rule 121   case_clause_sequence -> pattern_list SEMI_SEMI
Rule 122   case_clause_sequence -> case_clause_sequence pattern_list SEMI_SEMI
Rule 123   case_clause_sequence -> pattern_list SEMI_AND
Rule 124   case_clause_sequence -> case_clause_sequence pattern_list SEMI_AND
Rule 125   case_clause_sequence -> pattern_list SEMI_SEMI_AND
Rule 126   case_clause_sequence -> case_clause_sequence pattern_list SEMI_SEMI_AND
Rule 127   pattern -> WORD
Rule 128   pattern -> pattern | WORD
Rule 129   list -> newline_list list0
Rule 130   compound_list -> list
Rule 131   compound_list -> newline_list list1
Rule 132   list0 -> list1 NEWLINE newline_list
Rule 133   list0 -> list1 & newline_list
Rule 134   list0 -> list1 ; newline_list
Rule 135   list1 -> list1 AND_AND newline_list list1
Rule 136   list1 -> list1 OR_OR newline_list list1
Rule 137   list1 -> list1 & newline_list list1
Rule 138   list1 -> list1 ; newline_list list1
Rule 139   list1 -> list1 NEWLINE newline_list list1
Rule 140   list1 -> pipeline_command
Rule 141   simple_list_terminator -> NEWLINE
Rule 142   list_terminator -> NEWLINE
Rule 143   list_terminator -> ;
Rule 144   newline_list -> <empty>
Rule 145   newline_list -> newline_list NEWLINE
Rule 146   simple_list -> simple_list1
Rule 147   simple_list -> simple_list1 &
Rule 148   simple_list -> simple_list1 ;
Rule 149   simple_list1 -> simple_list1 AND_AND newline_list simple_list1
Rule 150   simple_list1 -> simple_list1 OR_OR newline_list simple_list1
Rule 151   simple_list1 -> simple_list1 & simple_list1
Rule 152   simple_list1 -> simple_list1 ; simple_list1
Rule 153   simple_list1 -> pipeline_command
Rule 154   pipeline_command -> pipeline
Rule 155   pipeline_command -> BANG pipeline_command
Rule 156   pipeline_command -> timespec pipeline_command
Rule 157   pipeline_command -> timespec list_terminator
Rule 158   pipeline_command -> BANG list_terminator
Rule 159   pipeline -> pipeline | newline_list pipeline
Rule 160   pipeline -> pipeline BAR_AND newline_list pipeline
Rule 161   pipeline -> command
Rule 162   timespec -> TIME
Rule 163   timespec -> TIME TIMEOPT
Rule 164   timespec -> TIME TIMEOPT TIMEIGN

Terminals, with rules where they appear

&                    : 133 137 147 151
(                    : 95 96 100 119 120
)                    : 95 96 100 117 118 119 120
-                    : 43 44 45 46 47 48
;                    : 76 77 88 89 134 138 143 148 152
<                    : 8 10 12
>                    : 7 9 11
AND_AND              : 135 149
AND_GREATER          : 49
AND_GREATER_GREATER  : 50
ARITH_CMD            : 110
ARITH_FOR_EXPRS      : 82 83 84 85
ASSIGNMENT_WORD      : 52
BANG                 : 155 158
BAR_AND              : 160
CASE                 : 92 93 94
COMMENT              : 
COND_CMD             : 111
COND_END             : 111
COND_START           : 111
COPROC               : 101 102 103 104 105
DO                   : 65 66 74 76 78 80 82 84 86 88 90
DONE                 : 65 66 74 76 78 80 82 84 86 88 90
ELIF                 : 112 113 114
ELSE                 : 107 113
ESAC                 : 92 93 94
FI                   : 106 107 108
FOR                  : 74 75 76 77 78 79 80 81 82 83 84 85
FUNCTION             : 96 97
GREATER_AND          : 34 35 36 40 41 42 43 44 45
GREATER_BAR          : 16 17 18
GREATER_GREATER      : 13 14 15
IF                   : 106 107 108
IN                   : 78 79 80 81 90 91 92 93 94
LESS_AND             : 31 32 33 37 38 39 46 47 48
LESS_GREATER         : 19 20 21
LESS_LESS            : 22 23 24
LESS_LESS_LESS       : 28 29 30
LESS_LESS_MINUS      : 25 26 27
NEWLINE              : 4 132 139 141 142 145
NUMBER               : 9 10 14 17 20 23 26 29 31 32 32 33 34 35 35 36 38 41 44 47
OR_OR                : 136 150
REDIR_WORD           : 11 12 15 18 21 24 27 30 33 36 39 42 45 48
SELECT               : 86 87 88 89 90 91
SEMI_AND             : 123 124
SEMI_SEMI            : 121 122
SEMI_SEMI_AND        : 125 126
THEN                 : 106 107 108 112 113 114
TIME                 : 162 163 164
TIMEIGN              : 164
TIMEOPT              : 163 164
UNTIL                : 66
WHILE                : 65
WORD                 : 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 37 38 39 40 41 42 49 50 51 74 75 76 77 78 79 80 81 86 87 88 89 90 91 92 93 94 95 96 97 103 104 127 128
error                : 
{                    : 75 77 79 81 83 85 87 89 91 109
|                    : 128 159
}                    : 75 77 79 81 83 85 87 89 91 109

Nonterminals, with rules where they appear

arith_command        : 71
arith_for_command    : 73
case_clause          : 94
case_clause_sequence : 93 116 122 124 126
case_command         : 64
command              : 161
compound_list        : 65 65 66 66 74 75 76 77 78 79 80 81 82 83 84 85 100 106 106 107 107 107 108 108 109 112 112 113 113 113 114 114 117 119
cond_command         : 72
coproc               : 62
elif_clause          : 108 114
for_command          : 63
function_body        : 95 96 97
function_def         : 61
group_command        : 70
if_command           : 68
inputunit            : 1 2
inputunit_list       : 2 0
list                 : 86 87 88 89 90 91 130
list0                : 129
list1                : 131 132 133 134 135 135 136 136 137 137 138 138 139 139
list_terminator      : 78 79 80 81 82 83 90 91 157 158
newline_list         : 74 75 76 77 78 78 79 79 80 80 81 81 82 83 86 87 88 89 90 90 91 91 92 92 93 93 94 95 96 97 117 118 118 119 120 120 129 131 132 133 134 135 136 137 138 139 145 149 150 159 160
pattern              : 117 118 119 120 128
pattern_list         : 115 116 121 122 123 124 125 126
pipeline             : 154 159 159 160 160
pipeline_command     : 140 153 155 156
redirection          : 53 54 55
redirection_list     : 55 60 99 102 104
select_command       : 67
shell_command        : 59 60 98 99 101 102 103 104
simple_command       : 57 58 105
simple_command_element : 56 57
simple_list          : 3
simple_list1         : 146 147 148 149 149 150 150 151 151 152 152
simple_list_terminator : 3
subshell             : 69
timespec             : 156 157
word_list            : 6 78 79 90 91

Parsing method: LALR

state 0

    (0) S' -> . inputunit_list
    (1) inputunit_list -> . inputunit
    (2) inputunit_list -> . inputunit_list inputunit
    (3) inputunit -> . simple_list simple_list_terminator
    (4) inputunit -> . NEWLINE
    (146) simple_list -> . simple_list1
    (147) simple_list -> . simple_list1 &
    (148) simple_list -> . simple_list1 ;
    (149) simple_list1 -> . simple_list1 AND_AND newline_list simple_list1
    (150) simple_list1 -> . simple_list1 OR_OR newline_list simple_list1
    (151) simple_list1 -> . simple_list1 & simple_list1
    (152) simple_list1 -> . simple_list1 ; simple_list1
    (153) simple_list1 -> . pipeline_command
    (154) pipeline_command -> . pipeline
    (155) pipeline_command -> . BANG pipeline_command
    (156) pipeline_command -> . timespec pipeline_command
    (157) pipeline_command -> . timespec list_terminator
    (158) pipeline_command -> . BANG list_terminator
    (159) pipeline -> . pipeline | newline_list pipeline
    (160) pipeline -> . pipeline BAR_AND newline_list pipeline
    (161) pipeline -> . command
    (162) timespec -> . TIME
    (163) timespec -> . TIME TIMEOPT
    (164) timespec -> . TIME TIMEOPT TIMEIGN
    (58) command -> . simple_command
    (59) command -> . shell_command
    (60) command -> . shell_command redirection_list
    (61) command -> . function_def
    (62) command -> . coproc
    (56) simple_command -> . simple_command_element
    (57) simple_command -> . simple_command simple_command_element
    (63) shell_command -> . for_command
    (64) shell_command -> . case_command
    (65) shell_command -> . WHILE compound_list DO compound_list DONE
    (66) shell_command -> . UNTIL compound_list DO compound_list DONE
    (67) shell_command -> . select_command
    (68) shell_command -> . if_command
    (69) shell_command -> . subshell
    (70) shell_command -> . group_command
    (71) shell_command -> . arith_command
    (72) shell_command -> . cond_command
    (73) shell_command -> . arith_for_command
    (95) function_def -> . WORD ( ) newline_list function_body
    (96) function_def -> . FUNCTION WORD ( ) newline_list function_body
    (97) function_def -> . FUNCTION WORD newline_list function_body
    (101) coproc -> . COPROC shell_command
    (102) coproc -> . COPROC shell_command redirection_list
    (103) coproc -> . COPROC WORD shell_command
    (104) coproc -> . COPROC WORD shell_command redirection_list
    (105) coproc -> . COPROC simple_command
    (51) simple_command_element -> . WORD
    (52) simple_command_element -> . ASSIGNMENT_WORD
    (53) simple_command_element -> . redirection
    (74) for_command -> . FOR WORD newline_list DO compound_list DONE
    (75) for_command -> . FOR WORD newline_list { compound_list }
    (76) for_command -> . FOR WORD ; newline_list DO compound_list DONE
    (77) for_command -> . FOR WORD ; newline_list { compound_list }
    (78) for_command -> . FOR WORD newline_list IN word_list list_terminator newline_list DO compound_list DONE
    (79) for_command -> . FOR WORD newline_list IN word_list list_terminator newline_list { compound_list }
    (80) for_command -> . FOR WORD newline_list IN list_terminator newline_list DO compound_list DONE
    (81) for_command -> . FOR WORD newline_list IN list_terminator newline_list { compound_list }
    (92) case_command -> . CASE WORD newline_list IN newline_list ESAC
    (93) case_command -> . CASE WORD newline_list IN case_clause_sequence newline_list ESAC
    (94) case_command -> . CASE WORD newline_list IN case_clause ESAC
    (86) select_command -> . SELECT WORD newline_list DO list DONE
    (87) select_command -> . SELECT WORD newline_list { list }
    (88) select_command -> . SELECT WORD ; newline_list DO list DONE
    (89) select_command -> . SELECT WORD ; newline_list { list }
    (90) select_command -> . SELECT WORD newline_list IN word_list list_terminator newline_list DO list DONE
    (91) select_command -> . SELECT WORD newline_list IN word_list list_terminator newline_list { list }
    (106) if_command -> . IF compound_list THEN compound_list FI
    (107) if_command -> . IF compound_list THEN compound_list ELSE compound_list FI
    (108) if_command -> . IF compound_list THEN compound_list elif_clause FI
    (100) subshell -> . ( compound_list )
    (109) group_command -> . { compound_list }
    (110) arith_command -> . ARITH_CMD
    (111) cond_command -> . COND_START COND_CMD COND_END
    (82) arith_for_command -> . FOR ARITH_FOR_EXPRS list_terminator newline_list DO compound_list DONE
    (83) arith_for_command -> . FOR ARITH_FOR_EXPRS list_terminator newline_list { compound_list }
    (84) arith_for_command -> . FOR ARITH_FOR_EXPRS DO compound_list DONE
    (85) arith_for_command -> . FOR ARITH_FOR_EXPRS { compound_list }
    (7) redirection -> . > WORD
    (8) redirection -> . < WORD
    (9) redirection -> . NUMBER > WORD
    (10) redirection -> . NUMBER < WORD
    (11) redirection -> . REDIR_WORD > WORD
    (12) redirection -> . REDIR_WORD < WORD
    (13) redirection -> . GREATER_GREATER WORD
    (14) redirection -> . NUMBER GREATER_GREATER WORD
    (15) redirection -> . REDIR_WORD GREATER_GREATER WORD
    (16) redirection -> . GREATER_BAR WORD
    (17) redirection -> . NUMBER GREATER_BAR WORD
    (18) redirection -> . REDIR_WORD GREATER_BAR WORD
    (19) redirection -> . LESS_GREATER WORD
    (20) redirection -> . NUMBER LESS_GREATER WORD
    (21) redirection -> . REDIR_WORD LESS_GREATER WORD
    (22) redirection -> . LESS_LESS WORD
    (23) redirection -> . NUMBER LESS_LESS WORD
    (24) redirection -> . REDIR_WORD LESS_LESS WORD
    (25) redirection -> . LESS_LESS_MINUS WORD
    (26) redirection -> . NUMBER LESS_LESS_MINUS WORD
    (27) redirection -> . REDIR_WORD LESS_LESS_MINUS WORD
    (28) redirection -> . LESS_LESS_LESS WORD
    (29) redirection -> . NUMBER LESS_LESS_LESS WORD
    (30) redirection -> . REDIR_WORD LESS_LESS_LESS WORD
    (31) redirection -> . LESS_AND NUMBER
    (32) redirection -> . NUMBER LESS_AND NUMBER
    (33) redirection -> . REDIR_WORD LESS_AND NUMBER
    (34) redirection -> . GREATER_AND NUMBER
    (35) redirection -> . NUMBER GREATER_AND NUMBER
    (36) redirection -> . REDIR_WORD GREATER_AND NUMBER
    (37) redirection -> . LESS_AND WORD
    (38) redirection -> . NUMBER LESS_AND WORD
    (39) redirection -> . REDIR_WORD LESS_AND WORD
    (40) redirection -> . GREATER_AND WORD
    (41) redirection -> . NUMBER GREATER_AND WORD
    (42) redirection -> . REDIR_WORD GREATER_AND WORD
    (43) redirection -> . GREATER_AND -
    (44) redirection -> . NUMBER GREATER_AND -
    (45) redirection -> . REDIR_WORD GREATER_AND -
    (46) redirection -> . LESS_AND -
    (47) redirection -> . NUMBER LESS_AND -
    (48) redirection -> . REDIR_WORD LESS_AND -
    (49) redirection -> . AND_GREATER WORD
    (50) redirection -> . AND_GREATER_GREATER WORD

    NEWLINE         shift and go to state 29
    BANG            shift and go to state 32
    TIME            shift and go to state 48
    WHILE           shift and go to state 34
    UNTIL           shift and go to state 4
    WORD            shift and go to state 53
    FUNCTION        shift and go to state 49
    COPROC          shift and go to state 44
    ASSIGNMENT_WORD shift and go to state 26
    FOR             shift and go to state 31
    CASE            shift and go to state 51
    SELECT          shift and go to state 39
    IF              shift and go to state 5
    (               shift and go to state 36
    {               shift and go to state 19
    ARITH_CMD       shift and go to state 46
    COND_START      shift and go to state 22
    >               shift and go to state 41
    <               shift and go to state 40
    NUMBER          shift and go to state 9
    REDIR_WORD      shift and go to state 7
    GREATER_GREATER shift and go to state 28
    GREATER_BAR     shift and go to state 11
    LESS_GREATER    shift and go to state 33
    LESS_LESS       shift and go to state 3
    LESS_LESS_MINUS shift and go to state 18
    LESS_LESS_LESS  shift and go to state 14
    LESS_AND        shift and go to state 17
    GREATER_AND     shift and go to state 47
    AND_GREATER     shift and go to state 45
    AND_GREATER_GREATER shift and go to state 37

    command                        shift and go to state 23
    select_command                 shift and go to state 6
    inputunit                      shift and go to state 42
    for_command                    shift and go to state 43
    shell_command                  shift and go to state 25
    simple_command_element         shift and go to state 2
    coproc                         shift and go to state 10
    simple_command                 shift and go to state 27
    if_command                     shift and go to state 38
    pipeline_command               shift and go to state 12
    cond_command                   shift and go to state 30
    simple_list                    shift and go to state 13
    simple_list1                   shift and go to state 8
    arith_for_command              shift and go to state 15
    arith_command                  shift and go to state 16
    case_command                   shift and go to state 35
    subshell                       shift and go to state 21
    group_command                  shift and go to state 20
    redirection                    shift and go to state 50
    timespec                       shift and go to state 24
    pipeline                       shift and go to state 52
    inputunit_list                 shift and go to state 54
    function_def                   shift and go to state 1

state 1

    (61) command -> function_def .

    |               reduce using rule 61 (command -> function_def .)
    BAR_AND         reduce using rule 61 (command -> function_def .)
    AND_AND         reduce using rule 61 (command -> function_def .)
    OR_OR           reduce using rule 61 (command -> function_def .)
    &               reduce using rule 61 (command -> function_def .)
    ;               reduce using rule 61 (command -> function_def .)
    NEWLINE         reduce using rule 61 (command -> function_def .)
    DO              reduce using rule 61 (command -> function_def .)
    THEN            reduce using rule 61 (command -> function_def .)
    }               reduce using rule 61 (command -> function_def .)
    )               reduce using rule 61 (command -> function_def .)
    DONE            reduce using rule 61 (command -> function_def .)
    FI              reduce using rule 61 (command -> function_def .)
    ELSE            reduce using rule 61 (command -> function_def .)
    ELIF            reduce using rule 61 (command -> function_def .)
    SEMI_SEMI       reduce using rule 61 (command -> function_def .)
    SEMI_AND        reduce using rule 61 (command -> function_def .)
    SEMI_SEMI_AND   reduce using rule 61 (command -> function_def .)
    ESAC            reduce using rule 61 (command -> function_def .)


state 2

    (56) simple_command -> simple_command_element .

    WORD            reduce using rule 56 (simple_command -> simple_command_element .)
    ASSIGNMENT_WORD reduce using rule 56 (simple_command -> simple_command_element .)
    >               reduce using rule 56 (simple_command -> simple_command_element .)
    <               reduce using rule 56 (simple_command -> simple_command_element .)
    NUMBER          reduce using rule 56 (simple_command -> simple_command_element .)
    REDIR_WORD      reduce using rule 56 (simple_command -> simple_command_element .)
    GREATER_GREATER reduce using rule 56 (simple_command -> simple_command_element .)
    GREATER_BAR     reduce using rule 56 (simple_command -> simple_command_element .)
    LESS_GREATER    reduce using rule 56 (simple_command -> simple_command_element .)
    LESS_LESS       reduce using rule 56 (simple_command -> simple_command_element .)
    LESS_LESS_MINUS reduce using rule 56 (simple_command -> simple_command_element .)
    LESS_LESS_LESS  reduce using rule 56 (simple_command -> simple_command_element .)
    LESS_AND        reduce using rule 56 (simple_command -> simple_command_element .)
    GREATER_AND     reduce using rule 56 (simple_command -> simple_command_element .)
    AND_GREATER     reduce using rule 56 (simple_command -> simple_command_element .)
    AND_GREATER_GREATER reduce using rule 56 (simple_command -> simple_command_element .)
    |               reduce using rule 56 (simple_command -> simple_command_element .)
    BAR_AND         reduce using rule 56 (simple_command -> simple_command_element .)
    AND_AND         reduce using rule 56 (simple_command -> simple_command_element .)
    OR_OR           reduce using rule 56 (simple_command -> simple_command_element .)
    &               reduce using rule 56 (simple_command -> simple_command_element .)
    ;               reduce using rule 56 (simple_command -> simple_command_element .)
    NEWLINE         reduce using rule 56 (simple_command -> simple_command_element .)
    DO              reduce using rule 56 (simple_command -> simple_command_element .)
    THEN            reduce using rule 56 (simple_command -> simple_command_element .)
    }               reduce using rule 56 (simple_command -> simple_command_element .)
    )               reduce using rule 56 (simple_command -> simple_command_element .)
    DONE            reduce using rule 56 (simple_command -> simple_command_element .)
    FI              reduce using rule 56 (simple_command -> simple_command_element .)
    ELSE            reduce using rule 56 (simple_command -> simple_command_element .)
    ELIF            reduce using rule 56 (simple_command -> simple_command_element .)
    SEMI_SEMI       reduce using rule 56 (simple_command -> simple_command_element .)
    SEMI_AND        reduce using rule 56 (simple_command -> simple_command_element .)
    SEMI_SEMI_AND   reduce using rule 56 (simple_command -> simple_command_element .)
    ESAC            reduce using rule 56 (simple_command -> simple_command_element .)


state 3

    (22) redirection -> LESS_LESS . WORD

    WORD            shift and go to state 55


state 4

    (66) shell_command -> UNTIL . compound_list DO compound_list DONE
    (130) compound_list -> . list
    (131) compound_list -> . newline_list list1
    (129) list -> . newline_list list0
    (144) newline_list -> .
    (145) newline_list -> . newline_list NEWLINE

    NEWLINE         reduce using rule 144 (newline_list -> .)
    BANG            reduce using rule 144 (newline_list -> .)
    TIME            reduce using rule 144 (newline_list -> .)
    WHILE           reduce using rule 144 (newline_list -> .)
    UNTIL           reduce using rule 144 (newline_list -> .)
    WORD            reduce using rule 144 (newline_list -> .)
    FUNCTION        reduce using rule 144 (newline_list -> .)
    COPROC          reduce using rule 144 (newline_list -> .)
    ASSIGNMENT_WORD reduce using rule 144 (newline_list -> .)
    FOR             reduce using rule 144 (newline_list -> .)
    CASE            reduce using rule 144 (newline_list -> .)
    SELECT          reduce using rule 144 (newline_list -> .)
    IF              reduce using rule 144 (newline_list -> .)
    (               reduce using rule 144 (newline_list -> .)
    {               reduce using rule 144 (newline_list -> .)
    ARITH_CMD       reduce using rule 144 (newline_list -> .)
    COND_START      reduce using rule 144 (newline_list -> .)
    >               reduce using rule 144 (newline_list -> .)
    <               reduce using rule 144 (newline_list -> .)
    NUMBER          reduce using rule 144 (newline_list -> .)
    REDIR_WORD      reduce using rule 144 (newline_list -> .)
    GREATER_GREATER reduce using rule 144 (newline_list -> .)
    GREATER_BAR     reduce using rule 144 (newline_list -> .)
    LESS_GREATER    reduce using rule 144 (newline_list -> .)
    LESS_LESS       reduce using rule 144 (newline_list -> .)
    LESS_LESS_MINUS reduce using rule 144 (newline_list -> .)
    LESS_LESS_LESS  reduce using rule 144 (newline_list -> .)
    LESS_AND        reduce using rule 144 (newline_list -> .)
    GREATER_AND     reduce using rule 144 (newline_list -> .)
    AND_GREATER     reduce using rule 144 (newline_list -> .)
    AND_GREATER_GREATER reduce using rule 144 (newline_list -> .)

    newline_list                   shift and go to state 56
    compound_list                  shift and go to state 57
    list                           shift and go to state 58

state 5

    (106) if_command -> IF . compound_list THEN compound_list FI
    (107) if_command -> IF . compound_list THEN compound_list ELSE compound_list FI
    (108) if_command -> IF . compound_list THEN compound_list elif_clause FI
    (130) compound_list -> . list
    (131) compound_list -> . newline_list list1
    (129) list -> . newline_list list0
    (144) newline_list -> .
    (145) newline_list -> . newline_list NEWLINE

    NEWLINE         reduce using rule 144 (newline_list -> .)
    BANG            reduce using rule 144 (newline_list -> .)
    TIME            reduce using rule 144 (newline_list -> .)
    WHILE           reduce using rule 144 (newline_list -> .)
    UNTIL           reduce using rule 144 (newline_list -> .)
    WORD            reduce using rule 144 (newline_list -> .)
    FUNCTION        reduce using rule 144 (newline_list -> .)
    COPROC          reduce using rule 144 (newline_list -> .)
    ASSIGNMENT_WORD reduce using rule 144 (newline_list -> .)
    FOR             reduce using rule 144 (newline_list -> .)
    CASE            reduce using rule 144 (newline_list -> .)
    SELECT          reduce using rule 144 (newline_list -> .)
    IF              reduce using rule 144 (newline_list -> .)
    (               reduce using rule 144 (newline_list -> .)
    {               reduce using rule 144 (newline_list -> .)
    ARITH_CMD       reduce using rule 144 (newline_list -> .)
    COND_START      reduce using rule 144 (newline_list -> .)
    >               reduce using rule 144 (newline_list -> .)
    <               reduce using rule 144 (newline_list -> .)
    NUMBER          reduce using rule 144 (newline_list -> .)
    REDIR_WORD      reduce using rule 144 (newline_list -> .)
    GREATER_GREATER reduce using rule 144 (newline_list -> .)
    GREATER_BAR     reduce using rule 144 (newline_list -> .)
    LESS_GREATER    reduce using rule 144 (newline_list -> .)
    LESS_LESS       reduce using rule 144 (newline_list -> .)
    LESS_LESS_MINUS reduce using rule 144 (newline_list -> .)
    LESS_LESS_LESS  reduce using rule 144 (newline_list -> .)
    LESS_AND        reduce using rule 144 (newline_list -> .)
    GREATER_AND     reduce using rule 144 (newline_list -> .)
    AND_GREATER     reduce using rule 144 (newline_list -> .)
    AND_GREATER_GREATER reduce using rule 144 (newline_list -> .)

    newline_list                   shift and go to state 56
    compound_list                  shift and go to state 59
    list                           shift and go to state 58

state 6

    (67) shell_command -> select_command .

    >               reduce using rule 67 (shell_command -> select_command .)
    <               reduce using rule 67 (shell_command -> select_command .)
    NUMBER          reduce using rule 67 (shell_command -> select_command .)
    REDIR_WORD      reduce using rule 67 (shell_command -> select_command .)
    GREATER_GREATER reduce using rule 67 (shell_command -> select_command .)
    GREATER_BAR     reduce using rule 67 (shell_command -> select_command .)
    LESS_GREATER    reduce using rule 67 (shell_command -> select_command .)
    LESS_LESS       reduce using rule 67 (shell_command -> select_command .)
    LESS_LESS_MINUS reduce using rule 67 (shell_command -> select_command .)
    LESS_LESS_LESS  reduce using rule 67 (shell_command -> select_command .)
    LESS_AND        reduce using rule 67 (shell_command -> select_command .)
    GREATER_AND     reduce using rule 67 (shell_command -> select_command .)
    AND_GREATER     reduce using rule 67 (shell_command -> select_command .)
    AND_GREATER_GREATER reduce using rule 67 (shell_command -> select_command .)
    |               reduce using rule 67 (shell_command -> select_command .)
    BAR_AND         reduce using rule 67 (shell_command -> select_command .)
    AND_AND         reduce using rule 67 (shell_command -> select_command .)
    OR_OR           reduce using rule 67 (shell_command -> select_command .)
    &               reduce using rule 67 (shell_command -> select_command .)
    ;               reduce using rule 67 (shell_command -> select_command .)
    NEWLINE         reduce using rule 67 (shell_command -> select_command .)
    DO              reduce using rule 67 (shell_command -> select_command .)
    THEN            reduce using rule 67 (shell_command -> select_command .)
    }               reduce using rule 67 (shell_command -> select_command .)
    )               reduce using rule 67 (shell_command -> select_command .)
    DONE            reduce using rule 67 (shell_command -> select_command .)
    FI              reduce using rule 67 (shell_command -> select_command .)
    ELSE            reduce using rule 67 (shell_command -> select_command .)
    ELIF            reduce using rule 67 (shell_command -> select_command .)
    SEMI_SEMI       reduce using rule 67 (shell_command -> select_command .)
    SEMI_AND        reduce using rule 67 (shell_command -> select_command .)
    SEMI_SEMI_AND   reduce using rule 67 (shell_command -> select_command .)
    ESAC            reduce using rule 67 (shell_command -> select_command .)


state 7

    (11) redirection -> REDIR_WORD . > WORD
    (12) redirection -> REDIR_WORD . < WORD
    (15) redirection -> REDIR_WORD . GREATER_GREATER WORD
    (18) redirection -> REDIR_WORD . GREATER_BAR WORD
    (21) redirection -> REDIR_WORD . LESS_GREATER WORD
    (24) redirection -> REDIR_WORD . LESS_LESS WORD
    (27) redirection -> REDIR_WORD . LESS_LESS_MINUS WORD
    (30) redirection -> REDIR_WORD . LESS_LESS_LESS WORD
    (33) redirection -> REDIR_WORD . LESS_AND NUMBER
    (36) redirection -> REDIR_WORD . GREATER_AND NUMBER
    (39) redirection -> REDIR_WORD . LESS_AND WORD
    (42) redirection -> REDIR_WORD . GREATER_AND WORD
    (45) redirection -> REDIR_WORD . GREATER_AND -
    (48) redirection -> REDIR_WORD . LESS_AND -

    >               shift and go to state 65
    <               shift and go to state 67
    GREATER_GREATER shift and go to state 61
    GREATER_BAR     shift and go to state 60
    LESS_GREATER    shift and go to state 63
    LESS_LESS       shift and go to state 64
    LESS_LESS_MINUS shift and go to state 62
    LESS_LESS_LESS  shift and go to state 66
    LESS_AND        shift and go to state 68
    GREATER_AND     shift and go to state 69


state 8

    (146) simple_list -> simple_list1 .
    (147) simple_list -> simple_list1 . &
    (148) simple_list -> simple_list1 . ;
    (149) simple_list1 -> simple_list1 . AND_AND newline_list simple_list1
    (150) simple_list1 -> simple_list1 . OR_OR newline_list simple_list1
    (151) simple_list1 -> simple_list1 . & simple_list1
    (152) simple_list1 -> simple_list1 . ; simple_list1

    NEWLINE         reduce using rule 146 (simple_list -> simple_list1 .)
    &               shift and go to state 71
    ;               shift and go to state 73
    AND_AND         shift and go to state 70
    OR_OR           shift and go to state 72


state 9

    (9) redirection -> NUMBER . > WORD
    (10) redirection -> NUMBER . < WORD
    (14) redirection -> NUMBER . GREATER_GREATER WORD
    (17) redirection -> NUMBER . GREATER_BAR WORD
    (20) redirection -> NUMBER . LESS_GREATER WORD
    (23) redirection -> NUMBER . LESS_LESS WORD
    (26) redirection -> NUMBER . LESS_LESS_MINUS WORD
    (29) redirection -> NUMBER . LESS_LESS_LESS WORD
    (32) redirection -> NUMBER . LESS_AND NUMBER
    (35) redirection -> NUMBER . GREATER_AND NUMBER
    (38) redirection -> NUMBER . LESS_AND WORD
    (41) redirection -> NUMBER . GREATER_AND WORD
    (44) redirection -> NUMBER . GREATER_AND -
    (47) redirection -> NUMBER . LESS_AND -

    >               shift and go to state 79
    <               shift and go to state 81
    GREATER_GREATER shift and go to state 75
    GREATER_BAR     shift and go to state 74
    LESS_GREATER    shift and go to state 77
    LESS_LESS       shift and go to state 78
    LESS_LESS_MINUS shift and go to state 76
    LESS_LESS_LESS  shift and go to state 80
    LESS_AND        shift and go to state 82
    GREATER_AND     shift and go to state 83


state 10

    (62) command -> coproc .

    |               reduce using rule 62 (command -> coproc .)
    BAR_AND         reduce using rule 62 (command -> coproc .)
    AND_AND         reduce using rule 62 (command -> coproc .)
    OR_OR           reduce using rule 62 (command -> coproc .)
    &               reduce using rule 62 (command -> coproc .)
    ;               reduce using rule 62 (command -> coproc .)
    NEWLINE         reduce using rule 62 (command -> coproc .)
    DO              reduce using rule 62 (command -> coproc .)
    THEN            reduce using rule 62 (command -> coproc .)
    }               reduce using rule 62 (command -> coproc .)
    )               reduce using rule 62 (command -> coproc .)
    DONE            reduce using rule 62 (command -> coproc .)
    FI              reduce using rule 62 (command -> coproc .)
    ELSE            reduce using rule 62 (command -> coproc .)
    ELIF            reduce using rule 62 (command -> coproc .)
    SEMI_SEMI       reduce using rule 62 (command -> coproc .)
    SEMI_AND        reduce using rule 62 (command -> coproc .)
    SEMI_SEMI_AND   reduce using rule 62 (command -> coproc .)
    ESAC            reduce using rule 62 (command -> coproc .)


state 11

    (16) redirection -> GREATER_BAR . WORD

    WORD            shift and go to state 84


state 12

    (153) simple_list1 -> pipeline_command .

    AND_AND         reduce using rule 153 (simple_list1 -> pipeline_command .)
    OR_OR           reduce using rule 153 (simple_list1 -> pipeline_command .)
    &               reduce using rule 153 (simple_list1 -> pipeline_command .)
    ;               reduce using rule 153 (simple_list1 -> pipeline_command .)
    NEWLINE         reduce using rule 153 (simple_list1 -> pipeline_command .)


state 13

    (3) inputunit -> simple_list . simple_list_terminator
    (141) simple_list_terminator -> . NEWLINE

    NEWLINE         shift and go to state 85

    simple_list_terminator         shift and go to state 86

state 14

    (28) redirection -> LESS_LESS_LESS . WORD

    WORD            shift and go to state 87


state 15

    (73) shell_command -> arith_for_command .

    >               reduce using rule 73 (shell_command -> arith_for_command .)
    <               reduce using rule 73 (shell_command -> arith_for_command .)
    NUMBER          reduce using rule 73 (shell_command -> arith_for_command .)
    REDIR_WORD      reduce using rule 73 (shell_command -> arith_for_command .)
    GREATER_GREATER reduce using rule 73 (shell_command -> arith_for_command .)
    GREATER_BAR     reduce using rule 73 (shell_command -> arith_for_command .)
    LESS_GREATER    reduce using rule 73 (shell_command -> arith_for_command .)
    LESS_LESS       reduce using rule 73 (shell_command -> arith_for_command .)
    LESS_LESS_MINUS reduce using rule 73 (shell_command -> arith_for_command .)
    LESS_LESS_LESS  reduce using rule 73 (shell_command -> arith_for_command .)
    LESS_AND        reduce using rule 73 (shell_command -> arith_for_command .)
    GREATER_AND     reduce using rule 73 (shell_command -> arith_for_command .)
    AND_GREATER     reduce using rule 73 (shell_command -> arith_for_command .)
    AND_GREATER_GREATER reduce using rule 73 (shell_command -> arith_for_command .)
    |               reduce using rule 73 (shell_command -> arith_for_command .)
    BAR_AND         reduce using rule 73 (shell_command -> arith_for_command .)
    AND_AND         reduce using rule 73 (shell_command -> arith_for_command .)
    OR_OR           reduce using rule 73 (shell_command -> arith_for_command .)
    &               reduce using rule 73 (shell_command -> arith_for_command .)
    ;               reduce using rule 73 (shell_command -> arith_for_command .)
    NEWLINE         reduce using rule 73 (shell_command -> arith_for_command .)
    DO              reduce using rule 73 (shell_command -> arith_for_command .)
    THEN            reduce using rule 73 (shell_command -> arith_for_command .)
    }               reduce using rule 73 (shell_command -> arith_for_command .)
    )               reduce using rule 73 (shell_command -> arith_for_command .)
    DONE            reduce using rule 73 (shell_command -> arith_for_command .)
    FI              reduce using rule 73 (shell_command -> arith_for_command .)
    ELSE            reduce using rule 73 (shell_command -> arith_for_command .)
    ELIF            reduce using rule 73 (shell_command -> arith_for_command .)
    SEMI_SEMI       reduce using rule 73 (shell_command -> arith_for_command .)
    SEMI_AND        reduce using rule 73 (shell_command -> arith_for_command .)
    SEMI_SEMI_AND   reduce using rule 73 (shell_command -> arith_for_command .)
    ESAC            reduce using rule 73 (shell_command -> arith_for_command .)


state 16

    (71) shell_command -> arith_command .

    >               reduce using rule 71 (shell_command -> arith_command .)
    <               reduce using rule 71 (shell_command -> arith_command .)
    NUMBER          reduce using rule 71 (shell_command -> arith_command .)
    REDIR_WORD      reduce using rule 71 (shell_command -> arith_command .)
    GREATER_GREATER reduce using rule 71 (shell_command -> arith_command .)
    GREATER_BAR     reduce using rule 71 (shell_command -> arith_command .)
    LESS_GREATER    reduce using rule 71 (shell_command -> arith_command .)
    LESS_LESS       reduce using rule 71 (shell_command -> arith_command .)
    LESS_LESS_MINUS reduce using rule 71 (shell_command -> arith_command .)
    LESS_LESS_LESS  reduce using rule 71 (shell_command -> arith_command .)
    LESS_AND        reduce using rule 71 (shell_command -> arith_command .)
    GREATER_AND     reduce using rule 71 (shell_command -> arith_command .)
    AND_GREATER     reduce using rule 71 (shell_command -> arith_command .)
    AND_GREATER_GREATER reduce using rule 71 (shell_command -> arith_command .)
    |               reduce using rule 71 (shell_command -> arith_command .)
    BAR_AND         reduce using rule 71 (shell_command -> arith_command .)
    AND_AND         reduce using rule 71 (shell_command -> arith_command .)
    OR_OR           reduce using rule 71 (shell_command -> arith_command .)
    &               reduce using rule 71 (shell_command -> arith_command .)
    ;               reduce using rule 71 (shell_command -> arith_command .)
    NEWLINE         reduce using rule 71 (shell_command -> arith_command .)
    DO              reduce using rule 71 (shell_command -> arith_command .)
    THEN            reduce using rule 71 (shell_command -> arith_command .)
    }               reduce using rule 71 (shell_command -> arith_command .)
    )               reduce using rule 71 (shell_command -> arith_command .)
    DONE            reduce using rule 71 (shell_command -> arith_command .)
    FI              reduce using rule 71 (shell_command -> arith_command .)
    ELSE            reduce using rule 71 (shell_command -> arith_command .)
    ELIF            reduce using rule 71 (shell_command -> arith_command .)
    SEMI_SEMI       reduce using rule 71 (shell_command -> arith_command .)
    SEMI_AND        reduce using rule 71 (shell_command -> arith_command .)
    SEMI_SEMI_AND   reduce using rule 71 (shell_command -> arith_command .)
    ESAC            reduce using rule 71 (shell_command -> arith_command .)


state 17

    (31) redirection -> LESS_AND . NUMBER
    (37) redirection -> LESS_AND . WORD
    (46) redirection -> LESS_AND . -

    NUMBER          shift and go to state 90
    WORD            shift and go to state 89
    -               shift and go to state 88


state 18

    (25) redirection -> LESS_LESS_MINUS . WORD

    WORD            shift and go to state 91


state 19

    (109) group_command -> { . compound_list }
    (130) compound_list -> . list
    (131) compound_list -> . newline_list list1
    (129) list -> . newline_list list0
    (144) newline_list -> .
    (145) newline_list -> . newline_list NEWLINE

    NEWLINE         reduce using rule 144 (newline_list -> .)
    BANG            reduce using rule 144 (newline_list -> .)
    TIME            reduce using rule 144 (newline_list -> .)
    WHILE           reduce using rule 144 (newline_list -> .)
    UNTIL           reduce using rule 144 (newline_list -> .)
    WORD            reduce using rule 144 (newline_list -> .)
    FUNCTION        reduce using rule 144 (newline_list -> .)
    COPROC          reduce using rule 144 (newline_list -> .)
    ASSIGNMENT_WORD reduce using rule 144 (newline_list -> .)
    FOR             reduce using rule 144 (newline_list -> .)
    CASE            reduce using rule 144 (newline_list -> .)
    SELECT          reduce using rule 144 (newline_list -> .)
    IF              reduce using rule 144 (newline_list -> .)
    (               reduce using rule 144 (newline_list -> .)
    {               reduce using rule 144 (newline_list -> .)
    ARITH_CMD       reduce using rule 144 (newline_list -> .)
    COND_START      reduce using rule 144 (newline_list -> .)
    >               reduce using rule 144 (newline_list -> .)
    <               reduce using rule 144 (newline_list -> .)
    NUMBER          reduce using rule 144 (newline_list -> .)
    REDIR_WORD      reduce using rule 144 (newline_list -> .)
    GREATER_GREATER reduce using rule 144 (newline_list -> .)
    GREATER_BAR     reduce using rule 144 (newline_list -> .)
    LESS_GREATER    reduce using rule 144 (newline_list -> .)
    LESS_LESS       reduce using rule 144 (newline_list -> .)
    LESS_LESS_MINUS reduce using rule 144 (newline_list -> .)
    LESS_LESS_LESS  reduce using rule 144 (newline_list -> .)
    LESS_AND        reduce using rule 144 (newline_list -> .)
    GREATER_AND     reduce using rule 144 (newline_list -> .)
    AND_GREATER     reduce using rule 144 (newline_list -> .)
    AND_GREATER_GREATER reduce using rule 144 (newline_list -> .)

    newline_list                   shift and go to state 56
    compound_list                  shift and go to state 92
    list                           shift and go to state 58

state 20

    (70) shell_command -> group_command .

    >               reduce using rule 70 (shell_command -> group_command .)
    <               reduce using rule 70 (shell_command -> group_command .)
    NUMBER          reduce using rule 70 (shell_command -> group_command .)
    REDIR_WORD      reduce using rule 70 (shell_command -> group_command .)
    GREATER_GREATER reduce using rule 70 (shell_command -> group_command .)
    GREATER_BAR     reduce using rule 70 (shell_command -> group_command .)
    LESS_GREATER    reduce using rule 70 (shell_command -> group_command .)
    LESS_LESS       reduce using rule 70 (shell_command -> group_command .)
    LESS_LESS_MINUS reduce using rule 70 (shell_command -> group_command .)
    LESS_LESS_LESS  reduce using rule 70 (shell_command -> group_command .)
    LESS_AND        reduce using rule 70 (shell_command -> group_command .)
    GREATER_AND     reduce using rule 70 (shell_command -> group_command .)
    AND_GREATER     reduce using rule 70 (shell_command -> group_command .)
    AND_GREATER_GREATER reduce using rule 70 (shell_command -> group_command .)
    |               reduce using rule 70 (shell_command -> group_command .)
    BAR_AND         reduce using rule 70 (shell_command -> group_command .)
    AND_AND         reduce using rule 70 (shell_command -> group_command .)
    OR_OR           reduce using rule 70 (shell_command -> group_command .)
    &               reduce using rule 70 (shell_command -> group_command .)
    ;               reduce using rule 70 (shell_command -> group_command .)
    NEWLINE         reduce using rule 70 (shell_command -> group_command .)
    DO              reduce using rule 70 (shell_command -> group_command .)
    THEN            reduce using rule 70 (shell_command -> group_command .)
    }               reduce using rule 70 (shell_command -> group_command .)
    )               reduce using rule 70 (shell_command -> group_command .)
    DONE            reduce using rule 70 (shell_command -> group_command .)
    FI              reduce using rule 70 (shell_command -> group_command .)
    ELSE            reduce using rule 70 (shell_command -> group_command .)
    ELIF            reduce using rule 70 (shell_command -> group_command .)
    SEMI_SEMI       reduce using rule 70 (shell_command -> group_command .)
    SEMI_AND        reduce using rule 70 (shell_command -> group_command .)
    SEMI_SEMI_AND   reduce using rule 70 (shell_command -> group_command .)
    ESAC            reduce using rule 70 (shell_command -> group_command .)


state 21

    (69) shell_command -> subshell .

    >               reduce using rule 69 (shell_command -> subshell .)
    <               reduce using rule 69 (shell_command -> subshell .)
    NUMBER          reduce using rule 69 (shell_command -> subshell .)
    REDIR_WORD      reduce using rule 69 (shell_command -> subshell .)
    GREATER_GREATER reduce using rule 69 (shell_command -> subshell .)
    GREATER_BAR     reduce using rule 69 (shell_command -> subshell .)
    LESS_GREATER    reduce using rule 69 (shell_command -> subshell .)
    LESS_LESS       reduce using rule 69 (shell_command -> subshell .)
    LESS_LESS_MINUS reduce using rule 69 (shell_command -> subshell .)
    LESS_LESS_LESS  reduce using rule 69 (shell_command -> subshell .)
    LESS_AND        reduce using rule 69 (shell_command -> subshell .)
    GREATER_AND     reduce using rule 69 (shell_command -> subshell .)
    AND_GREATER     reduce using rule 69 (shell_command -> subshell .)
    AND_GREATER_GREATER reduce using rule 69 (shell_command -> subshell .)
    |               reduce using rule 69 (shell_command -> subshell .)
    BAR_AND         reduce using rule 69 (shell_command -> subshell .)
    AND_AND         reduce using rule 69 (shell_command -> subshell .)
    OR_OR           reduce using rule 69 (shell_command -> subshell .)
    &               reduce using rule 69 (shell_command -> subshell .)
    ;               reduce using rule 69 (shell_command -> subshell .)
    NEWLINE         reduce using rule 69 (shell_command -> subshell .)
    DO              reduce using rule 69 (shell_command -> subshell .)
    THEN            reduce using rule 69 (shell_command -> subshell .)
    }               reduce using rule 69 (shell_command -> subshell .)
    )               reduce using rule 69 (shell_command -> subshell .)
    DONE            reduce using rule 69 (shell_command -> subshell .)
    FI              reduce using rule 69 (shell_command -> subshell .)
    ELSE            reduce using rule 69 (shell_command -> subshell .)
    ELIF            reduce using rule 69 (shell_command -> subshell .)
    SEMI_SEMI       reduce using rule 69 (shell_command -> subshell .)
    SEMI_AND        reduce using rule 69 (shell_command -> subshell .)
    SEMI_SEMI_AND   reduce using rule 69 (shell_command -> subshell .)
    ESAC            reduce using rule 69 (shell_command -> subshell .)


state 22

    (111) cond_command -> COND_START . COND_CMD COND_END

    COND_CMD        shift and go to state 93


state 23

    (161) pipeline -> command .

    |               reduce using rule 161 (pipeline -> command .)
    BAR_AND         reduce using rule 161 (pipeline -> command .)
    AND_AND         reduce using rule 161 (pipeline -> command .)
    OR_OR           reduce using rule 161 (pipeline -> command .)
    &               reduce using rule 161 (pipeline -> command .)
    ;               reduce using rule 161 (pipeline -> command .)
    NEWLINE         reduce using rule 161 (pipeline -> command .)
    DO              reduce using rule 161 (pipeline -> command .)
    THEN            reduce using rule 161 (pipeline -> command .)
    }               reduce using rule 161 (pipeline -> command .)
    )               reduce using rule 161 (pipeline -> command .)
    DONE            reduce using rule 161 (pipeline -> command .)
    FI              reduce using rule 161 (pipeline -> command .)
    ELSE            reduce using rule 161 (pipeline -> command .)
    ELIF            reduce using rule 161 (pipeline -> command .)
    SEMI_SEMI       reduce using rule 161 (pipeline -> command .)
    SEMI_AND        reduce using rule 161 (pipeline -> command .)
    SEMI_SEMI_AND   reduce using rule 161 (pipeline -> command .)
    ESAC            reduce using rule 161 (pipeline -> command .)


state 24

    (156) pipeline_command -> timespec . pipeline_command
    (157) pipeline_command -> timespec . list_terminator
    (154) pipeline_command -> . pipeline
    (155) pipeline_command -> . BANG pipeline_command
    (156) pipeline_command -> . timespec pipeline_command
    (157) pipeline_command -> . timespec list_terminator
    (158) pipeline_command -> . BANG list_terminator
    (142) list_terminator -> . NEWLINE
    (143) list_terminator -> . ;
    (159) pipeline -> . pipeline | newline_list pipeline
    (160) pipeline -> . pipeline BAR_AND newline_list pipeline
    (161) pipeline -> . command
    (162) timespec -> . TIME
    (163) timespec -> . TIME TIMEOPT
    (164) timespec -> . TIME TIMEOPT TIMEIGN
    (58) command -> . simple_command
    (59) command -> . shell_command
    (60) command -> . shell_command redirection_list
    (61) command -> . function_def
    (62) command -> . coproc
    (56) simple_command -> . simple_command_element
    (57) simple_command -> . simple_command simple_command_element
    (63) shell_command -> . for_command
    (64) shell_command -> . case_command
    (65) shell_command -> . WHILE compound_list DO compound_list DONE
    (66) shell_command -> . UNTIL compound_list DO compound_list DONE
    (67) shell_command -> . select_command
    (68) shell_command -> . if_command
    (69) shell_command -> . subshell
    (70) shell_command -> . group_command
    (71) shell_command -> . arith_command
    (72) shell_command -> . cond_command
    (73) shell_command -> . arith_for_command
    (95) function_def -> . WORD ( ) newline_list function_body
    (96) function_def -> . FUNCTION WORD ( ) newline_list function_body
    (97) function_def -> . FUNCTION WORD newline_list function_body
    (101) coproc -> . COPROC shell_command
    (102) coproc -> . COPROC shell_command redirection_list
    (103) coproc -> . COPROC WORD shell_command
    (104) coproc -> . COPROC WORD shell_command redirection_list
    (105) coproc -> . COPROC simple_command
    (51) simple_command_element -> . WORD
    (52) simple_command_element -> . ASSIGNMENT_WORD
    (53) simple_command_element -> . redirection
    (74) for_command -> . FOR WORD newline_list DO compound_list DONE
    (75) for_command -> . FOR WORD newline_list { compound_list }
    (76) for_command -> . FOR WORD ; newline_list DO compound_list DONE
    (77) for_command -> . FOR WORD ; newline_list { compound_list }
    (78) for_command -> . FOR WORD newline_list IN word_list list_terminator newline_list DO compound_list DONE
    (79) for_command -> . FOR WORD newline_list IN word_list list_terminator newline_list { compound_list }
    (80) for_command -> . FOR WORD newline_list IN list_terminator newline_list DO compound_list DONE
    (81) for_command -> . FOR WORD newline_list IN list_terminator newline_list { compound_list }
    (92) case_command -> . CASE WORD newline_list IN newline_list ESAC
    (93) case_command -> . CASE WORD newline_list IN case_clause_sequence newline_list ESAC
    (94) case_command -> . CASE WORD newline_list IN case_clause ESAC
    (86) select_command -> . SELECT WORD newline_list DO list DONE
    (87) select_command -> . SELECT WORD newline_list { list }
    (88) select_command -> . SELECT WORD ; newline_list DO list DONE
    (89) select_command -> . SELECT WORD ; newline_list { list }
    (90) select_command -> . SELECT WORD newline_list IN word_list list_terminator newline_list DO list DONE
    (91) select_command -> . SELECT WORD newline_list IN word_list list_terminator newline_list { list }
    (106) if_command -> . IF compound_list THEN compound_list FI
    (107) if_command -> . IF compound_list THEN compound_list ELSE compound_list FI
    (108) if_command -> . IF compound_list THEN compound_list elif_clause FI
    (100) subshell -> . ( compound_list )
    (109) group_command -> . { compound_list }
    (110) arith_command -> . ARITH_CMD
    (111) cond_command -> . COND_START COND_CMD COND_END
    (82) arith_for_command -> . FOR ARITH_FOR_EXPRS list_terminator newline_list DO compound_list DONE
    (83) arith_for_command -> . FOR ARITH_FOR_EXPRS list_terminator newline_list { compound_list }
    (84) arith_for_command -> . FOR ARITH_FOR_EXPRS DO compound_list DONE
    (85) arith_for_command -> . FOR ARITH_FOR_EXPRS { compound_list }
    (7) redirection -> . > WORD
    (8) redirection -> . < WORD
    (9) redirection -> . NUMBER > WORD
    (10) redirection -> . NUMBER < WORD
    (11) redirection -> . REDIR_WORD > WORD
    (12) redirection -> . REDIR_WORD < WORD
    (13) redirection -> . GREATER_GREATER WORD
    (14) redirection -> . NUMBER GREATER_GREATER WORD
    (15) redirection -> . REDIR_WORD GREATER_GREATER WORD
    (16) redirection -> . GREATER_BAR WORD
    (17) redirection -> . NUMBER GREATER_BAR WORD
    (18) redirection -> . REDIR_WORD GREATER_BAR WORD
    (19) redirection -> . LESS_GREATER WORD
    (20) redirection -> . NUMBER LESS_GREATER WORD
    (21) redirection -> . REDIR_WORD LESS_GREATER WORD
    (22) redirection -> . LESS_LESS WORD
    (23) redirection -> . NUMBER LESS_LESS WORD
    (24) redirection -> . REDIR_WORD LESS_LESS WORD
    (25) redirection -> . LESS_LESS_MINUS WORD
    (26) redirection -> . NUMBER LESS_LESS_MINUS WORD
    (27) redirection -> . REDIR_WORD LESS_LESS_MINUS WORD
    (28) redirection -> . LESS_LESS_LESS WORD
    (29) redirection -> . NUMBER LESS_LESS_LESS WORD
    (30) redirection -> . REDIR_WORD LESS_LESS_LESS WORD
    (31) redirection -> . LESS_AND NUMBER
    (32) redirection -> . NUMBER LESS_AND NUMBER
    (33) redirection -> . REDIR_WORD LESS_AND NUMBER
    (34) redirection -> . GREATER_AND NUMBER
    (35) redirection -> . NUMBER GREATER_AND NUMBER
    (36) redirection -> . REDIR_WORD GREATER_AND NUMBER
    (37) redirection -> . LESS_AND WORD
    (38) redirection -> . NUMBER LESS_AND WORD
    (39) redirection -> . REDIR_WORD LESS_AND WORD
    (40) redirection -> . GREATER_AND WORD
    (41) redirection -> . NUMBER GREATER_AND WORD
    (42) redirection -> . REDIR_WORD GREATER_AND WORD
    (43) redirection -> . GREATER_AND -
    (44) redirection -> . NUMBER GREATER_AND -
    (45) redirection -> . REDIR_WORD GREATER_AND -
    (46) redirection -> . LESS_AND -
    (47) redirection -> . NUMBER LESS_AND -
    (48) redirection -> . REDIR_WORD LESS_AND -
    (49) redirection -> . AND_GREATER WORD
    (50) redirection -> . AND_GREATER_GREATER WORD

    BANG            shift and go to state 32
    NEWLINE         shift and go to state 94
    ;               shift and go to state 95
    TIME            shift and go to state 48
    WHILE           shift and go to state 34
    UNTIL           shift and go to state 4
    WORD            shift and go to state 53
    FUNCTION        shift and go to state 49
    COPROC          shift and go to state 44
    ASSIGNMENT_WORD shift and go to state 26
    FOR             shift and go to state 31
    CASE            shift and go to state 51
    SELECT          shift and go to state 39
    IF              shift and go to state 5
    (               shift and go to state 36
    {               shift and go to state 19
    ARITH_CMD       shift and go to state 46
    COND_START      shift and go to state 22
    >               shift and go to state 41
    <               shift and go to state 40
    NUMBER          shift and go to state 9
    REDIR_WORD      shift and go to state 7
    GREATER_GREATER shift and go to state 28
    GREATER_BAR     shift and go to state 11
    LESS_GREATER    shift and go to state 33
    LESS_LESS       shift and go to state 3
    LESS_LESS_MINUS shift and go to state 18
    LESS_LESS_LESS  shift and go to state 14
    LESS_AND        shift and go to state 17
    GREATER_AND     shift and go to state 47
    AND_GREATER     shift and go to state 45
    AND_GREATER_GREATER shift and go to state 37

    command                        shift and go to state 23
    select_command                 shift and go to state 6
    timespec                       shift and go to state 24
    shell_command                  shift and go to state 25
    simple_command_element         shift and go to state 2
    coproc                         shift and go to state 10
    simple_command                 shift and go to state 27
    pipeline_command               shift and go to state 96
    cond_command                   shift and go to state 30
    list_terminator                shift and go to state 97
    for_command                    shift and go to state 43
    arith_for_command              shift and go to state 15
    arith_command                  shift and go to state 16
    case_command                   shift and go to state 35
    group_command                  shift and go to state 20
    redirection                    shift and go to state 50
    subshell                       shift and go to state 21
    pipeline                       shift and go to state 52
    if_command                     shift and go to state 38
    function_def                   shift and go to state 1

state 25

    (59) command -> shell_command .
    (60) command -> shell_command . redirection_list
    (54) redirection_list -> . redirection
    (55) redirection_list -> . redirection_list redirection
    (7) redirection -> . > WORD
    (8) redirection -> . < WORD
    (9) redirection -> . NUMBER > WORD
    (10) redirection -> . NUMBER < WORD
    (11) redirection -> . REDIR_WORD > WORD
    (12) redirection -> . REDIR_WORD < WORD
    (13) redirection -> . GREATER_GREATER WORD
    (14) redirection -> . NUMBER GREATER_GREATER WORD
    (15) redirection -> . REDIR_WORD GREATER_GREATER WORD
    (16) redirection -> . GREATER_BAR WORD
    (17) redirection -> . NUMBER GREATER_BAR WORD
    (18) redirection -> . REDIR_WORD GREATER_BAR WORD
    (19) redirection -> . LESS_GREATER WORD
    (20) redirection -> . NUMBER LESS_GREATER WORD
    (21) redirection -> . REDIR_WORD LESS_GREATER WORD
    (22) redirection -> . LESS_LESS WORD
    (23) redirection -> . NUMBER LESS_LESS WORD
    (24) redirection -> . REDIR_WORD LESS_LESS WORD
    (25) redirection -> . LESS_LESS_MINUS WORD
    (26) redirection -> . NUMBER LESS_LESS_MINUS WORD
    (27) redirection -> . REDIR_WORD LESS_LESS_MINUS WORD
    (28) redirection -> . LESS_LESS_LESS WORD
    (29) redirection -> . NUMBER LESS_LESS_LESS WORD
    (30) redirection -> . REDIR_WORD LESS_LESS_LESS WORD
    (31) redirection -> . LESS_AND NUMBER
    (32) redirection -> . NUMBER LESS_AND NUMBER
    (33) redirection -> . REDIR_WORD LESS_AND NUMBER
    (34) redirection -> . GREATER_AND NUMBER
    (35) redirection -> . NUMBER GREATER_AND NUMBER
    (36) redirection -> . REDIR_WORD GREATER_AND NUMBER
    (37) redirection -> . LESS_AND WORD
    (38) redirection -> . NUMBER LESS_AND WORD
    (39) redirection -> . REDIR_WORD LESS_AND WORD
    (40) redirection -> . GREATER_AND WORD
    (41) redirection -> . NUMBER GREATER_AND WORD
    (42) redirection -> . REDIR_WORD GREATER_AND WORD
    (43) redirection -> . GREATER_AND -
    (44) redirection -> . NUMBER GREATER_AND -
    (45) redirection -> . REDIR_WORD GREATER_AND -
    (46) redirection -> . LESS_AND -
    (47) redirection -> . NUMBER LESS_AND -
    (48) redirection -> . REDIR_WORD LESS_AND -
    (49) redirection -> . AND_GREATER WORD
    (50) redirection -> . AND_GREATER_GREATER WORD

    |               reduce using rule 59 (command -> shell_command .)
    BAR_AND         reduce using rule 59 (command -> shell_command .)
    AND_AND         reduce using rule 59 (command -> shell_command .)
    OR_OR           reduce using rule 59 (command -> shell_command .)
    &               reduce using rule 59 (command -> shell_command .)
    ;               reduce using rule 59 (command -> shell_command .)
    NEWLINE         reduce using rule 59 (command -> shell_command .)
    DO              reduce using rule 59 (command -> shell_command .)
    THEN            reduce using rule 59 (command -> shell_command .)
    }               reduce using rule 59 (command -> shell_command .)
    )               reduce using rule 59 (command -> shell_command .)
    DONE            reduce using rule 59 (command -> shell_command .)
    FI              reduce using rule 59 (command -> shell_command .)
    ELSE            reduce using rule 59 (command -> shell_command .)
    ELIF            reduce using rule 59 (command -> shell_command .)
    SEMI_SEMI       reduce using rule 59 (command -> shell_command .)
    SEMI_AND        reduce using rule 59 (command -> shell_command .)
    SEMI_SEMI_AND   reduce using rule 59 (command -> shell_command .)
    ESAC            reduce using rule 59 (command -> shell_command .)
    >               shift and go to state 41
    <               shift and go to state 40
    NUMBER          shift and go to state 9
    REDIR_WORD      shift and go to state 7
    GREATER_GREATER shift and go to state 28
    GREATER_BAR     shift and go to state 11
    LESS_GREATER    shift and go to state 33
    LESS_LESS       shift and go to state 3
    LESS_LESS_MINUS shift and go to state 18
    LESS_LESS_LESS  shift and go to state 14
    LESS_AND        shift and go to state 17
    GREATER_AND     shift and go to state 47
    AND_GREATER     shift and go to state 45
    AND_GREATER_GREATER shift and go to state 37

    redirection                    shift and go to state 98
    redirection_list               shift and go to state 99

state 26

    (52) simple_command_element -> ASSIGNMENT_WORD .

    WORD            reduce using rule 52 (simple_command_element -> ASSIGNMENT_WORD .)
    ASSIGNMENT_WORD reduce using rule 52 (simple_command_element -> ASSIGNMENT_WORD .)
    >               reduce using rule 52 (simple_command_element -> ASSIGNMENT_WORD .)
    <               reduce using rule 52 (simple_command_element -> ASSIGNMENT_WORD .)
    NUMBER          reduce using rule 52 (simple_command_element -> ASSIGNMENT_WORD .)
    REDIR_WORD      reduce using rule 52 (simple_command_element -> ASSIGNMENT_WORD .)
    GREATER_GREATER reduce using rule 52 (simple_command_element -> ASSIGNMENT_WORD .)
    GREATER_BAR     reduce using rule 52 (simple_command_element -> ASSIGNMENT_WORD .)
    LESS_GREATER    reduce using rule 52 (simple_command_element -> ASSIGNMENT_WORD .)
    LESS_LESS       reduce using rule 52 (simple_command_element -> ASSIGNMENT_WORD .)
    LESS_LESS_MINUS reduce using rule 52 (simple_command_element -> ASSIGNMENT_WORD .)
    LESS_LESS_LESS  reduce using rule 52 (simple_command_element -> ASSIGNMENT_WORD .)
    LESS_AND        reduce using rule 52 (simple_command_element -> ASSIGNMENT_WORD .)
    GREATER_AND     reduce using rule 52 (simple_command_element -> ASSIGNMENT_WORD .)
    AND_GREATER     reduce using rule 52 (simple_command_element -> ASSIGNMENT_WORD .)
    AND_GREATER_GREATER reduce using rule 52 (simple_command_element -> ASSIGNMENT_WORD .)
    |               reduce using rule 52 (simple_command_element -> ASSIGNMENT_WORD .)
    BAR_AND         reduce using rule 52 (simple_command_element -> ASSIGNMENT_WORD .)
    &               reduce using rule 52 (simple_command_element -> ASSIGNMENT_WORD .)
    ;               reduce using rule 52 (simple_command_element -> ASSIGNMENT_WORD .)
    AND_AND         reduce using rule 52 (simple_command_element -> ASSIGNMENT_WORD .)
    OR_OR           reduce using rule 52 (simple_command_element -> ASSIGNMENT_WORD .)
    NEWLINE         reduce using rule 52 (simple_command_element -> ASSIGNMENT_WORD .)
    DO              reduce using rule 52 (simple_command_element -> ASSIGNMENT_WORD .)
    THEN            reduce using rule 52 (simple_command_element -> ASSIGNMENT_WORD .)
    }               reduce using rule 52 (simple_command_element -> ASSIGNMENT_WORD .)
    )               reduce using rule 52 (simple_command_element -> ASSIGNMENT_WORD .)
    DONE            reduce using rule 52 (simple_command_element -> ASSIGNMENT_WORD .)
    FI              reduce using rule 52 (simple_command_element -> ASSIGNMENT_WORD .)
    ELSE            reduce using rule 52 (simple_command_element -> ASSIGNMENT_WORD .)
    ELIF            reduce using rule 52 (simple_command_element -> ASSIGNMENT_WORD .)
    SEMI_SEMI       reduce using rule 52 (simple_command_element -> ASSIGNMENT_WORD .)
    SEMI_AND        reduce using rule 52 (simple_command_element -> ASSIGNMENT_WORD .)
    SEMI_SEMI_AND   reduce using rule 52 (simple_command_element -> ASSIGNMENT_WORD .)
    ESAC            reduce using rule 52 (simple_command_element -> ASSIGNMENT_WORD .)


state 27

    (58) command -> simple_command .
    (57) simple_command -> simple_command . simple_command_element
    (51) simple_command_element -> . WORD
    (52) simple_command_element -> . ASSIGNMENT_WORD
    (53) simple_command_element -> . redirection
    (7) redirection -> . > WORD
    (8) redirection -> . < WORD
    (9) redirection -> . NUMBER > WORD
    (10) redirection -> . NUMBER < WORD
    (11) redirection -> . REDIR_WORD > WORD
    (12) redirection -> . REDIR_WORD < WORD
    (13) redirection -> . GREATER_GREATER WORD
    (14) redirection -> . NUMBER GREATER_GREATER WORD
    (15) redirection -> . REDIR_WORD GREATER_GREATER WORD
    (16) redirection -> . GREATER_BAR WORD
    (17) redirection -> . NUMBER GREATER_BAR WORD
    (18) redirection -> . REDIR_WORD GREATER_BAR WORD
    (19) redirection -> . LESS_GREATER WORD
    (20) redirection -> . NUMBER LESS_GREATER WORD
    (21) redirection -> . REDIR_WORD LESS_GREATER WORD
    (22) redirection -> . LESS_LESS WORD
    (23) redirection -> . NUMBER LESS_LESS WORD
    (24) redirection -> . REDIR_WORD LESS_LESS WORD
    (25) redirection -> . LESS_LESS_MINUS WORD
    (26) redirection -> . NUMBER LESS_LESS_MINUS WORD
    (27) redirection -> . REDIR_WORD LESS_LESS_MINUS WORD
    (28) redirection -> . LESS_LESS_LESS WORD
    (29) redirection -> . NUMBER LESS_LESS_LESS WORD
    (30) redirection -> . REDIR_WORD LESS_LESS_LESS WORD
    (31) redirection -> . LESS_AND NUMBER
    (32) redirection -> . NUMBER LESS_AND NUMBER
    (33) redirection -> . REDIR_WORD LESS_AND NUMBER
    (34) redirection -> . GREATER_AND NUMBER
    (35) redirection -> . NUMBER GREATER_AND NUMBER
    (36) redirection -> . REDIR_WORD GREATER_AND NUMBER
    (37) redirection -> . LESS_AND WORD
    (38) redirection -> . NUMBER LESS_AND WORD
    (39) redirection -> . REDIR_WORD LESS_AND WORD
    (40) redirection -> . GREATER_AND WORD
    (41) redirection -> . NUMBER GREATER_AND WORD
    (42) redirection -> . REDIR_WORD GREATER_AND WORD
    (43) redirection -> . GREATER_AND -
    (44) redirection -> . NUMBER GREATER_AND -
    (45) redirection -> . REDIR_WORD GREATER_AND -
    (46) redirection -> . LESS_AND -
    (47) redirection -> . NUMBER LESS_AND -
    (48) redirection -> . REDIR_WORD LESS_AND -
    (49) redirection -> . AND_GREATER WORD
    (50) redirection -> . AND_GREATER_GREATER WORD

    |               reduce using rule 58 (command -> simple_command .)
    BAR_AND         reduce using rule 58 (command -> simple_command .)
    AND_AND         reduce using rule 58 (command -> simple_command .)
    OR_OR           reduce using rule 58 (command -> simple_command .)
    &               reduce using rule 58 (command -> simple_command .)
    ;               reduce using rule 58 (command -> simple_command .)
    NEWLINE         reduce using rule 58 (command -> simple_command .)
    DO              reduce using rule 58 (command -> simple_command .)
    THEN            reduce using rule 58 (command -> simple_command .)
    }               reduce using rule 58 (command -> simple_command .)
    )               reduce using rule 58 (command -> simple_command .)
    DONE            reduce using rule 58 (command -> simple_command .)
    FI              reduce using rule 58 (command -> simple_command .)
    ELSE            reduce using rule 58 (command -> simple_command .)
    ELIF            reduce using rule 58 (command -> simple_command .)
    SEMI_SEMI       reduce using rule 58 (command -> simple_command .)
    SEMI_AND        reduce using rule 58 (command -> simple_command .)
    SEMI_SEMI_AND   reduce using rule 58 (command -> simple_command .)
    ESAC            reduce using rule 58 (command -> simple_command .)
    WORD            shift and go to state 101
    ASSIGNMENT_WORD shift and go to state 26
    >               shift and go to state 41
    <               shift and go to state 40
    NUMBER          shift and go to state 9
    REDIR_WORD      shift and go to state 7
    GREATER_GREATER shift and go to state 28
    GREATER_BAR     shift and go to state 11
    LESS_GREATER    shift and go to state 33
    LESS_LESS       shift and go to state 3
    LESS_LESS_MINUS shift and go to state 18
    LESS_LESS_LESS  shift and go to state 14
    LESS_AND        shift and go to state 17
    GREATER_AND     shift and go to state 47
    AND_GREATER     shift and go to state 45
    AND_GREATER_GREATER shift and go to state 37

    simple_command_element         shift and go to state 100
    redirection                    shift and go to state 50

state 28

    (13) redirection -> GREATER_GREATER . WORD

    WORD            shift and go to state 102


state 29

    (4) inputunit -> NEWLINE .

    NEWLINE         reduce using rule 4 (inputunit -> NEWLINE .)
    BANG            reduce using rule 4 (inputunit -> NEWLINE .)
    TIME            reduce using rule 4 (inputunit -> NEWLINE .)
    WHILE           reduce using rule 4 (inputunit -> NEWLINE .)
    UNTIL           reduce using rule 4 (inputunit -> NEWLINE .)
    WORD            reduce using rule 4 (inputunit -> NEWLINE .)
    FUNCTION        reduce using rule 4 (inputunit -> NEWLINE .)
    COPROC          reduce using rule 4 (inputunit -> NEWLINE .)
    ASSIGNMENT_WORD reduce using rule 4 (inputunit -> NEWLINE .)
    FOR             reduce using rule 4 (inputunit -> NEWLINE .)
    CASE            reduce using rule 4 (inputunit -> NEWLINE .)
    SELECT          reduce using rule 4 (inputunit -> NEWLINE .)
    IF              reduce using rule 4 (inputunit -> NEWLINE .)
    (               reduce using rule 4 (inputunit -> NEWLINE .)
    {               reduce using rule 4 (inputunit -> NEWLINE .)
    ARITH_CMD       reduce using rule 4 (inputunit -> NEWLINE .)
    COND_START      reduce using rule 4 (inputunit -> NEWLINE .)
    >               reduce using rule 4 (inputunit -> NEWLINE .)
    <               reduce using rule 4 (inputunit -> NEWLINE .)
    NUMBER          reduce using rule 4 (inputunit -> NEWLINE .)
    REDIR_WORD      reduce using rule 4 (inputunit -> NEWLINE .)
    GREATER_GREATER reduce using rule 4 (inputunit -> NEWLINE .)
    GREATER_BAR     reduce using rule 4 (inputunit -> NEWLINE .)
    LESS_GREATER    reduce using rule 4 (inputunit -> NEWLINE .)
    LESS_LESS       reduce using rule 4 (inputunit -> NEWLINE .)
    LESS_LESS_MINUS reduce using rule 4 (inputunit -> NEWLINE .)
    LESS_LESS_LESS  reduce using rule 4 (inputunit -> NEWLINE .)
    LESS_AND        reduce using rule 4 (inputunit -> NEWLINE .)
    GREATER_AND     reduce using rule 4 (inputunit -> NEWLINE .)
    AND_GREATER     reduce using rule 4 (inputunit -> NEWLINE .)
    AND_GREATER_GREATER reduce using rule 4 (inputunit -> NEWLINE .)
    $end            reduce using rule 4 (inputunit -> NEWLINE .)


state 30

    (72) shell_command -> cond_command .

    >               reduce using rule 72 (shell_command -> cond_command .)
    <               reduce using rule 72 (shell_command -> cond_command .)
    NUMBER          reduce using rule 72 (shell_command -> cond_command .)
    REDIR_WORD      reduce using rule 72 (shell_command -> cond_command .)
    GREATER_GREATER reduce using rule 72 (shell_command -> cond_command .)
    GREATER_BAR     reduce using rule 72 (shell_command -> cond_command .)
    LESS_GREATER    reduce using rule 72 (shell_command -> cond_command .)
    LESS_LESS       reduce using rule 72 (shell_command -> cond_command .)
    LESS_LESS_MINUS reduce using rule 72 (shell_command -> cond_command .)
    LESS_LESS_LESS  reduce using rule 72 (shell_command -> cond_command .)
    LESS_AND        reduce using rule 72 (shell_command -> cond_command .)
    GREATER_AND     reduce using rule 72 (shell_command -> cond_command .)
    AND_GREATER     reduce using rule 72 (shell_command -> cond_command .)
    AND_GREATER_GREATER reduce using rule 72 (shell_command -> cond_command .)
    |               reduce using rule 72 (shell_command -> cond_command .)
    BAR_AND         reduce using rule 72 (shell_command -> cond_command .)
    AND_AND         reduce using rule 72 (shell_command -> cond_command .)
    OR_OR           reduce using rule 72 (shell_command -> cond_command .)
    &               reduce using rule 72 (shell_command -> cond_command .)
    ;               reduce using rule 72 (shell_command -> cond_command .)
    NEWLINE         reduce using rule 72 (shell_command -> cond_command .)
    DO              reduce using rule 72 (shell_command -> cond_command .)
    THEN            reduce using rule 72 (shell_command -> cond_command .)
    }               reduce using rule 72 (shell_command -> cond_command .)
    )               reduce using rule 72 (shell_command -> cond_command .)
    DONE            reduce using rule 72 (shell_command -> cond_command .)
    FI              reduce using rule 72 (shell_command -> cond_command .)
    ELSE            reduce using rule 72 (shell_command -> cond_command .)
    ELIF            reduce using rule 72 (shell_command -> cond_command .)
    SEMI_SEMI       reduce using rule 72 (shell_command -> cond_command .)
    SEMI_AND        reduce using rule 72 (shell_command -> cond_command .)
    SEMI_SEMI_AND   reduce using rule 72 (shell_command -> cond_command .)
    ESAC            reduce using rule 72 (shell_command -> cond_command .)


state 31

    (74) for_command -> FOR . WORD newline_list DO compound_list DONE
    (75) for_command -> FOR . WORD newline_list { compound_list }
    (76) for_command -> FOR . WORD ; newline_list DO compound_list DONE
    (77) for_command -> FOR . WORD ; newline_list { compound_list }
    (78) for_command -> FOR . WORD newline_list IN word_list list_terminator newline_list DO compound_list DONE
    (79) for_command -> FOR . WORD newline_list IN word_list list_terminator newline_list { compound_list }
    (80) for_command -> FOR . WORD newline_list IN list_terminator newline_list DO compound_list DONE
    (81) for_command -> FOR . WORD newline_list IN list_terminator newline_list { compound_list }
    (82) arith_for_command -> FOR . ARITH_FOR_EXPRS list_terminator newline_list DO compound_list DONE
    (83) arith_for_command -> FOR . ARITH_FOR_EXPRS list_terminator newline_list { compound_list }
    (84) arith_for_command -> FOR . ARITH_FOR_EXPRS DO compound_list DONE
    (85) arith_for_command -> FOR . ARITH_FOR_EXPRS { compound_list }

    WORD            shift and go to state 103
    ARITH_FOR_EXPRS shift and go to state 104


state 32

    (155) pipeline_command -> BANG . pipeline_command
    (158) pipeline_command -> BANG . list_terminator
    (154) pipeline_command -> . pipeline
    (155) pipeline_command -> . BANG pipeline_command
    (156) pipeline_command -> . timespec pipeline_command
    (157) pipeline_command -> . timespec list_terminator
    (158) pipeline_command -> . BANG list_terminator
    (142) list_terminator -> . NEWLINE
    (143) list_terminator -> . ;
    (159) pipeline -> . pipeline | newline_list pipeline
    (160) pipeline -> . pipeline BAR_AND newline_list pipeline
    (161) pipeline -> . command
    (162) timespec -> . TIME
    (163) timespec -> . TIME TIMEOPT
    (164) timespec -> . TIME TIMEOPT TIMEIGN
    (58) command -> . simple_command
    (59) command -> . shell_command
    (60) command -> . shell_command redirection_list
    (61) command -> . function_def
    (62) command -> . coproc
    (56) simple_command -> . simple_command_element
    (57) simple_command -> . simple_command simple_command_element
    (63) shell_command -> . for_command
    (64) shell_command -> . case_command
    (65) shell_command -> . WHILE compound_list DO compound_list DONE
    (66) shell_command -> . UNTIL compound_list DO compound_list DONE
    (67) shell_command -> . select_command
    (68) shell_command -> . if_command
    (69) shell_command -> . subshell
    (70) shell_command -> . group_command
    (71) shell_command -> . arith_command
    (72) shell_command -> . cond_command
    (73) shell_command -> . arith_for_command
    (95) function_def -> . WORD ( ) newline_list function_body
    (96) function_def -> . FUNCTION WORD ( ) newline_list function_body
    (97) function_def -> . FUNCTION WORD newline_list function_body
    (101) coproc -> . COPROC shell_command
    (102) coproc -> . COPROC shell_command redirection_list
    (103) coproc -> . COPROC WORD shell_command
    (104) coproc -> . COPROC WORD shell_command redirection_list
    (105) coproc -> . COPROC simple_command
    (51) simple_command_element -> . WORD
    (52) simple_command_element -> . ASSIGNMENT_WORD
    (53) simple_command_element -> . redirection
    (74) for_command -> . FOR WORD newline_list DO compound_list DONE
    (75) for_command -> . FOR WORD newline_list { compound_list }
    (76) for_command -> . FOR WORD ; newline_list DO compound_list DONE
    (77) for_command -> . FOR WORD ; newline_list { compound_list }
    (78) for_command -> . FOR WORD newline_list IN word_list list_terminator newline_list DO compound_list DONE
    (79) for_command -> . FOR WORD newline_list IN word_list list_terminator newline_list { compound_list }
    (80) for_command -> . FOR WORD newline_list IN list_terminator newline_list DO compound_list DONE
    (81) for_command -> . FOR WORD newline_list IN list_terminator newline_list { compound_list }
    (92) case_command -> . CASE WORD newline_list IN newline_list ESAC
    (93) case_command -> . CASE WORD newline_list IN case_clause_sequence newline_list ESAC
    (94) case_command -> . CASE WORD newline_list IN case_clause ESAC
    (86) select_command -> . SELECT WORD newline_list DO list DONE
    (87) select_command -> . SELECT WORD newline_list { list }
    (88) select_command -> . SELECT WORD ; newline_list DO list DONE
    (89) select_command -> . SELECT WORD ; newline_list { list }
    (90) select_command -> . SELECT WORD newline_list IN word_list list_terminator newline_list DO list DONE
    (91) select_command -> . SELECT WORD newline_list IN word_list list_terminator newline_list { list }
    (106) if_command -> . IF compound_list THEN compound_list FI
    (107) if_command -> . IF compound_list THEN compound_list ELSE compound_list FI
    (108) if_command -> . IF compound_list THEN compound_list elif_clause FI
    (100) subshell -> . ( compound_list )
    (109) group_command -> . { compound_list }
    (110) arith_command -> . ARITH_CMD
    (111) cond_command -> . COND_START COND_CMD COND_END
    (82) arith_for_command -> . FOR ARITH_FOR_EXPRS list_terminator newline_list DO compound_list DONE
    (83) arith_for_command -> . FOR ARITH_FOR_EXPRS list_terminator newline_list { compound_list }
    (84) arith_for_command -> . FOR ARITH_FOR_EXPRS DO compound_list DONE
    (85) arith_for_command -> . FOR ARITH_FOR_EXPRS { compound_list }
    (7) redirection -> . > WORD
    (8) redirection -> . < WORD
    (9) redirection -> . NUMBER > WORD
    (10) redirection -> . NUMBER < WORD
    (11) redirection -> . REDIR_WORD > WORD
    (12) redirection -> . REDIR_WORD < WORD
    (13) redirection -> . GREATER_GREATER WORD
    (14) redirection -> . NUMBER GREATER_GREATER WORD
    (15) redirection -> . REDIR_WORD GREATER_GREATER WORD
    (16) redirection -> . GREATER_BAR WORD
    (17) redirection -> . NUMBER GREATER_BAR WORD
    (18) redirection -> . REDIR_WORD GREATER_BAR WORD
    (19) redirection -> . LESS_GREATER WORD
    (20) redirection -> . NUMBER LESS_GREATER WORD
    (21) redirection -> . REDIR_WORD LESS_GREATER WORD
    (22) redirection -> . LESS_LESS WORD
    (23) redirection -> . NUMBER LESS_LESS WORD
    (24) redirection -> . REDIR_WORD LESS_LESS WORD
    (25) redirection -> . LESS_LESS_MINUS WORD
    (26) redirection -> . NUMBER LESS_LESS_MINUS WORD
    (27) redirection -> . REDIR_WORD LESS_LESS_MINUS WORD
    (28) redirection -> . LESS_LESS_LESS WORD
    (29) redirection -> . NUMBER LESS_LESS_LESS WORD
    (30) redirection -> . REDIR_WORD LESS_LESS_LESS WORD
    (31) redirection -> . LESS_AND NUMBER
    (32) redirection -> . NUMBER LESS_AND NUMBER
    (33) redirection -> . REDIR_WORD LESS_AND NUMBER
    (34) redirection -> . GREATER_AND NUMBER
    (35) redirection -> . NUMBER GREATER_AND NUMBER
    (36) redirection -> . REDIR_WORD GREATER_AND NUMBER
    (37) redirection -> . LESS_AND WORD
    (38) redirection -> . NUMBER LESS_AND WORD
    (39) redirection -> . REDIR_WORD LESS_AND WORD
    (40) redirection -> . GREATER_AND WORD
    (41) redirection -> . NUMBER GREATER_AND WORD
    (42) redirection -> . REDIR_WORD GREATER_AND WORD
    (43) redirection -> . GREATER_AND -
    (44) redirection -> . NUMBER GREATER_AND -
    (45) redirection -> . REDIR_WORD GREATER_AND -
    (46) redirection -> . LESS_AND -
    (47) redirection -> . NUMBER LESS_AND -
    (48) redirection -> . REDIR_WORD LESS_AND -
    (49) redirection -> . AND_GREATER WORD
    (50) redirection -> . AND_GREATER_GREATER WORD

    BANG            shift and go to state 32
    NEWLINE         shift and go to state 94
    ;               shift and go to state 95
    TIME            shift and go to state 48
    WHILE           shift and go to state 34
    UNTIL           shift and go to state 4
    WORD            shift and go to state 53
    FUNCTION        shift and go to state 49
    COPROC          shift and go to state 44
    ASSIGNMENT_WORD shift and go to state 26
    FOR             shift and go to state 31
    CASE            shift and go to state 51
    SELECT          shift and go to state 39
    IF              shift and go to state 5
    (               shift and go to state 36
    {               shift and go to state 19
    ARITH_CMD       shift and go to state 46
    COND_START      shift and go to state 22
    >               shift and go to state 41
    <               shift and go to state 40
    NUMBER          shift and go to state 9
    REDIR_WORD      shift and go to state 7
    GREATER_GREATER shift and go to state 28
    GREATER_BAR     shift and go to state 11
    LESS_GREATER    shift and go to state 33
    LESS_LESS       shift and go to state 3
    LESS_LESS_MINUS shift and go to state 18
    LESS_LESS_LESS  shift and go to state 14
    LESS_AND        shift and go to state 17
    GREATER_AND     shift and go to state 47
    AND_GREATER     shift and go to state 45
    AND_GREATER_GREATER shift and go to state 37

    command                        shift and go to state 23
    select_command                 shift and go to state 6
    timespec                       shift and go to state 24
    shell_command                  shift and go to state 25
    simple_command_element         shift and go to state 2
    coproc                         shift and go to state 10
    simple_command                 shift and go to state 27
    pipeline_command               shift and go to state 105
    cond_command                   shift and go to state 30
    list_terminator                shift and go to state 106
    for_command                    shift and go to state 43
    arith_for_command              shift and go to state 15
    arith_command                  shift and go to state 16
    case_command                   shift and go to state 35
    group_command                  shift and go to state 20
    redirection                    shift and go to state 50
    subshell                       shift and go to state 21
    pipeline                       shift and go to state 52
    if_command                     shift and go to state 38
    function_def                   shift and go to state 1

state 33

    (19) redirection -> LESS_GREATER . WORD

    WORD            shift and go to state 107


state 34

    (65) shell_command -> WHILE . compound_list DO compound_list DONE
    (130) compound_list -> . list
    (131) compound_list -> . newline_list list1
    (129) list -> . newline_list list0
    (144) newline_list -> .
    (145) newline_list -> . newline_list NEWLINE

    NEWLINE         reduce using rule 144 (newline_list -> .)
    BANG            reduce using rule 144 (newline_list -> .)
    TIME            reduce using rule 144 (newline_list -> .)
    WHILE           reduce using rule 144 (newline_list -> .)
    UNTIL           reduce using rule 144 (newline_list -> .)
    WORD            reduce using rule 144 (newline_list -> .)
    FUNCTION        reduce using rule 144 (newline_list -> .)
    COPROC          reduce using rule 144 (newline_list -> .)
    ASSIGNMENT_WORD reduce using rule 144 (newline_list -> .)
    FOR             reduce using rule 144 (newline_list -> .)
    CASE            reduce using rule 144 (newline_list -> .)
    SELECT          reduce using rule 144 (newline_list -> .)
    IF              reduce using rule 144 (newline_list -> .)
    (               reduce using rule 144 (newline_list -> .)
    {               reduce using rule 144 (newline_list -> .)
    ARITH_CMD       reduce using rule 144 (newline_list -> .)
    COND_START      reduce using rule 144 (newline_list -> .)
    >               reduce using rule 144 (newline_list -> .)
    <               reduce using rule 144 (newline_list -> .)
    NUMBER          reduce using rule 144 (newline_list -> .)
    REDIR_WORD      reduce using rule 144 (newline_list -> .)
    GREATER_GREATER reduce using rule 144 (newline_list -> .)
    GREATER_BAR     reduce using rule 144 (newline_list -> .)
    LESS_GREATER    reduce using rule 144 (newline_list -> .)
    LESS_LESS       reduce using rule 144 (newline_list -> .)
    LESS_LESS_MINUS reduce using rule 144 (newline_list -> .)
    LESS_LESS_LESS  reduce using rule 144 (newline_list -> .)
    LESS_AND        reduce using rule 144 (newline_list -> .)
    GREATER_AND     reduce using rule 144 (newline_list -> .)
    AND_GREATER     reduce using rule 144 (newline_list -> .)
    AND_GREATER_GREATER reduce using rule 144 (newline_list -> .)

    newline_list                   shift and go to state 56
    compound_list                  shift and go to state 108
    list                           shift and go to state 58

state 35

    (64) shell_command -> case_command .

    >               reduce using rule 64 (shell_command -> case_command .)
    <               reduce using rule 64 (shell_command -> case_command .)
    NUMBER          reduce using rule 64 (shell_command -> case_command .)
    REDIR_WORD      reduce using rule 64 (shell_command -> case_command .)
    GREATER_GREATER reduce using rule 64 (shell_command -> case_command .)
    GREATER_BAR     reduce using rule 64 (shell_command -> case_command .)
    LESS_GREATER    reduce using rule 64 (shell_command -> case_command .)
    LESS_LESS       reduce using rule 64 (shell_command -> case_command .)
    LESS_LESS_MINUS reduce using rule 64 (shell_command -> case_command .)
    LESS_LESS_LESS  reduce using rule 64 (shell_command -> case_command .)
    LESS_AND        reduce using rule 64 (shell_command -> case_command .)
    GREATER_AND     reduce using rule 64 (shell_command -> case_command .)
    AND_GREATER     reduce using rule 64 (shell_command -> case_command .)
    AND_GREATER_GREATER reduce using rule 64 (shell_command -> case_command .)
    |               reduce using rule 64 (shell_command -> case_command .)
    BAR_AND         reduce using rule 64 (shell_command -> case_command .)
    AND_AND         reduce using rule 64 (shell_command -> case_command .)
    OR_OR           reduce using rule 64 (shell_command -> case_command .)
    &               reduce using rule 64 (shell_command -> case_command .)
    ;               reduce using rule 64 (shell_command -> case_command .)
    NEWLINE         reduce using rule 64 (shell_command -> case_command .)
    DO              reduce using rule 64 (shell_command -> case_command .)
    THEN            reduce using rule 64 (shell_command -> case_command .)
    }               reduce using rule 64 (shell_command -> case_command .)
    )               reduce using rule 64 (shell_command -> case_command .)
    DONE            reduce using rule 64 (shell_command -> case_command .)
    FI              reduce using rule 64 (shell_command -> case_command .)
    ELSE            reduce using rule 64 (shell_command -> case_command .)
    ELIF            reduce using rule 64 (shell_command -> case_command .)
    SEMI_SEMI       reduce using rule 64 (shell_command -> case_command .)
    SEMI_AND        reduce using rule 64 (shell_command -> case_command .)
    SEMI_SEMI_AND   reduce using rule 64 (shell_command -> case_command .)
    ESAC            reduce using rule 64 (shell_command -> case_command .)


state 36

    (100) subshell -> ( . compound_list )
    (130) compound_list -> . list
    (131) compound_list -> . newline_list list1
    (129) list -> . newline_list list0
    (144) newline_list -> .
    (145) newline_list -> . newline_list NEWLINE

    NEWLINE         reduce using rule 144 (newline_list -> .)
    BANG            reduce using rule 144 (newline_list -> .)
    TIME            reduce using rule 144 (newline_list -> .)
    WHILE           reduce using rule 144 (newline_list -> .)
    UNTIL           reduce using rule 144 (newline_list -> .)
    WORD            reduce using rule 144 (newline_list -> .)
    FUNCTION        reduce using rule 144 (newline_list -> .)
    COPROC          reduce using rule 144 (newline_list -> .)
    ASSIGNMENT_WORD reduce using rule 144 (newline_list -> .)
    FOR             reduce using rule 144 (newline_list -> .)
    CASE            reduce using rule 144 (newline_list -> .)
    SELECT          reduce using rule 144 (newline_list -> .)
    IF              reduce using rule 144 (newline_list -> .)
    (               reduce using rule 144 (newline_list -> .)
    {               reduce using rule 144 (newline_list -> .)
    ARITH_CMD       reduce using rule 144 (newline_list -> .)
    COND_START      reduce using rule 144 (newline_list -> .)
    >               reduce using rule 144 (newline_list -> .)
    <               reduce using rule 144 (newline_list -> .)
    NUMBER          reduce using rule 144 (newline_list -> .)
    REDIR_WORD      reduce using rule 144 (newline_list -> .)
    GREATER_GREATER reduce using rule 144 (newline_list -> .)
    GREATER_BAR     reduce using rule 144 (newline_list -> .)
    LESS_GREATER    reduce using rule 144 (newline_list -> .)
    LESS_LESS       reduce using rule 144 (newline_list -> .)
    LESS_LESS_MINUS reduce using rule 144 (newline_list -> .)
    LESS_LESS_LESS  reduce using rule 144 (newline_list -> .)
    LESS_AND        reduce using rule 144 (newline_list -> .)
    GREATER_AND     reduce using rule 144 (newline_list -> .)
    AND_GREATER     reduce using rule 144 (newline_list -> .)
    AND_GREATER_GREATER reduce using rule 144 (newline_list -> .)

    newline_list                   shift and go to state 56
    compound_list                  shift and go to state 109
    list                           shift and go to state 58

state 37

    (50) redirection -> AND_GREATER_GREATER . WORD

    WORD            shift and go to state 110


state 38

    (68) shell_command -> if_command .

    >               reduce using rule 68 (shell_command -> if_command .)
    <               reduce using rule 68 (shell_command -> if_command .)
    NUMBER          reduce using rule 68 (shell_command -> if_command .)
    REDIR_WORD      reduce using rule 68 (shell_command -> if_command .)
    GREATER_GREATER reduce using rule 68 (shell_command -> if_command .)
    GREATER_BAR     reduce using rule 68 (shell_command -> if_command .)
    LESS_GREATER    reduce using rule 68 (shell_command -> if_command .)
    LESS_LESS       reduce using rule 68 (shell_command -> if_command .)
    LESS_LESS_MINUS reduce using rule 68 (shell_command -> if_command .)
    LESS_LESS_LESS  reduce using rule 68 (shell_command -> if_command .)
    LESS_AND        reduce using rule 68 (shell_command -> if_command .)
    GREATER_AND     reduce using rule 68 (shell_command -> if_command .)
    AND_GREATER     reduce using rule 68 (shell_command -> if_command .)
    AND_GREATER_GREATER reduce using rule 68 (shell_command -> if_command .)
    |               reduce using rule 68 (shell_command -> if_command .)
    BAR_AND         reduce using rule 68 (shell_command -> if_command .)
    AND_AND         reduce using rule 68 (shell_command -> if_command .)
    OR_OR           reduce using rule 68 (shell_command -> if_command .)
    &               reduce using rule 68 (shell_command -> if_command .)
    ;               reduce using rule 68 (shell_command -> if_command .)
    NEWLINE         reduce using rule 68 (shell_command -> if_command .)
    DO              reduce using rule 68 (shell_command -> if_command .)
    THEN            reduce using rule 68 (shell_command -> if_command .)
    }               reduce using rule 68 (shell_command -> if_command .)
    )               reduce using rule 68 (shell_command -> if_command .)
    DONE            reduce using rule 68 (shell_command -> if_command .)
    FI              reduce using rule 68 (shell_command -> if_command .)
    ELSE            reduce using rule 68 (shell_command -> if_command .)
    ELIF            reduce using rule 68 (shell_command -> if_command .)
    SEMI_SEMI       reduce using rule 68 (shell_command -> if_command .)
    SEMI_AND        reduce using rule 68 (shell_command -> if_command .)
    SEMI_SEMI_AND   reduce using rule 68 (shell_command -> if_command .)
    ESAC            reduce using rule 68 (shell_command -> if_command .)


state 39

    (86) select_command -> SELECT . WORD newline_list DO list DONE
    (87) select_command -> SELECT . WORD newline_list { list }
    (88) select_command -> SELECT . WORD ; newline_list DO list DONE
    (89) select_command -> SELECT . WORD ; newline_list { list }
    (90) select_command -> SELECT . WORD newline_list IN word_list list_terminator newline_list DO list DONE
    (91) select_command -> SELECT . WORD newline_list IN word_list list_terminator newline_list { list }

    WORD            shift and go to state 111


state 40

    (8) redirection -> < . WORD

    WORD            shift and go to state 112


state 41

    (7) redirection -> > . WORD

    WORD            shift and go to state 113


state 42

    (1) inputunit_list -> inputunit .

    NEWLINE         reduce using rule 1 (inputunit_list -> inputunit .)
    BANG            reduce using rule 1 (inputunit_list -> inputunit .)
    TIME            reduce using rule 1 (inputunit_list -> inputunit .)
    WHILE           reduce using rule 1 (inputunit_list -> inputunit .)
    UNTIL           reduce using rule 1 (inputunit_list -> inputunit .)
    WORD            reduce using rule 1 (inputunit_list -> inputunit .)
    FUNCTION        reduce using rule 1 (inputunit_list -> inputunit .)
    COPROC          reduce using rule 1 (inputunit_list -> inputunit .)
    ASSIGNMENT_WORD reduce using rule 1 (inputunit_list -> inputunit .)
    FOR             reduce using rule 1 (inputunit_list -> inputunit .)
    CASE            reduce using rule 1 (inputunit_list -> inputunit .)
    SELECT          reduce using rule 1 (inputunit_list -> inputunit .)
    IF              reduce using rule 1 (inputunit_list -> inputunit .)
    (               reduce using rule 1 (inputunit_list -> inputunit .)
    {               reduce using rule 1 (inputunit_list -> inputunit .)
    ARITH_CMD       reduce using rule 1 (inputunit_list -> inputunit .)
    COND_START      reduce using rule 1 (inputunit_list -> inputunit .)
    >               reduce using rule 1 (inputunit_list -> inputunit .)
    <               reduce using rule 1 (inputunit_list -> inputunit .)
    NUMBER          reduce using rule 1 (inputunit_list -> inputunit .)
    REDIR_WORD      reduce using rule 1 (inputunit_list -> inputunit .)
    GREATER_GREATER reduce using rule 1 (inputunit_list -> inputunit .)
    GREATER_BAR     reduce using rule 1 (inputunit_list -> inputunit .)
    LESS_GREATER    reduce using rule 1 (inputunit_list -> inputunit .)
    LESS_LESS       reduce using rule 1 (inputunit_list -> inputunit .)
    LESS_LESS_MINUS reduce using rule 1 (inputunit_list -> inputunit .)
    LESS_LESS_LESS  reduce using rule 1 (inputunit_list -> inputunit .)
    LESS_AND        reduce using rule 1 (inputunit_list -> inputunit .)
    GREATER_AND     reduce using rule 1 (inputunit_list -> inputunit .)
    AND_GREATER     reduce using rule 1 (inputunit_list -> inputunit .)
    AND_GREATER_GREATER reduce using rule 1 (inputunit_list -> inputunit .)
    $end            reduce using rule 1 (inputunit_list -> inputunit .)


state 43

    (63) shell_command -> for_command .

    >               reduce using rule 63 (shell_command -> for_command .)
    <               reduce using rule 63 (shell_command -> for_command .)
    NUMBER          reduce using rule 63 (shell_command -> for_command .)
    REDIR_WORD      reduce using rule 63 (shell_command -> for_command .)
    GREATER_GREATER reduce using rule 63 (shell_command -> for_command .)
    GREATER_BAR     reduce using rule 63 (shell_command -> for_command .)
    LESS_GREATER    reduce using rule 63 (shell_command -> for_command .)
    LESS_LESS       reduce using rule 63 (shell_command -> for_command .)
    LESS_LESS_MINUS reduce using rule 63 (shell_command -> for_command .)
    LESS_LESS_LESS  reduce using rule 63 (shell_command -> for_command .)
    LESS_AND        reduce using rule 63 (shell_command -> for_command .)
    GREATER_AND     reduce using rule 63 (shell_command -> for_command .)
    AND_GREATER     reduce using rule 63 (shell_command -> for_command .)
    AND_GREATER_GREATER reduce using rule 63 (shell_command -> for_command .)
    |               reduce using rule 63 (shell_command -> for_command .)
    BAR_AND         reduce using rule 63 (shell_command -> for_command .)
    AND_AND         reduce using rule 63 (shell_command -> for_command .)
    OR_OR           reduce using rule 63 (shell_command -> for_command .)
    &               reduce using rule 63 (shell_command -> for_command .)
    ;               reduce using rule 63 (shell_command -> for_command .)
    NEWLINE         reduce using rule 63 (shell_command -> for_command .)
    DO              reduce using rule 63 (shell_command -> for_command .)
    THEN            reduce using rule 63 (shell_command -> for_command .)
    }               reduce using rule 63 (shell_command -> for_command .)
    )               reduce using rule 63 (shell_command -> for_command .)
    DONE            reduce using rule 63 (shell_command -> for_command .)
    FI              reduce using rule 63 (shell_command -> for_command .)
    ELSE            reduce using rule 63 (shell_command -> for_command .)
    ELIF            reduce using rule 63 (shell_command -> for_command .)
    SEMI_SEMI       reduce using rule 63 (shell_command -> for_command .)
    SEMI_AND        reduce using rule 63 (shell_command -> for_command .)
    SEMI_SEMI_AND   reduce using rule 63 (shell_command -> for_command .)
    ESAC            reduce using rule 63 (shell_command -> for_command .)


state 44

    (101) coproc -> COPROC . shell_command
    (102) coproc -> COPROC . shell_command redirection_list
    (103) coproc -> COPROC . WORD shell_command
    (104) coproc -> COPROC . WORD shell_command redirection_list
    (105) coproc -> COPROC . simple_command
    (63) shell_command -> . for_command
    (64) shell_command -> . case_command
    (65) shell_command -> . WHILE compound_list DO compound_list DONE
    (66) shell_command -> . UNTIL compound_list DO compound_list DONE
    (67) shell_command -> . select_command
    (68) shell_command -> . if_command
    (69) shell_command -> . subshell
    (70) shell_command -> . group_command
    (71) shell_command -> . arith_command
    (72) shell_command -> . cond_command
    (73) shell_command -> . arith_for_command
    (56) simple_command -> . simple_command_element
    (57) simple_command -> . simple_command simple_command_element
    (74) for_command -> . FOR WORD newline_list DO compound_list DONE
    (75) for_command -> . FOR WORD newline_list { compound_list }
    (76) for_command -> . FOR WORD ; newline_list DO compound_list DONE
    (77) for_command -> . FOR WORD ; newline_list { compound_list }
    (78) for_command -> . FOR WORD newline_list IN word_list list_terminator newline_list DO compound_list DONE
    (79) for_command -> . FOR WORD newline_list IN word_list list_terminator newline_list { compound_list }
    (80) for_command -> . FOR WORD newline_list IN list_terminator newline_list DO compound_list DONE
    (81) for_command -> . FOR WORD newline_list IN list_terminator newline_list { compound_list }
    (92) case_command -> . CASE WORD newline_list IN newline_list ESAC
    (93) case_command -> . CASE WORD newline_list IN case_clause_sequence newline_list ESAC
    (94) case_command -> . CASE WORD newline_list IN case_clause ESAC
    (86) select_command -> . SELECT WORD newline_list DO list DONE
    (87) select_command -> . SELECT WORD newline_list { list }
    (88) select_command -> . SELECT WORD ; newline_list DO list DONE
    (89) select_command -> . SELECT WORD ; newline_list { list }
    (90) select_command -> . SELECT WORD newline_list IN word_list list_terminator newline_list DO list DONE
    (91) select_command -> . SELECT WORD newline_list IN word_list list_terminator newline_list { list }
    (106) if_command -> . IF compound_list THEN compound_list FI
    (107) if_command -> . IF compound_list THEN compound_list ELSE compound_list FI
    (108) if_command -> . IF compound_list THEN compound_list elif_clause FI
    (100) subshell -> . ( compound_list )
    (109) group_command -> . { compound_list }
    (110) arith_command -> . ARITH_CMD
    (111) cond_command -> . COND_START COND_CMD COND_END
    (82) arith_for_command -> . FOR ARITH_FOR_EXPRS list_terminator newline_list DO compound_list DONE
    (83) arith_for_command -> . FOR ARITH_FOR_EXPRS list_terminator newline_list { compound_list }
    (84) arith_for_command -> . FOR ARITH_FOR_EXPRS DO compound_list DONE
    (85) arith_for_command -> . FOR ARITH_FOR_EXPRS { compound_list }
    (51) simple_command_element -> . WORD
    (52) simple_command_element -> . ASSIGNMENT_WORD
    (53) simple_command_element -> . redirection
    (7) redirection -> . > WORD
    (8) redirection -> . < WORD
    (9) redirection -> . NUMBER > WORD
    (10) redirection -> . NUMBER < WORD
    (11) redirection -> . REDIR_WORD > WORD
    (12) redirection -> . REDIR_WORD < WORD
    (13) redirection -> . GREATER_GREATER WORD
    (14) redirection -> . NUMBER GREATER_GREATER WORD
    (15) redirection -> . REDIR_WORD GREATER_GREATER WORD
    (16) redirection -> . GREATER_BAR WORD
    (17) redirection -> . NUMBER GREATER_BAR WORD
    (18) redirection -> . REDIR_WORD GREATER_BAR WORD
    (19) redirection -> . LESS_GREATER WORD
    (20) redirection -> . NUMBER LESS_GREATER WORD
    (21) redirection -> . REDIR_WORD LESS_GREATER WORD
    (22) redirection -> . LESS_LESS WORD
    (23) redirection -> . NUMBER LESS_LESS WORD
    (24) redirection -> . REDIR_WORD LESS_LESS WORD
    (25) redirection -> . LESS_LESS_MINUS WORD
    (26) redirection -> . NUMBER LESS_LESS_MINUS WORD
    (27) redirection -> . REDIR_WORD LESS_LESS_MINUS WORD
    (28) redirection -> . LESS_LESS_LESS WORD
    (29) redirection -> . NUMBER LESS_LESS_LESS WORD
    (30) redirection -> . REDIR_WORD LESS_LESS_LESS WORD
    (31) redirection -> . LESS_AND NUMBER
    (32) redirection -> . NUMBER LESS_AND NUMBER
    (33) redirection -> . REDIR_WORD LESS_AND NUMBER
    (34) redirection -> . GREATER_AND NUMBER
    (35) redirection -> . NUMBER GREATER_AND NUMBER
    (36) redirection -> . REDIR_WORD GREATER_AND NUMBER
    (37) redirection -> . LESS_AND WORD
    (38) redirection -> . NUMBER LESS_AND WORD
    (39) redirection -> . REDIR_WORD LESS_AND WORD
    (40) redirection -> . GREATER_AND WORD
    (41) redirection -> . NUMBER GREATER_AND WORD
    (42) redirection -> . REDIR_WORD GREATER_AND WORD
    (43) redirection -> . GREATER_AND -
    (44) redirection -> . NUMBER GREATER_AND -
    (45) redirection -> . REDIR_WORD GREATER_AND -
    (46) redirection -> . LESS_AND -
    (47) redirection -> . NUMBER LESS_AND -
    (48) redirection -> . REDIR_WORD LESS_AND -
    (49) redirection -> . AND_GREATER WORD
    (50) redirection -> . AND_GREATER_GREATER WORD

    WORD            shift and go to state 116
    WHILE           shift and go to state 34
    UNTIL           shift and go to state 4
    FOR             shift and go to state 31
    CASE            shift and go to state 51
    SELECT          shift and go to state 39
    IF              shift and go to state 5
    (               shift and go to state 36
    {               shift and go to state 19
    ARITH_CMD       shift and go to state 46
    COND_START      shift and go to state 22
    ASSIGNMENT_WORD shift and go to state 26
    >               shift and go to state 41
    <               shift and go to state 40
    NUMBER          shift and go to state 9
    REDIR_WORD      shift and go to state 7
    GREATER_GREATER shift and go to state 28
    GREATER_BAR     shift and go to state 11
    LESS_GREATER    shift and go to state 33
    LESS_LESS       shift and go to state 3
    LESS_LESS_MINUS shift and go to state 18
    LESS_LESS_LESS  shift and go to state 14
    LESS_AND        shift and go to state 17
    GREATER_AND     shift and go to state 47
    AND_GREATER     shift and go to state 45
    AND_GREATER_GREATER shift and go to state 37

    select_command                 shift and go to state 6
    for_command                    shift and go to state 43
    shell_command                  shift and go to state 114
    simple_command_element         shift and go to state 2
    simple_command                 shift and go to state 115
    cond_command                   shift and go to state 30
    arith_for_command              shift and go to state 15
    arith_command                  shift and go to state 16
    case_command                   shift and go to state 35
    subshell                       shift and go to state 21
    group_command                  shift and go to state 20
    redirection                    shift and go to state 50
    if_command                     shift and go to state 38

state 45

    (49) redirection -> AND_GREATER . WORD

    WORD            shift and go to state 117


state 46

    (110) arith_command -> ARITH_CMD .

    >               reduce using rule 110 (arith_command -> ARITH_CMD .)
    <               reduce using rule 110 (arith_command -> ARITH_CMD .)
    NUMBER          reduce using rule 110 (arith_command -> ARITH_CMD .)
    REDIR_WORD      reduce using rule 110 (arith_command -> ARITH_CMD .)
    GREATER_GREATER reduce using rule 110 (arith_command -> ARITH_CMD .)
    GREATER_BAR     reduce using rule 110 (arith_command -> ARITH_CMD .)
    LESS_GREATER    reduce using rule 110 (arith_command -> ARITH_CMD .)
    LESS_LESS       reduce using rule 110 (arith_command -> ARITH_CMD .)
    LESS_LESS_MINUS reduce using rule 110 (arith_command -> ARITH_CMD .)
    LESS_LESS_LESS  reduce using rule 110 (arith_command -> ARITH_CMD .)
    LESS_AND        reduce using rule 110 (arith_command -> ARITH_CMD .)
    GREATER_AND     reduce using rule 110 (arith_command -> ARITH_CMD .)
    AND_GREATER     reduce using rule 110 (arith_command -> ARITH_CMD .)
    AND_GREATER_GREATER reduce using rule 110 (arith_command -> ARITH_CMD .)
    |               reduce using rule 110 (arith_command -> ARITH_CMD .)
    BAR_AND         reduce using rule 110 (arith_command -> ARITH_CMD .)
    &               reduce using rule 110 (arith_command -> ARITH_CMD .)
    ;               reduce using rule 110 (arith_command -> ARITH_CMD .)
    AND_AND         reduce using rule 110 (arith_command -> ARITH_CMD .)
    OR_OR           reduce using rule 110 (arith_command -> ARITH_CMD .)
    NEWLINE         reduce using rule 110 (arith_command -> ARITH_CMD .)
    DO              reduce using rule 110 (arith_command -> ARITH_CMD .)
    THEN            reduce using rule 110 (arith_command -> ARITH_CMD .)
    }               reduce using rule 110 (arith_command -> ARITH_CMD .)
    )               reduce using rule 110 (arith_command -> ARITH_CMD .)
    DONE            reduce using rule 110 (arith_command -> ARITH_CMD .)
    FI              reduce using rule 110 (arith_command -> ARITH_CMD .)
    ELSE            reduce using rule 110 (arith_command -> ARITH_CMD .)
    ELIF            reduce using rule 110 (arith_command -> ARITH_CMD .)
    SEMI_SEMI       reduce using rule 110 (arith_command -> ARITH_CMD .)
    SEMI_AND        reduce using rule 110 (arith_command -> ARITH_CMD .)
    SEMI_SEMI_AND   reduce using rule 110 (arith_command -> ARITH_CMD .)
    ESAC            reduce using rule 110 (arith_command -> ARITH_CMD .)


state 47

    (34) redirection -> GREATER_AND . NUMBER
    (40) redirection -> GREATER_AND . WORD
    (43) redirection -> GREATER_AND . -

    NUMBER          shift and go to state 120
    WORD            shift and go to state 119
    -               shift and go to state 118


state 48

    (162) timespec -> TIME .
    (163) timespec -> TIME . TIMEOPT
    (164) timespec -> TIME . TIMEOPT TIMEIGN

    BANG            reduce using rule 162 (timespec -> TIME .)
    NEWLINE         reduce using rule 162 (timespec -> TIME .)
    ;               reduce using rule 162 (timespec -> TIME .)
    TIME            reduce using rule 162 (timespec -> TIME .)
    WHILE           reduce using rule 162 (timespec -> TIME .)
    UNTIL           reduce using rule 162 (timespec -> TIME .)
    WORD            reduce using rule 162 (timespec -> TIME .)
    FUNCTION        reduce using rule 162 (timespec -> TIME .)
    COPROC          reduce using rule 162 (timespec -> TIME .)
    ASSIGNMENT_WORD reduce using rule 162 (timespec -> TIME .)
    FOR             reduce using rule 162 (timespec -> TIME .)
    CASE            reduce using rule 162 (timespec -> TIME .)
    SELECT          reduce using rule 162 (timespec -> TIME .)
    IF              reduce using rule 162 (timespec -> TIME .)
    (               reduce using rule 162 (timespec -> TIME .)
    {               reduce using rule 162 (timespec -> TIME .)
    ARITH_CMD       reduce using rule 162 (timespec -> TIME .)
    COND_START      reduce using rule 162 (timespec -> TIME .)
    >               reduce using rule 162 (timespec -> TIME .)
    <               reduce using rule 162 (timespec -> TIME .)
    NUMBER          reduce using rule 162 (timespec -> TIME .)
    REDIR_WORD      reduce using rule 162 (timespec -> TIME .)
    GREATER_GREATER reduce using rule 162 (timespec -> TIME .)
    GREATER_BAR     reduce using rule 162 (timespec -> TIME .)
    LESS_GREATER    reduce using rule 162 (timespec -> TIME .)
    LESS_LESS       reduce using rule 162 (timespec -> TIME .)
    LESS_LESS_MINUS reduce using rule 162 (timespec -> TIME .)
    LESS_LESS_LESS  reduce using rule 162 (timespec -> TIME .)
    LESS_AND        reduce using rule 162 (timespec -> TIME .)
    GREATER_AND     reduce using rule 162 (timespec -> TIME .)
    AND_GREATER     reduce using rule 162 (timespec -> TIME .)
    AND_GREATER_GREATER reduce using rule 162 (timespec -> TIME .)
    TIMEOPT         shift and go to state 121


state 49

    (96) function_def -> FUNCTION . WORD ( ) newline_list function_body
    (97) function_def -> FUNCTION . WORD newline_list function_body

    WORD            shift and go to state 122


state 50

    (53) simple_command_element -> redirection .

    WORD            reduce using rule 53 (simple_command_element -> redirection .)
    ASSIGNMENT_WORD reduce using rule 53 (simple_command_element -> redirection .)
    >               reduce using rule 53 (simple_command_element -> redirection .)
    <               reduce using rule 53 (simple_command_element -> redirection .)
    NUMBER          reduce using rule 53 (simple_command_element -> redirection .)
    REDIR_WORD      reduce using rule 53 (simple_command_element -> redirection .)
    GREATER_GREATER reduce using rule 53 (simple_command_element -> redirection .)
    GREATER_BAR     reduce using rule 53 (simple_command_element -> redirection .)
    LESS_GREATER    reduce using rule 53 (simple_command_element -> redirection .)
    LESS_LESS       reduce using rule 53 (simple_command_element -> redirection .)
    LESS_LESS_MINUS reduce using rule 53 (simple_command_element -> redirection .)
    LESS_LESS_LESS  reduce using rule 53 (simple_command_element -> redirection .)
    LESS_AND        reduce using rule 53 (simple_command_element -> redirection .)
    GREATER_AND     reduce using rule 53 (simple_command_element -> redirection .)
    AND_GREATER     reduce using rule 53 (simple_command_element -> redirection .)
    AND_GREATER_GREATER reduce using rule 53 (simple_command_element -> redirection .)
    |               reduce using rule 53 (simple_command_element -> redirection .)
    BAR_AND         reduce using rule 53 (simple_command_element -> redirection .)
    &               reduce using rule 53 (simple_command_element -> redirection .)
    ;               reduce using rule 53 (simple_command_element -> redirection .)
    AND_AND         reduce using rule 53 (simple_command_element -> redirection .)
    OR_OR           reduce using rule 53 (simple_command_element -> redirection .)
    NEWLINE         reduce using rule 53 (simple_command_element -> redirection .)
    DO              reduce using rule 53 (simple_command_element -> redirection .)
    THEN            reduce using rule 53 (simple_command_element -> redirection .)
    }               reduce using rule 53 (simple_command_element -> redirection .)
    )               reduce using rule 53 (simple_command_element -> redirection .)
    DONE            reduce using rule 53 (simple_command_element -> redirection .)
    FI              reduce using rule 53 (simple_command_element -> redirection .)
    ELSE            reduce using rule 53 (simple_command_element -> redirection .)
    ELIF            reduce using rule 53 (simple_command_element -> redirection .)
    SEMI_SEMI       reduce using rule 53 (simple_command_element -> redirection .)
    SEMI_AND        reduce using rule 53 (simple_command_element -> redirection .)
    SEMI_SEMI_AND   reduce using rule 53 (simple_command_element -> redirection .)
    ESAC            reduce using rule 53 (simple_command_element -> redirection .)


state 51

    (92) case_command -> CASE . WORD newline_list IN newline_list ESAC
    (93) case_command -> CASE . WORD newline_list IN case_clause_sequence newline_list ESAC
    (94) case_command -> CASE . WORD newline_list IN case_clause ESAC

    WORD            shift and go to state 123


state 52

    (154) pipeline_command -> pipeline .
    (159) pipeline -> pipeline . | newline_list pipeline
    (160) pipeline -> pipeline . BAR_AND newline_list pipeline

    AND_AND         reduce using rule 154 (pipeline_command -> pipeline .)
    OR_OR           reduce using rule 154 (pipeline_command -> pipeline .)
    &               reduce using rule 154 (pipeline_command -> pipeline .)
    ;               reduce using rule 154 (pipeline_command -> pipeline .)
    NEWLINE         reduce using rule 154 (pipeline_command -> pipeline .)
    DO              reduce using rule 154 (pipeline_command -> pipeline .)
    THEN            reduce using rule 154 (pipeline_command -> pipeline .)
    }               reduce using rule 154 (pipeline_command -> pipeline .)
    )               reduce using rule 154 (pipeline_command -> pipeline .)
    DONE            reduce using rule 154 (pipeline_command -> pipeline .)
    FI              reduce using rule 154 (pipeline_command -> pipeline .)
    ELSE            reduce using rule 154 (pipeline_command -> pipeline .)
    ELIF            reduce using rule 154 (pipeline_command -> pipeline .)
    SEMI_SEMI       reduce using rule 154 (pipeline_command -> pipeline .)
    SEMI_AND        reduce using rule 154 (pipeline_command -> pipeline .)
    SEMI_SEMI_AND   reduce using rule 154 (pipeline_command -> pipeline .)
    ESAC            reduce using rule 154 (pipeline_command -> pipeline .)
    |               shift and go to state 124
    BAR_AND         shift and go to state 125


state 53

    (95) function_def -> WORD . ( ) newline_list function_body
    (51) simple_command_element -> WORD .

    (               shift and go to state 126
    WORD            reduce using rule 51 (simple_command_element -> WORD .)
    ASSIGNMENT_WORD reduce using rule 51 (simple_command_element -> WORD .)
    >               reduce using rule 51 (simple_command_element -> WORD .)
    <               reduce using rule 51 (simple_command_element -> WORD .)
    NUMBER          reduce using rule 51 (simple_command_element -> WORD .)
    REDIR_WORD      reduce using rule 51 (simple_command_element -> WORD .)
    GREATER_GREATER reduce using rule 51 (simple_command_element -> WORD .)
    GREATER_BAR     reduce using rule 51 (simple_command_element -> WORD .)
    LESS_GREATER    reduce using rule 51 (simple_command_element -> WORD .)
    LESS_LESS       reduce using rule 51 (simple_command_element -> WORD .)
    LESS_LESS_MINUS reduce using rule 51 (simple_command_element -> WORD .)
    LESS_LESS_LESS  reduce using rule 51 (simple_command_element -> WORD .)
    LESS_AND        reduce using rule 51 (simple_command_element -> WORD .)
    GREATER_AND     reduce using rule 51 (simple_command_element -> WORD .)
    AND_GREATER     reduce using rule 51 (simple_command_element -> WORD .)
    AND_GREATER_GREATER reduce using rule 51 (simple_command_element -> WORD .)
    |               reduce using rule 51 (simple_command_element -> WORD .)
    BAR_AND         reduce using rule 51 (simple_command_element -> WORD .)
    &               reduce using rule 51 (simple_command_element -> WORD .)
    ;               reduce using rule 51 (simple_command_element -> WORD .)
    AND_AND         reduce using rule 51 (simple_command_element -> WORD .)
    OR_OR           reduce using rule 51 (simple_command_element -> WORD .)
    NEWLINE         reduce using rule 51 (simple_command_element -> WORD .)
    DO              reduce using rule 51 (simple_command_element -> WORD .)
    THEN            reduce using rule 51 (simple_command_element -> WORD .)
    }               reduce using rule 51 (simple_command_element -> WORD .)
    )               reduce using rule 51 (simple_command_element -> WORD .)
    DONE            reduce using rule 51 (simple_command_element -> WORD .)
    FI              reduce using rule 51 (simple_command_element -> WORD .)
    ELSE            reduce using rule 51 (simple_command_element -> WORD .)
    ELIF            reduce using rule 51 (simple_command_element -> WORD .)
    SEMI_SEMI       reduce using rule 51 (simple_command_element -> WORD .)
    SEMI_AND        reduce using rule 51 (simple_command_element -> WORD .)
    SEMI_SEMI_AND   reduce using rule 51 (simple_command_element -> WORD .)
    ESAC            reduce using rule 51 (simple_command_element -> WORD .)


state 54

    (0) S' -> inputunit_list .
    (2) inputunit_list -> inputunit_list . inputunit
    (3) inputunit -> . simple_list simple_list_terminator
    (4) inputunit -> . NEWLINE
    (146) simple_list -> . simple_list1
    (147) simple_list -> . simple_list1 &
    (148) simple_list -> . simple_list1 ;
    (149) simple_list1 -> . simple_list1 AND_AND newline_list simple_list1
    (150) simple_list1 -> . simple_list1 OR_OR newline_list simple_list1
    (151) simple_list1 -> . simple_list1 & simple_list1
    (152) simple_list1 -> . simple_list1 ; simple_list1
    (153) simple_list1 -> . pipeline_command
    (154) pipeline_command -> . pipeline
    (155) pipeline_command -> . BANG pipeline_command
    (156) pipeline_command -> . timespec pipeline_command
    (157) pipeline_command -> . timespec list_terminator
    (158) pipeline_command -> . BANG list_terminator
    (159) pipeline -> . pipeline | newline_list pipeline
    (160) pipeline -> . pipeline BAR_AND newline_list pipeline
    (161) pipeline -> . command
    (162) timespec -> . TIME
    (163) timespec -> . TIME TIMEOPT
    (164) timespec -> . TIME TIMEOPT TIMEIGN
    (58) command -> . simple_command
    (59) command -> . shell_command
    (60) command -> . shell_command redirection_list
    (61) command -> . function_def
    (62) command -> . coproc
    (56) simple_command -> . simple_command_element
    (57) simple_command -> . simple_command simple_command_element
    (63) shell_command -> . for_command
    (64) shell_command -> . case_command
    (65) shell_command -> . WHILE compound_list DO compound_list DONE
    (66) shell_command -> . UNTIL compound_list DO compound_list DONE
    (67) shell_command -> . select_command
    (68) shell_command -> . if_command
    (69) shell_command -> . subshell
    (70) shell_command -> . group_command
    (71) shell_command -> . arith_command
    (72) shell_command -> . cond_command
    (73) shell_command -> . arith_for_command
    (95) function_def -> . WORD ( ) newline_list function_body
    (96) function_def -> . FUNCTION WORD ( ) newline_list function_body
    (97) function_def -> . FUNCTION WORD newline_list function_body
    (101) coproc -> . COPROC shell_command
    (102) coproc -> . COPROC shell_command redirection_list
    (103) coproc -> . COPROC WORD shell_command
    (104) coproc -> . COPROC WORD shell_command redirection_list
    (105) coproc -> . COPROC simple_command
    (51) simple_command_element -> . WORD
    (52) simple_command_element -> . ASSIGNMENT_WORD
    (53) simple_command_element -> . redirection
    (74) for_command -> . FOR WORD newline_list DO compound_list DONE
    (75) for_command -> . FOR WORD newline_list { compound_list }
    (76) for_command -> . FOR WORD ; newline_list DO compound_list DONE
    (77) for_command -> . FOR WORD ; newline_list { compound_list }
    (78) for_command -> . FOR WORD newline_list IN word_list list_terminator newline_list DO compound_list DONE
    (79) for_command -> . FOR WORD newline_list IN word_list list_terminator newline_list { compound_list }
    (80) for_command -> . FOR WORD newline_list IN list_terminator newline_list DO compound_list DONE
    (81) for_command -> . FOR WORD newline_list IN list_terminator newline_list { compound_list }
    (92) case_command -> . CASE WORD newline_list IN newline_list ESAC
    (93) case_command -> . CASE WORD newline_list IN case_clause_sequence newline_list ESAC
    (94) case_command -> . CASE WORD newline_list IN case_clause ESAC
    (86) select_command -> . SELECT WORD newline_list DO list DONE
    (87) select_command -> . SELECT WORD newline_list { list }
    (88) select_command -> . SELECT WORD ; newline_list DO list DONE
    (89) select_command -> . SELECT WORD ; newline_list { list }
    (90) select_command -> . SELECT WORD newline_list IN word_list list_terminator newline_list DO list DONE
    (91) select_command -> . SELECT WORD newline_list IN word_list list_terminator newline_list { list }
    (106) if_command -> . IF compound_list THEN compound_list FI
    (107) if_command -> . IF compound_list THEN compound_list ELSE compound_list FI
    (108) if_command -> . IF compound_list THEN compound_list elif_clause FI
    (100) subshell -> . ( compound_list )
    (109) group_command -> . { compound_list }
    (110) arith_command -> . ARITH_CMD
    (111) cond_command -> . COND_START COND_CMD COND_END
    (82) arith_for_command -> . FOR ARITH_FOR_EXPRS list_terminator newline_list DO compound_list DONE
    (83) arith_for_command -> . FOR ARITH_FOR_EXPRS list_terminator newline_list { compound_list }
    (84) arith_for_command -> . FOR ARITH_FOR_EXPRS DO compound_list DONE
    (85) arith_for_command -> . FOR ARITH_FOR_EXPRS { compound_list }
    (7) redirection -> . > WORD
    (8) redirection -> . < WORD
    (9) redirection -> . NUMBER > WORD
    (10) redirection -> . NUMBER < WORD
    (11) redirection -> . REDIR_WORD > WORD
    (12) redirection -> . REDIR_WORD < WORD
    (13) redirection -> . GREATER_GREATER WORD
    (14) redirection -> . NUMBER GREATER_GREATER WORD
    (15) redirection -> . REDIR_WORD GREATER_GREATER WORD
    (16) redirection -> . GREATER_BAR WORD
    (17) redirection -> . NUMBER GREATER_BAR WORD
    (18) redirection -> . REDIR_WORD GREATER_BAR WORD
    (19) redirection -> . LESS_GREATER WORD
    (20) redirection -> . NUMBER LESS_GREATER WORD
    (21) redirection -> . REDIR_WORD LESS_GREATER WORD
    (22) redirection -> . LESS_LESS WORD
    (23) redirection -> . NUMBER LESS_LESS WORD
    (24) redirection -> . REDIR_WORD LESS_LESS WORD
    (25) redirection -> . LESS_LESS_MINUS WORD
    (26) redirection -> . NUMBER LESS_LESS_MINUS WORD
    (27) redirection -> . REDIR_WORD LESS_LESS_MINUS WORD
    (28) redirection -> . LESS_LESS_LESS WORD
    (29) redirection -> . NUMBER LESS_LESS_LESS WORD
    (30) redirection -> . REDIR_WORD LESS_LESS_LESS WORD
    (31) redirection -> . LESS_AND NUMBER
    (32) redirection -> . NUMBER LESS_AND NUMBER
    (33) redirection -> . REDIR_WORD LESS_AND NUMBER
    (34) redirection -> . GREATER_AND NUMBER
    (35) redirection -> . NUMBER GREATER_AND NUMBER
    (36) redirection -> . REDIR_WORD GREATER_AND NUMBER
    (37) redirection -> . LESS_AND WORD
    (38) redirection -> . NUMBER LESS_AND WORD
    (39) redirection -> . REDIR_WORD LESS_AND WORD
    (40) redirection -> . GREATER_AND WORD
    (41) redirection -> . NUMBER GREATER_AND WORD
    (42) redirection -> . REDIR_WORD GREATER_AND WORD
    (43) redirection -> . GREATER_AND -
    (44) redirection -> . NUMBER GREATER_AND -
    (45) redirection -> . REDIR_WORD GREATER_AND -
    (46) redirection -> . LESS_AND -
    (47) redirection -> . NUMBER LESS_AND -
    (48) redirection -> . REDIR_WORD LESS_AND -
    (49) redirection -> . AND_GREATER WORD
    (50) redirection -> . AND_GREATER_GREATER WORD

    NEWLINE         shift and go to state 29
    BANG            shift and go to state 32
    TIME            shift and go to state 48
    WHILE           shift and go to state 34
    UNTIL           shift and go to state 4
    WORD            shift and go to state 53
    FUNCTION        shift and go to state 49
    COPROC          shift and go to state 44
    ASSIGNMENT_WORD shift and go to state 26
    FOR             shift and go to state 31
    CASE            shift and go to state 51
    SELECT          shift and go to state 39
    IF              shift and go to state 5
    (               shift and go to state 36
    {               shift and go to state 19
    ARITH_CMD       shift and go to state 46
    COND_START      shift and go to state 22
    >               shift and go to state 41
    <               shift and go to state 40
    NUMBER          shift and go to state 9
    REDIR_WORD      shift and go to state 7
    GREATER_GREATER shift and go to state 28
    GREATER_BAR     shift and go to state 11
    LESS_GREATER    shift and go to state 33
    LESS_LESS       shift and go to state 3
    LESS_LESS_MINUS shift and go to state 18
    LESS_LESS_LESS  shift and go to state 14
    LESS_AND        shift and go to state 17
    GREATER_AND     shift and go to state 47
    AND_GREATER     shift and go to state 45
    AND_GREATER_GREATER shift and go to state 37

    command                        shift and go to state 23
    select_command                 shift and go to state 6
    inputunit                      shift and go to state 127
    for_command                    shift and go to state 43
    shell_command                  shift and go to state 25
    simple_command_element         shift and go to state 2
    coproc                         shift and go to state 10
    simple_command                 shift and go to state 27
    if_command                     shift and go to state 38
    pipeline_command               shift and go to state 12
    cond_command                   shift and go to state 30
    simple_list                    shift and go to state 13
    simple_list1                   shift and go to state 8
    arith_for_command              shift and go to state 15
    arith_command                  shift and go to state 16
    case_command                   shift and go to state 35
    subshell                       shift and go to state 21
    group_command                  shift and go to state 20
    redirection                    shift and go to state 50
    timespec                       shift and go to state 24
    pipeline                       shift and go to state 52
    function_def                   shift and go to state 1

state 55

    (22) redirection -> LESS_LESS WORD .

    >               reduce using rule 22 (redirection -> LESS_LESS WORD .)
    <               reduce using rule 22 (redirection -> LESS_LESS WORD .)
    NUMBER          reduce using rule 22 (redirection -> LESS_LESS WORD .)
    REDIR_WORD      reduce using rule 22 (redirection -> LESS_LESS WORD .)
    GREATER_GREATER reduce using rule 22 (redirection -> LESS_LESS WORD .)
    GREATER_BAR     reduce using rule 22 (redirection -> LESS_LESS WORD .)
    LESS_GREATER    reduce using rule 22 (redirection -> LESS_LESS WORD .)
    LESS_LESS       reduce using rule 22 (redirection -> LESS_LESS WORD .)
    LESS_LESS_MINUS reduce using rule 22 (redirection -> LESS_LESS WORD .)
    LESS_LESS_LESS  reduce using rule 22 (redirection -> LESS_LESS WORD .)
    LESS_AND        reduce using rule 22 (redirection -> LESS_LESS WORD .)
    GREATER_AND     reduce using rule 22 (redirection -> LESS_LESS WORD .)
    AND_GREATER     reduce using rule 22 (redirection -> LESS_LESS WORD .)
    AND_GREATER_GREATER reduce using rule 22 (redirection -> LESS_LESS WORD .)
    |               reduce using rule 22 (redirection -> LESS_LESS WORD .)
    BAR_AND         reduce using rule 22 (redirection -> LESS_LESS WORD .)
    &               reduce using rule 22 (redirection -> LESS_LESS WORD .)
    ;               reduce using rule 22 (redirection -> LESS_LESS WORD .)
    AND_AND         reduce using rule 22 (redirection -> LESS_LESS WORD .)
    OR_OR           reduce using rule 22 (redirection -> LESS_LESS WORD .)
    NEWLINE         reduce using rule 22 (redirection -> LESS_LESS WORD .)
    DO              reduce using rule 22 (redirection -> LESS_LESS WORD .)
    THEN            reduce using rule 22 (redirection -> LESS_LESS WORD .)
    }               reduce using rule 22 (redirection -> LESS_LESS WORD .)
    )               reduce using rule 22 (redirection -> LESS_LESS WORD .)
    DONE            reduce using rule 22 (redirection -> LESS_LESS WORD .)
    FI              reduce using rule 22 (redirection -> LESS_LESS WORD .)
    ELSE            reduce using rule 22 (redirection -> LESS_LESS WORD .)
    ELIF            reduce using rule 22 (redirection -> LESS_LESS WORD .)
    SEMI_SEMI       reduce using rule 22 (redirection -> LESS_LESS WORD .)
    SEMI_AND        reduce using rule 22 (redirection -> LESS_LESS WORD .)
    SEMI_SEMI_AND   reduce using rule 22 (redirection -> LESS_LESS WORD .)
    ESAC            reduce using rule 22 (redirection -> LESS_LESS WORD .)
    WORD            reduce using rule 22 (redirection -> LESS_LESS WORD .)
    ASSIGNMENT_WORD reduce using rule 22 (redirection -> LESS_LESS WORD .)


state 56

    (131) compound_list -> newline_list . list1
    (129) list -> newline_list . list0
    (145) newline_list -> newline_list . NEWLINE
    (135) list1 -> . list1 AND_AND newline_list list1
    (136) list1 -> . list1 OR_OR newline_list list1
    (137) list1 -> . list1 & newline_list list1
    (138) list1 -> . list1 ; newline_list list1
    (139) list1 -> . list1 NEWLINE newline_list list1
    (140) list1 -> . pipeline_command
    (132) list0 -> . list1 NEWLINE newline_list
    (133) list0 -> . list1 & newline_list
    (134) list0 -> . list1 ; newline_list
    (154) pipeline_command -> . pipeline
    (155) pipeline_command -> . BANG pipeline_command
    (156) pipeline_command -> . timespec pipeline_command
    (157) pipeline_command -> . timespec list_terminator
    (158) pipeline_command -> . BANG list_terminator
    (159) pipeline -> . pipeline | newline_list pipeline
    (160) pipeline -> . pipeline BAR_AND newline_list pipeline
    (161) pipeline -> . command
    (162) timespec -> . TIME
    (163) timespec -> . TIME TIMEOPT
    (164) timespec -> . TIME TIMEOPT TIMEIGN
    (58) command -> . simple_command
    (59) command -> . shell_command
    (60) command -> . shell_command redirection_list
    (61) command -> . function_def
    (62) command -> . coproc
    (56) simple_command -> . simple_command_element
    (57) simple_command -> . simple_command simple_command_element
    (63) shell_command -> . for_command
    (64) shell_command -> . case_command
    (65) shell_command -> . WHILE compound_list DO compound_list DONE
    (66) shell_command -> . UNTIL compound_list DO compound_list DONE
    (67) shell_command -> . select_command
    (68) shell_command -> . if_command
    (69) shell_command -> . subshell
    (70) shell_command -> . group_command
    (71) shell_command -> . arith_command
    (72) shell_command -> . cond_command
    (73) shell_command -> . arith_for_command
    (95) function_def -> . WORD ( ) newline_list function_body
    (96) function_def -> . FUNCTION WORD ( ) newline_list function_body
    (97) function_def -> . FUNCTION WORD newline_list function_body
    (101) coproc -> . COPROC shell_command
    (102) coproc -> . COPROC shell_command redirection_list
    (103) coproc -> . COPROC WORD shell_command
    (104) coproc -> . COPROC WORD shell_command redirection_list
    (105) coproc -> . COPROC simple_command
    (51) simple_command_element -> . WORD
    (52) simple_command_element -> . ASSIGNMENT_WORD
    (53) simple_command_element -> . redirection
    (74) for_command -> . FOR WORD newline_list DO compound_list DONE
    (75) for_command -> . FOR WORD newline_list { compound_list }
    (76) for_command -> . FOR WORD ; newline_list DO compound_list DONE
    (77) for_command -> . FOR WORD ; newline_list { compound_list }
    (78) for_command -> . FOR WORD newline_list IN word_list list_terminator newline_list DO compound_list DONE
    (79) for_command -> . FOR WORD newline_list IN word_list list_terminator newline_list { compound_list }
    (80) for_command -> . FOR WORD newline_list IN list_terminator newline_list DO compound_list DONE
    (81) for_command -> . FOR WORD newline_list IN list_terminator newline_list { compound_list }
    (92) case_command -> . CASE WORD newline_list IN newline_list ESAC
    (93) case_command -> . CASE WORD newline_list IN case_clause_sequence newline_list ESAC
    (94) case_command -> . CASE WORD newline_list IN case_clause ESAC
    (86) select_command -> . SELECT WORD newline_list DO list DONE
    (87) select_command -> . SELECT WORD newline_list { list }
    (88) select_command -> . SELECT WORD ; newline_list DO list DONE
    (89) select_command -> . SELECT WORD ; newline_list { list }
    (90) select_command -> . SELECT WORD newline_list IN word_list list_terminator newline_list DO list DONE
    (91) select_command -> . SELECT WORD newline_list IN word_list list_terminator newline_list { list }
    (106) if_command -> . IF compound_list THEN compound_list FI
    (107) if_command -> . IF compound_list THEN compound_list ELSE compound_list FI
    (108) if_command -> . IF compound_list THEN compound_list elif_clause FI
    (100) subshell -> . ( compound_list )
    (109) group_command -> . { compound_list }
    (110) arith_command -> . ARITH_CMD
    (111) cond_command -> . COND_START COND_CMD COND_END
    (82) arith_for_command -> . FOR ARITH_FOR_EXPRS list_terminator newline_list DO compound_list DONE
    (83) arith_for_command -> . FOR ARITH_FOR_EXPRS list_terminator newline_list { compound_list }
    (84) arith_for_command -> . FOR ARITH_FOR_EXPRS DO compound_list DONE
    (85) arith_for_command -> . FOR ARITH_FOR_EXPRS { compound_list }
    (7) redirection -> . > WORD
    (8) redirection -> . < WORD
    (9) redirection -> . NUMBER > WORD
    (10) redirection -> . NUMBER < WORD
    (11) redirection -> . REDIR_WORD > WORD
    (12) redirection -> . REDIR_WORD < WORD
    (13) redirection -> . GREATER_GREATER WORD
    (14) redirection -> . NUMBER GREATER_GREATER WORD
    (15) redirection -> . REDIR_WORD GREATER_GREATER WORD
    (16) redirection -> . GREATER_BAR WORD
    (17) redirection -> . NUMBER GREATER_BAR WORD
    (18) redirection -> . REDIR_WORD GREATER_BAR WORD
    (19) redirection -> . LESS_GREATER WORD
    (20) redirection -> . NUMBER LESS_GREATER WORD
    (21) redirection -> . REDIR_WORD LESS_GREATER WORD
    (22) redirection -> . LESS_LESS WORD
    (23) redirection -> . NUMBER LESS_LESS WORD
    (24) redirection -> . REDIR_WORD LESS_LESS WORD
    (25) redirection -> . LESS_LESS_MINUS WORD
    (26) redirection -> . NUMBER LESS_LESS_MINUS WORD
    (27) redirection -> . REDIR_WORD LESS_LESS_MINUS WORD
    (28) redirection -> . LESS_LESS_LESS WORD
    (29) redirection -> . NUMBER LESS_LESS_LESS WORD
    (30) redirection -> . REDIR_WORD LESS_LESS_LESS WORD
    (31) redirection -> . LESS_AND NUMBER
    (32) redirection -> . NUMBER LESS_AND NUMBER
    (33) redirection -> . REDIR_WORD LESS_AND NUMBER
    (34) redirection -> . GREATER_AND NUMBER
    (35) redirection -> . NUMBER GREATER_AND NUMBER
    (36) redirection -> . REDIR_WORD GREATER_AND NUMBER
    (37) redirection -> . LESS_AND WORD
    (38) redirection -> . NUMBER LESS_AND WORD
    (39) redirection -> . REDIR_WORD LESS_AND WORD
    (40) redirection -> . GREATER_AND WORD
    (41) redirection -> . NUMBER GREATER_AND WORD
    (42) redirection -> . REDIR_WORD GREATER_AND WORD
    (43) redirection -> . GREATER_AND -
    (44) redirection -> . NUMBER GREATER_AND -
    (45) redirection -> . REDIR_WORD GREATER_AND -
    (46) redirection -> . LESS_AND -
    (47) redirection -> . NUMBER LESS_AND -
    (48) redirection -> . REDIR_WORD LESS_AND -
    (49) redirection -> . AND_GREATER WORD
    (50) redirection -> . AND_GREATER_GREATER WORD

    NEWLINE         shift and go to state 128
    BANG            shift and go to state 32
    TIME            shift and go to state 48
    WHILE           shift and go to state 34
    UNTIL           shift and go to state 4
    WORD            shift and go to state 53
    FUNCTION        shift and go to state 49
    COPROC          shift and go to state 44
    ASSIGNMENT_WORD shift and go to state 26
    FOR             shift and go to state 31
    CASE            shift and go to state 51
    SELECT          shift and go to state 39
    IF              shift and go to state 5
    (               shift and go to state 36
    {               shift and go to state 19
    ARITH_CMD       shift and go to state 46
    COND_START      shift and go to state 22
    >               shift and go to state 41
    <               shift and go to state 40
    NUMBER          shift and go to state 9
    REDIR_WORD      shift and go to state 7
    GREATER_GREATER shift and go to state 28
    GREATER_BAR     shift and go to state 11
    LESS_GREATER    shift and go to state 33
    LESS_LESS       shift and go to state 3
    LESS_LESS_MINUS shift and go to state 18
    LESS_LESS_LESS  shift and go to state 14
    LESS_AND        shift and go to state 17
    GREATER_AND     shift and go to state 47
    AND_GREATER     shift and go to state 45
    AND_GREATER_GREATER shift and go to state 37

    command                        shift and go to state 23
    select_command                 shift and go to state 6
    for_command                    shift and go to state 43
    shell_command                  shift and go to state 25
    simple_command_element         shift and go to state 2
    coproc                         shift and go to state 10
    simple_command                 shift and go to state 27
    pipeline_command               shift and go to state 131
    cond_command                   shift and go to state 30
    timespec                       shift and go to state 24
    arith_for_command              shift and go to state 15
    arith_command                  shift and go to state 16
    list1                          shift and go to state 129
    list0                          shift and go to state 130
    group_command                  shift and go to state 20
    redirection                    shift and go to state 50
    subshell                       shift and go to state 21
    pipeline                       shift and go to state 52
    case_command                   shift and go to state 35
    if_command                     shift and go to state 38
    function_def                   shift and go to state 1

state 57

    (66) shell_command -> UNTIL compound_list . DO compound_list DONE

    DO              shift and go to state 132


state 58

    (130) compound_list -> list .

    DO              reduce using rule 130 (compound_list -> list .)
    }               reduce using rule 130 (compound_list -> list .)
    THEN            reduce using rule 130 (compound_list -> list .)
    FI              reduce using rule 130 (compound_list -> list .)
    ELSE            reduce using rule 130 (compound_list -> list .)
    ELIF            reduce using rule 130 (compound_list -> list .)
    SEMI_SEMI       reduce using rule 130 (compound_list -> list .)
    SEMI_AND        reduce using rule 130 (compound_list -> list .)
    SEMI_SEMI_AND   reduce using rule 130 (compound_list -> list .)
    ESAC            reduce using rule 130 (compound_list -> list .)
    DONE            reduce using rule 130 (compound_list -> list .)
    )               reduce using rule 130 (compound_list -> list .)


state 59

    (106) if_command -> IF compound_list . THEN compound_list FI
    (107) if_command -> IF compound_list . THEN compound_list ELSE compound_list FI
    (108) if_command -> IF compound_list . THEN compound_list elif_clause FI

    THEN            shift and go to state 133


state 60

    (18) redirection -> REDIR_WORD GREATER_BAR . WORD

    WORD            shift and go to state 134


state 61

    (15) redirection -> REDIR_WORD GREATER_GREATER . WORD

    WORD            shift and go to state 135


state 62

    (27) redirection -> REDIR_WORD LESS_LESS_MINUS . WORD

    WORD            shift and go to state 136


state 63

    (21) redirection -> REDIR_WORD LESS_GREATER . WORD

    WORD            shift and go to state 137


state 64

    (24) redirection -> REDIR_WORD LESS_LESS . WORD

    WORD            shift and go to state 138


state 65

    (11) redirection -> REDIR_WORD > . WORD

    WORD            shift and go to state 139


state 66

    (30) redirection -> REDIR_WORD LESS_LESS_LESS . WORD

    WORD            shift and go to state 140


state 67

    (12) redirection -> REDIR_WORD < . WORD

    WORD            shift and go to state 141


state 68

    (33) redirection -> REDIR_WORD LESS_AND . NUMBER
    (39) redirection -> REDIR_WORD LESS_AND . WORD
    (48) redirection -> REDIR_WORD LESS_AND . -

    NUMBER          shift and go to state 144
    WORD            shift and go to state 143
    -               shift and go to state 142


state 69

    (36) redirection -> REDIR_WORD GREATER_AND . NUMBER
    (42) redirection -> REDIR_WORD GREATER_AND . WORD
    (45) redirection -> REDIR_WORD GREATER_AND . -

    NUMBER          shift and go to state 147
    WORD            shift and go to state 146
    -               shift and go to state 145


state 70

    (149) simple_list1 -> simple_list1 AND_AND . newline_list simple_list1
    (144) newline_list -> .
    (145) newline_list -> . newline_list NEWLINE

    NEWLINE         reduce using rule 144 (newline_list -> .)
    BANG            reduce using rule 144 (newline_list -> .)
    TIME            reduce using rule 144 (newline_list -> .)
    WHILE           reduce using rule 144 (newline_list -> .)
    UNTIL           reduce using rule 144 (newline_list -> .)
    WORD            reduce using rule 144 (newline_list -> .)
    FUNCTION        reduce using rule 144 (newline_list -> .)
    COPROC          reduce using rule 144 (newline_list -> .)
    ASSIGNMENT_WORD reduce using rule 144 (newline_list -> .)
    FOR             reduce using rule 144 (newline_list -> .)
    CASE            reduce using rule 144 (newline_list -> .)
    SELECT          reduce using rule 144 (newline_list -> .)
    IF              reduce using rule 144 (newline_list -> .)
    (               reduce using rule 144 (newline_list -> .)
    {               reduce using rule 144 (newline_list -> .)
    ARITH_CMD       reduce using rule 144 (newline_list -> .)
    COND_START      reduce using rule 144 (newline_list -> .)
    >               reduce using rule 144 (newline_list -> .)
    <               reduce using rule 144 (newline_list -> .)
    NUMBER          reduce using rule 144 (newline_list -> .)
    REDIR_WORD      reduce using rule 144 (newline_list -> .)
    GREATER_GREATER reduce using rule 144 (newline_list -> .)
    GREATER_BAR     reduce using rule 144 (newline_list -> .)
    LESS_GREATER    reduce using rule 144 (newline_list -> .)
    LESS_LESS       reduce using rule 144 (newline_list -> .)
    LESS_LESS_MINUS reduce using rule 144 (newline_list -> .)
    LESS_LESS_LESS  reduce using rule 144 (newline_list -> .)
    LESS_AND        reduce using rule 144 (newline_list -> .)
    GREATER_AND     reduce using rule 144 (newline_list -> .)
    AND_GREATER     reduce using rule 144 (newline_list -> .)
    AND_GREATER_GREATER reduce using rule 144 (newline_list -> .)

    newline_list                   shift and go to state 148

state 71

    (147) simple_list -> simple_list1 & .
    (151) simple_list1 -> simple_list1 & . simple_list1
    (149) simple_list1 -> . simple_list1 AND_AND newline_list simple_list1
    (150) simple_list1 -> . simple_list1 OR_OR newline_list simple_list1
    (151) simple_list1 -> . simple_list1 & simple_list1
    (152) simple_list1 -> . simple_list1 ; simple_list1
    (153) simple_list1 -> . pipeline_command
    (154) pipeline_command -> . pipeline
    (155) pipeline_command -> . BANG pipeline_command
    (156) pipeline_command -> . timespec pipeline_command
    (157) pipeline_command -> . timespec list_terminator
    (158) pipeline_command -> . BANG list_terminator
    (159) pipeline -> . pipeline | newline_list pipeline
    (160) pipeline -> . pipeline BAR_AND newline_list pipeline
    (161) pipeline -> . command
    (162) timespec -> . TIME
    (163) timespec -> . TIME TIMEOPT
    (164) timespec -> . TIME TIMEOPT TIMEIGN
    (58) command -> . simple_command
    (59) command -> . shell_command
    (60) command -> . shell_command redirection_list
    (61) command -> . function_def
    (62) command -> . coproc
    (56) simple_command -> . simple_command_element
    (57) simple_command -> . simple_command simple_command_element
    (63) shell_command -> . for_command
    (64) shell_command -> . case_command
    (65) shell_command -> . WHILE compound_list DO compound_list DONE
    (66) shell_command -> . UNTIL compound_list DO compound_list DONE
    (67) shell_command -> . select_command
    (68) shell_command -> . if_command
    (69) shell_command -> . subshell
    (70) shell_command -> . group_command
    (71) shell_command -> . arith_command
    (72) shell_command -> . cond_command
    (73) shell_command -> . arith_for_command
    (95) function_def -> . WORD ( ) newline_list function_body
    (96) function_def -> . FUNCTION WORD ( ) newline_list function_body
    (97) function_def -> . FUNCTION WORD newline_list function_body
    (101) coproc -> . COPROC shell_command
    (102) coproc -> . COPROC shell_command redirection_list
    (103) coproc -> . COPROC WORD shell_command
    (104) coproc -> . COPROC WORD shell_command redirection_list
    (105) coproc -> . COPROC simple_command
    (51) simple_command_element -> . WORD
    (52) simple_command_element -> . ASSIGNMENT_WORD
    (53) simple_command_element -> . redirection
    (74) for_command -> . FOR WORD newline_list DO compound_list DONE
    (75) for_command -> . FOR WORD newline_list { compound_list }
    (76) for_command -> . FOR WORD ; newline_list DO compound_list DONE
    (77) for_command -> . FOR WORD ; newline_list { compound_list }
    (78) for_command -> . FOR WORD newline_list IN word_list list_terminator newline_list DO compound_list DONE
    (79) for_command -> . FOR WORD newline_list IN word_list list_terminator newline_list { compound_list }
    (80) for_command -> . FOR WORD newline_list IN list_terminator newline_list DO compound_list DONE
    (81) for_command -> . FOR WORD newline_list IN list_terminator newline_list { compound_list }
    (92) case_command -> . CASE WORD newline_list IN newline_list ESAC
    (93) case_command -> . CASE WORD newline_list IN case_clause_sequence newline_list ESAC
    (94) case_command -> . CASE WORD newline_list IN case_clause ESAC
    (86) select_command -> . SELECT WORD newline_list DO list DONE
    (87) select_command -> . SELECT WORD newline_list { list }
    (88) select_command -> . SELECT WORD ; newline_list DO list DONE
    (89) select_command -> . SELECT WORD ; newline_list { list }
    (90) select_command -> . SELECT WORD newline_list IN word_list list_terminator newline_list DO list DONE
    (91) select_command -> . SELECT WORD newline_list IN word_list list_terminator newline_list { list }
    (106) if_command -> . IF compound_list THEN compound_list FI
    (107) if_command -> . IF compound_list THEN compound_list ELSE compound_list FI
    (108) if_command -> . IF compound_list THEN compound_list elif_clause FI
    (100) subshell -> . ( compound_list )
    (109) group_command -> . { compound_list }
    (110) arith_command -> . ARITH_CMD
    (111) cond_command -> . COND_START COND_CMD COND_END
    (82) arith_for_command -> . FOR ARITH_FOR_EXPRS list_terminator newline_list DO compound_list DONE
    (83) arith_for_command -> . FOR ARITH_FOR_EXPRS list_terminator newline_list { compound_list }
    (84) arith_for_command -> . FOR ARITH_FOR_EXPRS DO compound_list DONE
    (85) arith_for_command -> . FOR ARITH_FOR_EXPRS { compound_list }
    (7) redirection -> . > WORD
    (8) redirection -> . < WORD
    (9) redirection -> . NUMBER > WORD
    (10) redirection -> . NUMBER < WORD
    (11) redirection -> . REDIR_WORD > WORD
    (12) redirection -> . REDIR_WORD < WORD
    (13) redirection -> . GREATER_GREATER WORD
    (14) redirection -> . NUMBER GREATER_GREATER WORD
    (15) redirection -> . REDIR_WORD GREATER_GREATER WORD
    (16) redirection -> . GREATER_BAR WORD
    (17) redirection -> . NUMBER GREATER_BAR WORD
    (18) redirection -> . REDIR_WORD GREATER_BAR WORD
    (19) redirection -> . LESS_GREATER WORD
    (20) redirection -> . NUMBER LESS_GREATER WORD
    (21) redirection -> . REDIR_WORD LESS_GREATER WORD
    (22) redirection -> . LESS_LESS WORD
    (23) redirection -> . NUMBER LESS_LESS WORD
    (24) redirection -> . REDIR_WORD LESS_LESS WORD
    (25) redirection -> . LESS_LESS_MINUS WORD
    (26) redirection -> . NUMBER LESS_LESS_MINUS WORD
    (27) redirection -> . REDIR_WORD LESS_LESS_MINUS WORD
    (28) redirection -> . LESS_LESS_LESS WORD
    (29) redirection -> . NUMBER LESS_LESS_LESS WORD
    (30) redirection -> . REDIR_WORD LESS_LESS_LESS WORD
    (31) redirection -> . LESS_AND NUMBER
    (32) redirection -> . NUMBER LESS_AND NUMBER
    (33) redirection -> . REDIR_WORD LESS_AND NUMBER
    (34) redirection -> . GREATER_AND NUMBER
    (35) redirection -> . NUMBER GREATER_AND NUMBER
    (36) redirection -> . REDIR_WORD GREATER_AND NUMBER
    (37) redirection -> . LESS_AND WORD
    (38) redirection -> . NUMBER LESS_AND WORD
    (39) redirection -> . REDIR_WORD LESS_AND WORD
    (40) redirection -> . GREATER_AND WORD
    (41) redirection -> . NUMBER GREATER_AND WORD
    (42) redirection -> . REDIR_WORD GREATER_AND WORD
    (43) redirection -> . GREATER_AND -
    (44) redirection -> . NUMBER GREATER_AND -
    (45) redirection -> . REDIR_WORD GREATER_AND -
    (46) redirection -> . LESS_AND -
    (47) redirection -> . NUMBER LESS_AND -
    (48) redirection -> . REDIR_WORD LESS_AND -
    (49) redirection -> . AND_GREATER WORD
    (50) redirection -> . AND_GREATER_GREATER WORD

    NEWLINE         reduce using rule 147 (simple_list -> simple_list1 & .)
    BANG            shift and go to state 32
    TIME            shift and go to state 48
    WHILE           shift and go to state 34
    UNTIL           shift and go to state 4
    WORD            shift and go to state 53
    FUNCTION        shift and go to state 49
    COPROC          shift and go to state 44
    ASSIGNMENT_WORD shift and go to state 26
    FOR             shift and go to state 31
    CASE            shift and go to state 51
    SELECT          shift and go to state 39
    IF              shift and go to state 5
    (               shift and go to state 36
    {               shift and go to state 19
    ARITH_CMD       shift and go to state 46
    COND_START      shift and go to state 22
    >               shift and go to state 41
    <               shift and go to state 40
    NUMBER          shift and go to state 9
    REDIR_WORD      shift and go to state 7
    GREATER_GREATER shift and go to state 28
    GREATER_BAR     shift and go to state 11
    LESS_GREATER    shift and go to state 33
    LESS_LESS       shift and go to state 3
    LESS_LESS_MINUS shift and go to state 18
    LESS_LESS_LESS  shift and go to state 14
    LESS_AND        shift and go to state 17
    GREATER_AND     shift and go to state 47
    AND_GREATER     shift and go to state 45
    AND_GREATER_GREATER shift and go to state 37

    command                        shift and go to state 23
    select_command                 shift and go to state 6
    for_command                    shift and go to state 43
    shell_command                  shift and go to state 25
    simple_command_element         shift and go to state 2
    coproc                         shift and go to state 10
    simple_command                 shift and go to state 27
    pipeline_command               shift and go to state 12
    cond_command                   shift and go to state 30
    timespec                       shift and go to state 24
    arith_for_command              shift and go to state 15
    arith_command                  shift and go to state 16
    case_command                   shift and go to state 35
    simple_list1                   shift and go to state 149
    group_command                  shift and go to state 20
    redirection                    shift and go to state 50
    subshell                       shift and go to state 21
    pipeline                       shift and go to state 52
    if_command                     shift and go to state 38
    function_def                   shift and go to state 1

state 72

    (150) simple_list1 -> simple_list1 OR_OR . newline_list simple_list1
    (144) newline_list -> .
    (145) newline_list -> . newline_list NEWLINE

    NEWLINE         reduce using rule 144 (newline_list -> .)
    BANG            reduce using rule 144 (newline_list -> .)
    TIME            reduce using rule 144 (newline_list -> .)
    WHILE           reduce using rule 144 (newline_list -> .)
    UNTIL           reduce using rule 144 (newline_list -> .)
    WORD            reduce using rule 144 (newline_list -> .)
    FUNCTION        reduce using rule 144 (newline_list -> .)
    COPROC          reduce using rule 144 (newline_list -> .)
    ASSIGNMENT_WORD reduce using rule 144 (newline_list -> .)
    FOR             reduce using rule 144 (newline_list -> .)
    CASE            reduce using rule 144 (newline_list -> .)
    SELECT          reduce using rule 144 (newline_list -> .)
    IF              reduce using rule 144 (newline_list -> .)
    (               reduce using rule 144 (newline_list -> .)
    {               reduce using rule 144 (newline_list -> .)
    ARITH_CMD       reduce using rule 144 (newline_list -> .)
    COND_START      reduce using rule 144 (newline_list -> .)
    >               reduce using rule 144 (newline_list -> .)
    <               reduce using rule 144 (newline_list -> .)
    NUMBER          reduce using rule 144 (newline_list -> .)
    REDIR_WORD      reduce using rule 144 (newline_list -> .)
    GREATER_GREATER reduce using rule 144 (newline_list -> .)
    GREATER_BAR     reduce using rule 144 (newline_list -> .)
    LESS_GREATER    reduce using rule 144 (newline_list -> .)
    LESS_LESS       reduce using rule 144 (newline_list -> .)
    LESS_LESS_MINUS reduce using rule 144 (newline_list -> .)
    LESS_LESS_LESS  reduce using rule 144 (newline_list -> .)
    LESS_AND        reduce using rule 144 (newline_list -> .)
    GREATER_AND     reduce using rule 144 (newline_list -> .)
    AND_GREATER     reduce using rule 144 (newline_list -> .)
    AND_GREATER_GREATER reduce using rule 144 (newline_list -> .)

    newline_list                   shift and go to state 150

state 73

    (148) simple_list -> simple_list1 ; .
    (152) simple_list1 -> simple_list1 ; . simple_list1
    (149) simple_list1 -> . simple_list1 AND_AND newline_list simple_list1
    (150) simple_list1 -> . simple_list1 OR_OR newline_list simple_list1
    (151) simple_list1 -> . simple_list1 & simple_list1
    (152) simple_list1 -> . simple_list1 ; simple_list1
    (153) simple_list1 -> . pipeline_command
    (154) pipeline_command -> . pipeline
    (155) pipeline_command -> . BANG pipeline_command
    (156) pipeline_command -> . timespec pipeline_command
    (157) pipeline_command -> . timespec list_terminator
    (158) pipeline_command -> . BANG list_terminator
    (159) pipeline -> . pipeline | newline_list pipeline
    (160) pipeline -> . pipeline BAR_AND newline_list pipeline
    (161) pipeline -> . command
    (162) timespec -> . TIME
    (163) timespec -> . TIME TIMEOPT
    (164) timespec -> . TIME TIMEOPT TIMEIGN
    (58) command -> . simple_command
    (59) command -> . shell_command
    (60) command -> . shell_command redirection_list
    (61) command -> . function_def
    (62) command -> . coproc
    (56) simple_command -> . simple_command_element
    (57) simple_command -> . simple_command simple_command_element
    (63) shell_command -> . for_command
    (64) shell_command -> . case_command
    (65) shell_command -> . WHILE compound_list DO compound_list DONE
    (66) shell_command -> . UNTIL compound_list DO compound_list DONE
    (67) shell_command -> . select_command
    (68) shell_command -> . if_command
    (69) shell_command -> . subshell
    (70) shell_command -> . group_command
    (71) shell_command -> . arith_command
    (72) shell_command -> . cond_command
    (73) shell_command -> . arith_for_command
    (95) function_def -> . WORD ( ) newline_list function_body
    (96) function_def -> . FUNCTION WORD ( ) newline_list function_body
    (97) function_def -> . FUNCTION WORD newline_list function_body
    (101) coproc -> . COPROC shell_command
    (102) coproc -> . COPROC shell_command redirection_list
    (103) coproc -> . COPROC WORD shell_command
    (104) coproc -> . COPROC WORD shell_command redirection_list
    (105) coproc -> . COPROC simple_command
    (51) simple_command_element -> . WORD
    (52) simple_command_element -> . ASSIGNMENT_WORD
    (53) simple_command_element -> . redirection
    (74) for_command -> . FOR WORD newline_list DO compound_list DONE
    (75) for_command -> . FOR WORD newline_list { compound_list }
    (76) for_command -> . FOR WORD ; newline_list DO compound_list DONE
    (77) for_command -> . FOR WORD ; newline_list { compound_list }
    (78) for_command -> . FOR WORD newline_list IN word_list list_terminator newline_list DO compound_list DONE
    (79) for_command -> . FOR WORD newline_list IN word_list list_terminator newline_list { compound_list }
    (80) for_command -> . FOR WORD newline_list IN list_terminator newline_list DO compound_list DONE
    (81) for_command -> . FOR WORD newline_list IN list_terminator newline_list { compound_list }
    (92) case_command -> . CASE WORD newline_list IN newline_list ESAC
    (93) case_command -> . CASE WORD newline_list IN case_clause_sequence newline_list ESAC
    (94) case_command -> . CASE WORD newline_list IN case_clause ESAC
    (86) select_command -> . SELECT WORD newline_list DO list DONE
    (87) select_command -> . SELECT WORD newline_list { list }
    (88) select_command -> . SELECT WORD ; newline_list DO list DONE
    (89) select_command -> . SELECT WORD ; newline_list { list }
    (90) select_command -> . SELECT WORD newline_list IN word_list list_terminator newline_list DO list DONE
    (91) select_command -> . SELECT WORD newline_list IN word_list list_terminator newline_list { list }
    (106) if_command -> . IF compound_list THEN compound_list FI
    (107) if_command -> . IF compound_list THEN compound_list ELSE compound_list FI
    (108) if_command -> . IF compound_list THEN compound_list elif_clause FI
    (100) subshell -> . ( compound_list )
    (109) group_command -> . { compound_list }
    (110) arith_command -> . ARITH_CMD
    (111) cond_command -> . COND_START COND_CMD COND_END
    (82) arith_for_command -> . FOR ARITH_FOR_EXPRS list_terminator newline_list DO compound_list DONE
    (83) arith_for_command -> . FOR ARITH_FOR_EXPRS list_terminator newline_list { compound_list }
    (84) arith_for_command -> . FOR ARITH_FOR_EXPRS DO compound_list DONE
    (85) arith_for_command -> . FOR ARITH_FOR_EXPRS { compound_list }
    (7) redirection -> . > WORD
    (8) redirection -> . < WORD
    (9) redirection -> . NUMBER > WORD
    (10) redirection -> . NUMBER < WORD
    (11) redirection -> . REDIR_WORD > WORD
    (12) redirection -> . REDIR_WORD < WORD
    (13) redirection -> . GREATER_GREATER WORD
    (14) redirection -> . NUMBER GREATER_GREATER WORD
    (15) redirection -> . REDIR_WORD GREATER_GREATER WORD
    (16) redirection -> . GREATER_BAR WORD
    (17) redirection -> . NUMBER GREATER_BAR WORD
    (18) redirection -> . REDIR_WORD GREATER_BAR WORD
    (19) redirection -> . LESS_GREATER WORD
    (20) redirection -> . NUMBER LESS_GREATER WORD
    (21) redirection -> . REDIR_WORD LESS_GREATER WORD
    (22) redirection -> . LESS_LESS WORD
    (23) redirection -> . NUMBER LESS_LESS WORD
    (24) redirection -> . REDIR_WORD LESS_LESS WORD
    (25) redirection -> . LESS_LESS_MINUS WORD
    (26) redirection -> . NUMBER LESS_LESS_MINUS WORD
    (27) redirection -> . REDIR_WORD LESS_LESS_MINUS WORD
    (28) redirection -> . LESS_LESS_LESS WORD
    (29) redirection -> . NUMBER LESS_LESS_LESS WORD
    (30) redirection -> . REDIR_WORD LESS_LESS_LESS WORD
    (31) redirection -> . LESS_AND NUMBER
    (32) redirection -> . NUMBER LESS_AND NUMBER
    (33) redirection -> . REDIR_WORD LESS_AND NUMBER
    (34) redirection -> . GREATER_AND NUMBER
    (35) redirection -> . NUMBER GREATER_AND NUMBER
    (36) redirection -> . REDIR_WORD GREATER_AND NUMBER
    (37) redirection -> . LESS_AND WORD
    (38) redirection -> . NUMBER LESS_AND WORD
    (39) redirection -> . REDIR_WORD LESS_AND WORD
    (40) redirection -> . GREATER_AND WORD
    (41) redirection -> . NUMBER GREATER_AND WORD
    (42) redirection -> . REDIR_WORD GREATER_AND WORD
    (43) redirection -> . GREATER_AND -
    (44) redirection -> . NUMBER GREATER_AND -
    (45) redirection -> . REDIR_WORD GREATER_AND -
    (46) redirection -> . LESS_AND -
    (47) redirection -> . NUMBER LESS_AND -
    (48) redirection -> . REDIR_WORD LESS_AND -
    (49) redirection -> . AND_GREATER WORD
    (50) redirection -> . AND_GREATER_GREATER WORD

    NEWLINE         reduce using rule 148 (simple_list -> simple_list1 ; .)
    BANG            shift and go to state 32
    TIME            shift and go to state 48
    WHILE           shift and go to state 34
    UNTIL           shift and go to state 4
    WORD            shift and go to state 53
    FUNCTION        shift and go to state 49
    COPROC          shift and go to state 44
    ASSIGNMENT_WORD shift and go to state 26
    FOR             shift and go to state 31
    CASE            shift and go to state 51
    SELECT          shift and go to state 39
    IF              shift and go to state 5
    (               shift and go to state 36
    {               shift and go to state 19
    ARITH_CMD       shift and go to state 46
    COND_START      shift and go to state 22
    >               shift and go to state 41
    <               shift and go to state 40
    NUMBER          shift and go to state 9
    REDIR_WORD      shift and go to state 7
    GREATER_GREATER shift and go to state 28
    GREATER_BAR     shift and go to state 11
    LESS_GREATER    shift and go to state 33
    LESS_LESS       shift and go to state 3
    LESS_LESS_MINUS shift and go to state 18
    LESS_LESS_LESS  shift and go to state 14
    LESS_AND        shift and go to state 17
    GREATER_AND     shift and go to state 47
    AND_GREATER     shift and go to state 45
    AND_GREATER_GREATER shift and go to state 37

    command                        shift and go to state 23
    select_command                 shift and go to state 6
    for_command                    shift and go to state 43
    shell_command                  shift and go to state 25
    simple_command_element         shift and go to state 2
    coproc                         shift and go to state 10
    simple_command                 shift and go to state 27
    pipeline_command               shift and go to state 12
    cond_command                   shift and go to state 30
    timespec                       shift and go to state 24
    arith_for_command              shift and go to state 15
    arith_command                  shift and go to state 16
    case_command                   shift and go to state 35
    simple_list1                   shift and go to state 151
    group_command                  shift and go to state 20
    redirection                    shift and go to state 50
    subshell                       shift and go to state 21
    pipeline                       shift and go to state 52
    if_command                     shift and go to state 38
    function_def                   shift and go to state 1

state 74

    (17) redirection -> NUMBER GREATER_BAR . WORD

    WORD            shift and go to state 152


state 75

    (14) redirection -> NUMBER GREATER_GREATER . WORD

    WORD            shift and go to state 153


state 76

    (26) redirection -> NUMBER LESS_LESS_MINUS . WORD

    WORD            shift and go to state 154


state 77

    (20) redirection -> NUMBER LESS_GREATER . WORD

    WORD            shift and go to state 155


state 78

    (23) redirection -> NUMBER LESS_LESS . WORD

    WORD            shift and go to state 156


state 79

    (9) redirection -> NUMBER > . WORD

    WORD            shift and go to state 157


state 80

    (29) redirection -> NUMBER LESS_LESS_LESS . WORD

    WORD            shift and go to state 158


state 81

    (10) redirection -> NUMBER < . WORD

    WORD            shift and go to state 159


state 82

    (32) redirection -> NUMBER LESS_AND . NUMBER
    (38) redirection -> NUMBER LESS_AND . WORD
    (47) redirection -> NUMBER LESS_AND . -

    NUMBER          shift and go to state 162
    WORD            shift and go to state 161
    -               shift and go to state 160


state 83

    (35) redirection -> NUMBER GREATER_AND . NUMBER
    (41) redirection -> NUMBER GREATER_AND . WORD
    (44) redirection -> NUMBER GREATER_AND . -

    NUMBER          shift and go to state 165
    WORD            shift and go to state 164
    -               shift and go to state 163


state 84

    (16) redirection -> GREATER_BAR WORD .

    >               reduce using rule 16 (redirection -> GREATER_BAR WORD .)
    <               reduce using rule 16 (redirection -> GREATER_BAR WORD .)
    NUMBER          reduce using rule 16 (redirection -> GREATER_BAR WORD .)
    REDIR_WORD      reduce using rule 16 (redirection -> GREATER_BAR WORD .)
    GREATER_GREATER reduce using rule 16 (redirection -> GREATER_BAR WORD .)
    GREATER_BAR     reduce using rule 16 (redirection -> GREATER_BAR WORD .)
    LESS_GREATER    reduce using rule 16 (redirection -> GREATER_BAR WORD .)
    LESS_LESS       reduce using rule 16 (redirection -> GREATER_BAR WORD .)
    LESS_LESS_MINUS reduce using rule 16 (redirection -> GREATER_BAR WORD .)
    LESS_LESS_LESS  reduce using rule 16 (redirection -> GREATER_BAR WORD .)
    LESS_AND        reduce using rule 16 (redirection -> GREATER_BAR WORD .)
    GREATER_AND     reduce using rule 16 (redirection -> GREATER_BAR WORD .)
    AND_GREATER     reduce using rule 16 (redirection -> GREATER_BAR WORD .)
    AND_GREATER_GREATER reduce using rule 16 (redirection -> GREATER_BAR WORD .)
    |               reduce using rule 16 (redirection -> GREATER_BAR WORD .)
    BAR_AND         reduce using rule 16 (redirection -> GREATER_BAR WORD .)
    &               reduce using rule 16 (redirection -> GREATER_BAR WORD .)
    ;               reduce using rule 16 (redirection -> GREATER_BAR WORD .)
    AND_AND         reduce using rule 16 (redirection -> GREATER_BAR WORD .)
    OR_OR           reduce using rule 16 (redirection -> GREATER_BAR WORD .)
    NEWLINE         reduce using rule 16 (redirection -> GREATER_BAR WORD .)
    DO              reduce using rule 16 (redirection -> GREATER_BAR WORD .)
    THEN            reduce using rule 16 (redirection -> GREATER_BAR WORD .)
    }               reduce using rule 16 (redirection -> GREATER_BAR WORD .)
    )               reduce using rule 16 (redirection -> GREATER_BAR WORD .)
    DONE            reduce using rule 16 (redirection -> GREATER_BAR WORD .)
    FI              reduce using rule 16 (redirection -> GREATER_BAR WORD .)
    ELSE            reduce using rule 16 (redirection -> GREATER_BAR WORD .)
    ELIF            reduce using rule 16 (redirection -> GREATER_BAR WORD .)
    SEMI_SEMI       reduce using rule 16 (redirection -> GREATER_BAR WORD .)
    SEMI_AND        reduce using rule 16 (redirection -> GREATER_BAR WORD .)
    SEMI_SEMI_AND   reduce using rule 16 (redirection -> GREATER_BAR WORD .)
    ESAC            reduce using rule 16 (redirection -> GREATER_BAR WORD .)
    WORD            reduce using rule 16 (redirection -> GREATER_BAR WORD .)
    ASSIGNMENT_WORD reduce using rule 16 (redirection -> GREATER_BAR WORD .)


state 85

    (141) simple_list_terminator -> NEWLINE .

    NEWLINE         reduce using rule 141 (simple_list_terminator -> NEWLINE .)
    BANG            reduce using rule 141 (simple_list_terminator -> NEWLINE .)
    TIME            reduce using rule 141 (simple_list_terminator -> NEWLINE .)
    WHILE           reduce using rule 141 (simple_list_terminator -> NEWLINE .)
    UNTIL           reduce using rule 141 (simple_list_terminator -> NEWLINE .)
    WORD            reduce using rule 141 (simple_list_terminator -> NEWLINE .)
    FUNCTION        reduce using rule 141 (simple_list_terminator -> NEWLINE .)
    COPROC          reduce using rule 141 (simple_list_terminator -> NEWLINE .)
    ASSIGNMENT_WORD reduce using rule 141 (simple_list_terminator -> NEWLINE .)
    FOR             reduce using rule 141 (simple_list_terminator -> NEWLINE .)
    CASE            reduce using rule 141 (simple_list_terminator -> NEWLINE .)
    SELECT          reduce using rule 141 (simple_list_terminator -> NEWLINE .)
    IF              reduce using rule 141 (simple_list_terminator -> NEWLINE .)
    (               reduce using rule 141 (simple_list_terminator -> NEWLINE .)
    {               reduce using rule 141 (simple_list_terminator -> NEWLINE .)
    ARITH_CMD       reduce using rule 141 (simple_list_terminator -> NEWLINE .)
    COND_START      reduce using rule 141 (simple_list_terminator -> NEWLINE .)
    >               reduce using rule 141 (simple_list_terminator -> NEWLINE .)
    <               reduce using rule 141 (simple_list_terminator -> NEWLINE .)
    NUMBER          reduce using rule 141 (simple_list_terminator -> NEWLINE .)
    REDIR_WORD      reduce using rule 141 (simple_list_terminator -> NEWLINE .)
    GREATER_GREATER reduce using rule 141 (simple_list_terminator -> NEWLINE .)
    GREATER_BAR     reduce using rule 141 (simple_list_terminator -> NEWLINE .)
    LESS_GREATER    reduce using rule 141 (simple_list_terminator -> NEWLINE .)
    LESS_LESS       reduce using rule 141 (simple_list_terminator -> NEWLINE .)
    LESS_LESS_MINUS reduce using rule 141 (simple_list_terminator -> NEWLINE .)
    LESS_LESS_LESS  reduce using rule 141 (simple_list_terminator -> NEWLINE .)
    LESS_AND        reduce using rule 141 (simple_list_terminator -> NEWLINE .)
    GREATER_AND     reduce using rule 141 (simple_list_terminator -> NEWLINE .)
    AND_GREATER     reduce using rule 141 (simple_list_terminator -> NEWLINE .)
    AND_GREATER_GREATER reduce using rule 141 (simple_list_terminator -> NEWLINE .)
    $end            reduce using rule 141 (simple_list_terminator -> NEWLINE .)


state 86

    (3) inputunit -> simple_list simple_list_terminator .

    NEWLINE         reduce using rule 3 (inputunit -> simple_list simple_list_terminator .)
    BANG            reduce using rule 3 (inputunit -> simple_list simple_list_terminator .)
    TIME            reduce using rule 3 (inputunit -> simple_list simple_list_terminator .)
    WHILE           reduce using rule 3 (inputunit -> simple_list simple_list_terminator .)
    UNTIL           reduce using rule 3 (inputunit -> simple_list simple_list_terminator .)
    WORD            reduce using rule 3 (inputunit -> simple_list simple_list_terminator .)
    FUNCTION        reduce using rule 3 (inputunit -> simple_list simple_list_terminator .)
    COPROC          reduce using rule 3 (inputunit -> simple_list simple_list_terminator .)
    ASSIGNMENT_WORD reduce using rule 3 (inputunit -> simple_list simple_list_terminator .)
    FOR             reduce using rule 3 (inputunit -> simple_list simple_list_terminator .)
    CASE            reduce using rule 3 (inputunit -> simple_list simple_list_terminator .)
    SELECT          reduce using rule 3 (inputunit -> simple_list simple_list_terminator .)
    IF              reduce using rule 3 (inputunit -> simple_list simple_list_terminator .)
    (               reduce using rule 3 (inputunit -> simple_list simple_list_terminator .)
    {               reduce using rule 3 (inputunit -> simple_list simple_list_terminator .)
    ARITH_CMD       reduce using rule 3 (inputunit -> simple_list simple_list_terminator .)
    COND_START      reduce using rule 3 (inputunit -> simple_list simple_list_terminator .)
    >               reduce using rule 3 (inputunit -> simple_list simple_list_terminator .)
    <               reduce using rule 3 (inputunit -> simple_list simple_list_terminator .)
    NUMBER          reduce using rule 3 (inputunit -> simple_list simple_list_terminator .)
    REDIR_WORD      reduce using rule 3 (inputunit -> simple_list simple_list_terminator .)
    GREATER_GREATER reduce using rule 3 (inputunit -> simple_list simple_list_terminator .)
    GREATER_BAR     reduce using rule 3 (inputunit -> simple_list simple_list_terminator .)
    LESS_GREATER    reduce using rule 3 (inputunit -> simple_list simple_list_terminator .)
    LESS_LESS       reduce using rule 3 (inputunit -> simple_list simple_list_terminator .)
    LESS_LESS_MINUS reduce using rule 3 (inputunit -> simple_list simple_list_terminator .)
    LESS_LESS_LESS  reduce using rule 3 (inputunit -> simple_list simple_list_terminator .)
    LESS_AND        reduce using rule 3 (inputunit -> simple_list simple_list_terminator .)
    GREATER_AND     reduce using rule 3 (inputunit -> simple_list simple_list_terminator .)
    AND_GREATER     reduce using rule 3 (inputunit -> simple_list simple_list_terminator .)
    AND_GREATER_GREATER reduce using rule 3 (inputunit -> simple_list simple_list_terminator .)
    $end            reduce using rule 3 (inputunit -> simple_list simple_list_terminator .)


state 87

    (28) redirection -> LESS_LESS_LESS WORD .

    >               reduce using rule 28 (redirection -> LESS_LESS_LESS WORD .)
    <               reduce using rule 28 (redirection -> LESS_LESS_LESS WORD .)
    NUMBER          reduce using rule 28 (redirection -> LESS_LESS_LESS WORD .)
    REDIR_WORD      reduce using rule 28 (redirection -> LESS_LESS_LESS WORD .)
    GREATER_GREATER reduce using rule 28 (redirection -> LESS_LESS_LESS WORD .)
    GREATER_BAR     reduce using rule 28 (redirection -> LESS_LESS_LESS WORD .)
    LESS_GREATER    reduce using rule 28 (redirection -> LESS_LESS_LESS WORD .)
    LESS_LESS       reduce using rule 28 (redirection -> LESS_LESS_LESS WORD .)
    LESS_LESS_MINUS reduce using rule 28 (redirection -> LESS_LESS_LESS WORD .)
    LESS_LESS_LESS  reduce using rule 28 (redirection -> LESS_LESS_LESS WORD .)
    LESS_AND        reduce using rule 28 (redirection -> LESS_LESS_LESS WORD .)
    GREATER_AND     reduce using rule 28 (redirection -> LESS_LESS_LESS WORD .)
    AND_GREATER     reduce using rule 28 (redirection -> LESS_LESS_LESS WORD .)
    AND_GREATER_GREATER reduce using rule 28 (redirection -> LESS_LESS_LESS WORD .)
    |               reduce using rule 28 (redirection -> LESS_LESS_LESS WORD .)
    BAR_AND         reduce using rule 28 (redirection -> LESS_LESS_LESS WORD .)
    &               reduce using rule 28 (redirection -> LESS_LESS_LESS WORD .)
    ;               reduce using rule 28 (redirection -> LESS_LESS_LESS WORD .)
    AND_AND         reduce using rule 28 (redirection -> LESS_LESS_LESS WORD .)
    OR_OR           reduce using rule 28 (redirection -> LESS_LESS_LESS WORD .)
    NEWLINE         reduce using rule 28 (redirection -> LESS_LESS_LESS WORD .)
    DO              reduce using rule 28 (redirection -> LESS_LESS_LESS WORD .)
    THEN            reduce using rule 28 (redirection -> LESS_LESS_LESS WORD .)
    }               reduce using rule 28 (redirection -> LESS_LESS_LESS WORD .)
    )               reduce using rule 28 (redirection -> LESS_LESS_LESS WORD .)
    DONE            reduce using rule 28 (redirection -> LESS_LESS_LESS WORD .)
    FI              reduce using rule 28 (redirection -> LESS_LESS_LESS WORD .)
    ELSE            reduce using rule 28 (redirection -> LESS_LESS_LESS WORD .)
    ELIF            reduce using rule 28 (redirection -> LESS_LESS_LESS WORD .)
    SEMI_SEMI       reduce using rule 28 (redirection -> LESS_LESS_LESS WORD .)
    SEMI_AND        reduce using rule 28 (redirection -> LESS_LESS_LESS WORD .)
    SEMI_SEMI_AND   reduce using rule 28 (redirection -> LESS_LESS_LESS WORD .)
    ESAC            reduce using rule 28 (redirection -> LESS_LESS_LESS WORD .)
    WORD            reduce using rule 28 (redirection -> LESS_LESS_LESS WORD .)
    ASSIGNMENT_WORD reduce using rule 28 (redirection -> LESS_LESS_LESS WORD .)


state 88

    (46) redirection -> LESS_AND - .

    >               reduce using rule 46 (redirection -> LESS_AND - .)
    <               reduce using rule 46 (redirection -> LESS_AND - .)
    NUMBER          reduce using rule 46 (redirection -> LESS_AND - .)
    REDIR_WORD      reduce using rule 46 (redirection -> LESS_AND - .)
    GREATER_GREATER reduce using rule 46 (redirection -> LESS_AND - .)
    GREATER_BAR     reduce using rule 46 (redirection -> LESS_AND - .)
    LESS_GREATER    reduce using rule 46 (redirection -> LESS_AND - .)
    LESS_LESS       reduce using rule 46 (redirection -> LESS_AND - .)
    LESS_LESS_MINUS reduce using rule 46 (redirection -> LESS_AND - .)
    LESS_LESS_LESS  reduce using rule 46 (redirection -> LESS_AND - .)
    LESS_AND        reduce using rule 46 (redirection -> LESS_AND - .)
    GREATER_AND     reduce using rule 46 (redirection -> LESS_AND - .)
    AND_GREATER     reduce using rule 46 (redirection -> LESS_AND - .)
    AND_GREATER_GREATER reduce using rule 46 (redirection -> LESS_AND - .)
    |               reduce using rule 46 (redirection -> LESS_AND - .)
    BAR_AND         reduce using rule 46 (redirection -> LESS_AND - .)
    &               reduce using rule 46 (redirection -> LESS_AND - .)
    ;               reduce using rule 46 (redirection -> LESS_AND - .)
    AND_AND         reduce using rule 46 (redirection -> LESS_AND - .)
    OR_OR           reduce using rule 46 (redirection -> LESS_AND - .)
    NEWLINE         reduce using rule 46 (redirection -> LESS_AND - .)
    DO              reduce using rule 46 (redirection -> LESS_AND - .)
    THEN            reduce using rule 46 (redirection -> LESS_AND - .)
    }               reduce using rule 46 (redirection -> LESS_AND - .)
    )               reduce using rule 46 (redirection -> LESS_AND - .)
    DONE            reduce using rule 46 (redirection -> LESS_AND - .)
    FI              reduce using rule 46 (redirection -> LESS_AND - .)
    ELSE            reduce using rule 46 (redirection -> LESS_AND - .)
    ELIF            reduce using rule 46 (redirection -> LESS_AND - .)
    SEMI_SEMI       reduce using rule 46 (redirection -> LESS_AND - .)
    SEMI_AND        reduce using rule 46 (redirection -> LESS_AND - .)
    SEMI_SEMI_AND   reduce using rule 46 (redirection -> LESS_AND - .)
    ESAC            reduce using rule 46 (redirection -> LESS_AND - .)
    WORD            reduce using rule 46 (redirection -> LESS_AND - .)
    ASSIGNMENT_WORD reduce using rule 46 (redirection -> LESS_AND - .)


state 89

    (37) redirection -> LESS_AND WORD .

    >               reduce using rule 37 (redirection -> LESS_AND WORD .)
    <               reduce using rule 37 (redirection -> LESS_AND WORD .)
    NUMBER          reduce using rule 37 (redirection -> LESS_AND WORD .)
    REDIR_WORD      reduce using rule 37 (redirection -> LESS_AND WORD .)
    GREATER_GREATER reduce using rule 37 (redirection -> LESS_AND WORD .)
    GREATER_BAR     reduce using rule 37 (redirection -> LESS_AND WORD .)
    LESS_GREATER    reduce using rule 37 (redirection -> LESS_AND WORD .)
    LESS_LESS       reduce using rule 37 (redirection -> LESS_AND WORD .)
    LESS_LESS_MINUS reduce using rule 37 (redirection -> LESS_AND WORD .)
    LESS_LESS_LESS  reduce using rule 37 (redirection -> LESS_AND WORD .)
    LESS_AND        reduce using rule 37 (redirection -> LESS_AND WORD .)
    GREATER_AND     reduce using rule 37 (redirection -> LESS_AND WORD .)
    AND_GREATER     reduce using rule 37 (redirection -> LESS_AND WORD .)
    AND_GREATER_GREATER reduce using rule 37 (redirection -> LESS_AND WORD .)
    |               reduce using rule 37 (redirection -> LESS_AND WORD .)
    BAR_AND         reduce using rule 37 (redirection -> LESS_AND WORD .)
    &               reduce using rule 37 (redirection -> LESS_AND WORD .)
    ;               reduce using rule 37 (redirection -> LESS_AND WORD .)
    AND_AND         reduce using rule 37 (redirection -> LESS_AND WORD .)
    OR_OR           reduce using rule 37 (redirection -> LESS_AND WORD .)
    NEWLINE         reduce using rule 37 (redirection -> LESS_AND WORD .)
    DO              reduce using rule 37 (redirection -> LESS_AND WORD .)
    THEN            reduce using rule 37 (redirection -> LESS_AND WORD .)
    }               reduce using rule 37 (redirection -> LESS_AND WORD .)
    )               reduce using rule 37 (redirection -> LESS_AND WORD .)
    DONE            reduce using rule 37 (redirection -> LESS_AND WORD .)
    FI              reduce using rule 37 (redirection -> LESS_AND WORD .)
    ELSE            reduce using rule 37 (redirection -> LESS_AND WORD .)
    ELIF            reduce using rule 37 (redirection -> LESS_AND WORD .)
    SEMI_SEMI       reduce using rule 37 (redirection -> LESS_AND WORD .)
    SEMI_AND        reduce using rule 37 (redirection -> LESS_AND WORD .)
    SEMI_SEMI_AND   reduce using rule 37 (redirection -> LESS_AND WORD .)
    ESAC            reduce using rule 37 (redirection -> LESS_AND WORD .)
    WORD            reduce using rule 37 (redirection -> LESS_AND WORD .)
    ASSIGNMENT_WORD reduce using rule 37 (redirection -> LESS_AND WORD .)


state 90

    (31) redirection -> LESS_AND NUMBER .

    >               reduce using rule 31 (redirection -> LESS_AND NUMBER .)
    <               reduce using rule 31 (redirection -> LESS_AND NUMBER .)
    NUMBER          reduce using rule 31 (redirection -> LESS_AND NUMBER .)
    REDIR_WORD      reduce using rule 31 (redirection -> LESS_AND NUMBER .)
    GREATER_GREATER reduce using rule 31 (redirection -> LESS_AND NUMBER .)
    GREATER_BAR     reduce using rule 31 (redirection -> LESS_AND NUMBER .)
    LESS_GREATER    reduce using rule 31 (redirection -> LESS_AND NUMBER .)
    LESS_LESS       reduce using rule 31 (redirection -> LESS_AND NUMBER .)
    LESS_LESS_MINUS reduce using rule 31 (redirection -> LESS_AND NUMBER .)
    LESS_LESS_LESS  reduce using rule 31 (redirection -> LESS_AND NUMBER .)
    LESS_AND        reduce using rule 31 (redirection -> LESS_AND NUMBER .)
    GREATER_AND     reduce using rule 31 (redirection -> LESS_AND NUMBER .)
    AND_GREATER     reduce using rule 31 (redirection -> LESS_AND NUMBER .)
    AND_GREATER_GREATER reduce using rule 31 (redirection -> LESS_AND NUMBER .)
    |               reduce using rule 31 (redirection -> LESS_AND NUMBER .)
    BAR_AND         reduce using rule 31 (redirection -> LESS_AND NUMBER .)
    &               reduce using rule 31 (redirection -> LESS_AND NUMBER .)
    ;               reduce using rule 31 (redirection -> LESS_AND NUMBER .)
    AND_AND         reduce using rule 31 (redirection -> LESS_AND NUMBER .)
    OR_OR           reduce using rule 31 (redirection -> LESS_AND NUMBER .)
    NEWLINE         reduce using rule 31 (redirection -> LESS_AND NUMBER .)
    DO              reduce using rule 31 (redirection -> LESS_AND NUMBER .)
    THEN            reduce using rule 31 (redirection -> LESS_AND NUMBER .)
    }               reduce using rule 31 (redirection -> LESS_AND NUMBER .)
    )               reduce using rule 31 (redirection -> LESS_AND NUMBER .)
    DONE            reduce using rule 31 (redirection -> LESS_AND NUMBER .)
    FI              reduce using rule 31 (redirection -> LESS_AND NUMBER .)
    ELSE            reduce using rule 31 (redirection -> LESS_AND NUMBER .)
    ELIF            reduce using rule 31 (redirection -> LESS_AND NUMBER .)
    SEMI_SEMI       reduce using rule 31 (redirection -> LESS_AND NUMBER .)
    SEMI_AND        reduce using rule 31 (redirection -> LESS_AND NUMBER .)
    SEMI_SEMI_AND   reduce using rule 31 (redirection -> LESS_AND NUMBER .)
    ESAC            reduce using rule 31 (redirection -> LESS_AND NUMBER .)
    WORD            reduce using rule 31 (redirection -> LESS_AND NUMBER .)
    ASSIGNMENT_WORD reduce using rule 31 (redirection -> LESS_AND NUMBER .)


state 91

    (25) redirection -> LESS_LESS_MINUS WORD .

    >               reduce using rule 25 (redirection -> LESS_LESS_MINUS WORD .)
    <               reduce using rule 25 (redirection -> LESS_LESS_MINUS WORD .)
    NUMBER          reduce using rule 25 (redirection -> LESS_LESS_MINUS WORD .)
    REDIR_WORD      reduce using rule 25 (redirection -> LESS_LESS_MINUS WORD .)
    GREATER_GREATER reduce using rule 25 (redirection -> LESS_LESS_MINUS WORD .)
    GREATER_BAR     reduce using rule 25 (redirection -> LESS_LESS_MINUS WORD .)
    LESS_GREATER    reduce using rule 25 (redirection -> LESS_LESS_MINUS WORD .)
    LESS_LESS       reduce using rule 25 (redirection -> LESS_LESS_MINUS WORD .)
    LESS_LESS_MINUS reduce using rule 25 (redirection -> LESS_LESS_MINUS WORD .)
    LESS_LESS_LESS  reduce using rule 25 (redirection -> LESS_LESS_MINUS WORD .)
    LESS_AND        reduce using rule 25 (redirection -> LESS_LESS_MINUS WORD .)
    GREATER_AND     reduce using rule 25 (redirection -> LESS_LESS_MINUS WORD .)
    AND_GREATER     reduce using rule 25 (redirection -> LESS_LESS_MINUS WORD .)
    AND_GREATER_GREATER reduce using rule 25 (redirection -> LESS_LESS_MINUS WORD .)
    |               reduce using rule 25 (redirection -> LESS_LESS_MINUS WORD .)
    BAR_AND         reduce using rule 25 (redirection -> LESS_LESS_MINUS WORD .)
    &               reduce using rule 25 (redirection -> LESS_LESS_MINUS WORD .)
    ;               reduce using rule 25 (redirection -> LESS_LESS_MINUS WORD .)
    AND_AND         reduce using rule 25 (redirection -> LESS_LESS_MINUS WORD .)
    OR_OR           reduce using rule 25 (redirection -> LESS_LESS_MINUS WORD .)
    NEWLINE         reduce using rule 25 (redirection -> LESS_LESS_MINUS WORD .)
    DO              reduce using rule 25 (redirection -> LESS_LESS_MINUS WORD .)
    THEN            reduce using rule 25 (redirection -> LESS_LESS_MINUS WORD .)
    }               reduce using rule 25 (redirection -> LESS_LESS_MINUS WORD .)
    )               reduce using rule 25 (redirection -> LESS_LESS_MINUS WORD .)
    DONE            reduce using rule 25 (redirection -> LESS_LESS_MINUS WORD .)
    FI              reduce using rule 25 (redirection -> LESS_LESS_MINUS WORD .)
    ELSE            reduce using rule 25 (redirection -> LESS_LESS_MINUS WORD .)
    ELIF            reduce using rule 25 (redirection -> LESS_LESS_MINUS WORD .)
    SEMI_SEMI       reduce using rule 25 (redirection -> LESS_LESS_MINUS WORD .)
    SEMI_AND        reduce using rule 25 (redirection -> LESS_LESS_MINUS WORD .)
    SEMI_SEMI_AND   reduce using rule 25 (redirection -> LESS_LESS_MINUS WORD .)
    ESAC            reduce using rule 25 (redirection -> LESS_LESS_MINUS WORD .)
    WORD            reduce using rule 25 (redirection -> LESS_LESS_MINUS WORD .)
    ASSIGNMENT_WORD reduce using rule 25 (redirection -> LESS_LESS_MINUS WORD .)


state 92

    (109) group_command -> { compound_list . }

    }               shift and go to state 166


state 93

    (111) cond_command -> COND_START COND_CMD . COND_END

    COND_END        shift and go to state 167


state 94

    (142) list_terminator -> NEWLINE .

    &               reduce using rule 142 (list_terminator -> NEWLINE .)
    ;               reduce using rule 142 (list_terminator -> NEWLINE .)
    AND_AND         reduce using rule 142 (list_terminator -> NEWLINE .)
    OR_OR           reduce using rule 142 (list_terminator -> NEWLINE .)
    NEWLINE         reduce using rule 142 (list_terminator -> NEWLINE .)
    DO              reduce using rule 142 (list_terminator -> NEWLINE .)
    THEN            reduce using rule 142 (list_terminator -> NEWLINE .)
    }               reduce using rule 142 (list_terminator -> NEWLINE .)
    )               reduce using rule 142 (list_terminator -> NEWLINE .)
    DONE            reduce using rule 142 (list_terminator -> NEWLINE .)
    FI              reduce using rule 142 (list_terminator -> NEWLINE .)
    ELSE            reduce using rule 142 (list_terminator -> NEWLINE .)
    ELIF            reduce using rule 142 (list_terminator -> NEWLINE .)
    SEMI_SEMI       reduce using rule 142 (list_terminator -> NEWLINE .)
    SEMI_AND        reduce using rule 142 (list_terminator -> NEWLINE .)
    SEMI_SEMI_AND   reduce using rule 142 (list_terminator -> NEWLINE .)
    ESAC            reduce using rule 142 (list_terminator -> NEWLINE .)
    {               reduce using rule 142 (list_terminator -> NEWLINE .)


state 95

    (143) list_terminator -> ; .

    &               reduce using rule 143 (list_terminator -> ; .)
    ;               reduce using rule 143 (list_terminator -> ; .)
    AND_AND         reduce using rule 143 (list_terminator -> ; .)
    OR_OR           reduce using rule 143 (list_terminator -> ; .)
    NEWLINE         reduce using rule 143 (list_terminator -> ; .)
    DO              reduce using rule 143 (list_terminator -> ; .)
    THEN            reduce using rule 143 (list_terminator -> ; .)
    }               reduce using rule 143 (list_terminator -> ; .)
    )               reduce using rule 143 (list_terminator -> ; .)
    DONE            reduce using rule 143 (list_terminator -> ; .)
    FI              reduce using rule 143 (list_terminator -> ; .)
    ELSE            reduce using rule 143 (list_terminator -> ; .)
    ELIF            reduce using rule 143 (list_terminator -> ; .)
    SEMI_SEMI       reduce using rule 143 (list_terminator -> ; .)
    SEMI_AND        reduce using rule 143 (list_terminator -> ; .)
    SEMI_SEMI_AND   reduce using rule 143 (list_terminator -> ; .)
    ESAC            reduce using rule 143 (list_terminator -> ; .)
    {               reduce using rule 143 (list_terminator -> ; .)


state 96

    (156) pipeline_command -> timespec pipeline_command .

    AND_AND         reduce using rule 156 (pipeline_command -> timespec pipeline_command .)
    OR_OR           reduce using rule 156 (pipeline_command -> timespec pipeline_command .)
    &               reduce using rule 156 (pipeline_command -> timespec pipeline_command .)
    ;               reduce using rule 156 (pipeline_command -> timespec pipeline_command .)
    NEWLINE         reduce using rule 156 (pipeline_command -> timespec pipeline_command .)
    DO              reduce using rule 156 (pipeline_command -> timespec pipeline_command .)
    THEN            reduce using rule 156 (pipeline_command -> timespec pipeline_command .)
    }               reduce using rule 156 (pipeline_command -> timespec pipeline_command .)
    )               reduce using rule 156 (pipeline_command -> timespec pipeline_command .)
    DONE            reduce using rule 156 (pipeline_command -> timespec pipeline_command .)
    FI              reduce using rule 156 (pipeline_command -> timespec pipeline_command .)
    ELSE            reduce using rule 156 (pipeline_command -> timespec pipeline_command .)
    ELIF            reduce using rule 156 (pipeline_command -> timespec pipeline_command .)
    SEMI_SEMI       reduce using rule 156 (pipeline_command -> timespec pipeline_command .)
    SEMI_AND        reduce using rule 156 (pipeline_command -> timespec pipeline_command .)
    SEMI_SEMI_AND   reduce using rule 156 (pipeline_command -> timespec pipeline_command .)
    ESAC            reduce using rule 156 (pipeline_command -> timespec pipeline_command .)


state 97

    (157) pipeline_command -> timespec list_terminator .

    AND_AND         reduce using rule 157 (pipeline_command -> timespec list_terminator .)
    OR_OR           reduce using rule 157 (pipeline_command -> timespec list_terminator .)
    &               reduce using rule 157 (pipeline_command -> timespec list_terminator .)
    ;               reduce using rule 157 (pipeline_command -> timespec list_terminator .)
    NEWLINE         reduce using rule 157 (pipeline_command -> timespec list_terminator .)
    DO              reduce using rule 157 (pipeline_command -> timespec list_terminator .)
    THEN            reduce using rule 157 (pipeline_command -> timespec list_terminator .)
    }               reduce using rule 157 (pipeline_command -> timespec list_terminator .)
    )               reduce using rule 157 (pipeline_command -> timespec list_terminator .)
    DONE            reduce using rule 157 (pipeline_command -> timespec list_terminator .)
    FI              reduce using rule 157 (pipeline_command -> timespec list_terminator .)
    ELSE            reduce using rule 157 (pipeline_command -> timespec list_terminator .)
    ELIF            reduce using rule 157 (pipeline_command -> timespec list_terminator .)
    SEMI_SEMI       reduce using rule 157 (pipeline_command -> timespec list_terminator .)
    SEMI_AND        reduce using rule 157 (pipeline_command -> timespec list_terminator .)
    SEMI_SEMI_AND   reduce using rule 157 (pipeline_command -> timespec list_terminator .)
    ESAC            reduce using rule 157 (pipeline_command -> timespec list_terminator .)


state 98

    (54) redirection_list -> redirection .

    >               reduce using rule 54 (redirection_list -> redirection .)
    <               reduce using rule 54 (redirection_list -> redirection .)
    NUMBER          reduce using rule 54 (redirection_list -> redirection .)
    REDIR_WORD      reduce using rule 54 (redirection_list -> redirection .)
    GREATER_GREATER reduce using rule 54 (redirection_list -> redirection .)
    GREATER_BAR     reduce using rule 54 (redirection_list -> redirection .)
    LESS_GREATER    reduce using rule 54 (redirection_list -> redirection .)
    LESS_LESS       reduce using rule 54 (redirection_list -> redirection .)
    LESS_LESS_MINUS reduce using rule 54 (redirection_list -> redirection .)
    LESS_LESS_LESS  reduce using rule 54 (redirection_list -> redirection .)
    LESS_AND        reduce using rule 54 (redirection_list -> redirection .)
    GREATER_AND     reduce using rule 54 (redirection_list -> redirection .)
    AND_GREATER     reduce using rule 54 (redirection_list -> redirection .)
    AND_GREATER_GREATER reduce using rule 54 (redirection_list -> redirection .)
    |               reduce using rule 54 (redirection_list -> redirection .)
    BAR_AND         reduce using rule 54 (redirection_list -> redirection .)
    &               reduce using rule 54 (redirection_list -> redirection .)
    ;               reduce using rule 54 (redirection_list -> redirection .)
    AND_AND         reduce using rule 54 (redirection_list -> redirection .)
    OR_OR           reduce using rule 54 (redirection_list -> redirection .)
    NEWLINE         reduce using rule 54 (redirection_list -> redirection .)
    DO              reduce using rule 54 (redirection_list -> redirection .)
    THEN            reduce using rule 54 (redirection_list -> redirection .)
    }               reduce using rule 54 (redirection_list -> redirection .)
    )               reduce using rule 54 (redirection_list -> redirection .)
    DONE            reduce using rule 54 (redirection_list -> redirection .)
    FI              reduce using rule 54 (redirection_list -> redirection .)
    ELSE            reduce using rule 54 (redirection_list -> redirection .)
    ELIF            reduce using rule 54 (redirection_list -> redirection .)
    SEMI_SEMI       reduce using rule 54 (redirection_list -> redirection .)
    SEMI_AND        reduce using rule 54 (redirection_list -> redirection .)
    SEMI_SEMI_AND   reduce using rule 54 (redirection_list -> redirection .)
    ESAC            reduce using rule 54 (redirection_list -> redirection .)


state 99

    (60) command -> shell_command redirection_list .
    (55) redirection_list -> redirection_list . redirection
    (7) redirection -> . > WORD
    (8) redirection -> . < WORD
    (9) redirection -> . NUMBER > WORD
    (10) redirection -> . NUMBER < WORD
    (11) redirection -> . REDIR_WORD > WORD
    (12) redirection -> . REDIR_WORD < WORD
    (13) redirection -> . GREATER_GREATER WORD
    (14) redirection -> . NUMBER GREATER_GREATER WORD
    (15) redirection -> . REDIR_WORD GREATER_GREATER WORD
    (16) redirection -> . GREATER_BAR WORD
    (17) redirection -> . NUMBER GREATER_BAR WORD
    (18) redirection -> . REDIR_WORD GREATER_BAR WORD
    (19) redirection -> . LESS_GREATER WORD
    (20) redirection -> . NUMBER LESS_GREATER WORD
    (21) redirection -> . REDIR_WORD LESS_GREATER WORD
    (22) redirection -> . LESS_LESS WORD
    (23) redirection -> . NUMBER LESS_LESS WORD
    (24) redirection -> . REDIR_WORD LESS_LESS WORD
    (25) redirection -> . LESS_LESS_MINUS WORD
    (26) redirection -> . NUMBER LESS_LESS_MINUS WORD
    (27) redirection -> . REDIR_WORD LESS_LESS_MINUS WORD
    (28) redirection -> . LESS_LESS_LESS WORD
    (29) redirection -> . NUMBER LESS_LESS_LESS WORD
    (30) redirection -> . REDIR_WORD LESS_LESS_LESS WORD
    (31) redirection -> . LESS_AND NUMBER
    (32) redirection -> . NUMBER LESS_AND NUMBER
    (33) redirection -> . REDIR_WORD LESS_AND NUMBER
    (34) redirection -> . GREATER_AND NUMBER
    (35) redirection -> . NUMBER GREATER_AND NUMBER
    (36) redirection -> . REDIR_WORD GREATER_AND NUMBER
    (37) redirection -> . LESS_AND WORD
    (38) redirection -> . NUMBER LESS_AND WORD
    (39) redirection -> . REDIR_WORD LESS_AND WORD
    (40) redirection -> . GREATER_AND WORD
    (41) redirection -> . NUMBER GREATER_AND WORD
    (42) redirection -> . REDIR_WORD GREATER_AND WORD
    (43) redirection -> . GREATER_AND -
    (44) redirection -> . NUMBER GREATER_AND -
    (45) redirection -> . REDIR_WORD GREATER_AND -
    (46) redirection -> . LESS_AND -
    (47) redirection -> . NUMBER LESS_AND -
    (48) redirection -> . REDIR_WORD LESS_AND -
    (49) redirection -> . AND_GREATER WORD
    (50) redirection -> . AND_GREATER_GREATER WORD

    |               reduce using rule 60 (command -> shell_command redirection_list .)
    BAR_AND         reduce using rule 60 (command -> shell_command redirection_list .)
    AND_AND         reduce using rule 60 (command -> shell_command redirection_list .)
    OR_OR           reduce using rule 60 (command -> shell_command redirection_list .)
    &               reduce using rule 60 (command -> shell_command redirection_list .)
    ;               reduce using rule 60 (command -> shell_command redirection_list .)
    NEWLINE         reduce using rule 60 (command -> shell_command redirection_list .)
    DO              reduce using rule 60 (command -> shell_command redirection_list .)
    THEN            reduce using rule 60 (command -> shell_command redirection_list .)
    }               reduce using rule 60 (command -> shell_command redirection_list .)
    )               reduce using rule 60 (command -> shell_command redirection_list .)
    DONE            reduce using rule 60 (command -> shell_command redirection_list .)
    FI              reduce using rule 60 (command -> shell_command redirection_list .)
    ELSE            reduce using rule 60 (command -> shell_command redirection_list .)
    ELIF            reduce using rule 60 (command -> shell_command redirection_list .)
    SEMI_SEMI       reduce using rule 60 (command -> shell_command redirection_list .)
    SEMI_AND        reduce using rule 60 (command -> shell_command redirection_list .)
    SEMI_SEMI_AND   reduce using rule 60 (command -> shell_command redirection_list .)
    ESAC            reduce using rule 60 (command -> shell_command redirection_list .)
    >               shift and go to state 41
    <               shift and go to state 40
    NUMBER          shift and go to state 9
    REDIR_WORD      shift and go to state 7
    GREATER_GREATER shift and go to state 28
    GREATER_BAR     shift and go to state 11
    LESS_GREATER    shift and go to state 33
    LESS_LESS       shift and go to state 3
    LESS_LESS_MINUS shift and go to state 18
    LESS_LESS_LESS  shift and go to state 14
    LESS_AND        shift and go to state 17
    GREATER_AND     shift and go to state 47
    AND_GREATER     shift and go to state 45
    AND_GREATER_GREATER shift and go to state 37

    redirection                    shift and go to state 168

state 100

    (57) simple_command -> simple_command simple_command_element .

    WORD            reduce using rule 57 (simple_command -> simple_command simple_command_element .)
    ASSIGNMENT_WORD reduce using rule 57 (simple_command -> simple_command simple_command_element .)
    >               reduce using rule 57 (simple_command -> simple_command simple_command_element .)
    <               reduce using rule 57 (simple_command -> simple_command simple_command_element .)
    NUMBER          reduce using rule 57 (simple_command -> simple_command simple_command_element .)
    REDIR_WORD      reduce using rule 57 (simple_command -> simple_command simple_command_element .)
    GREATER_GREATER reduce using rule 57 (simple_command -> simple_command simple_command_element .)
    GREATER_BAR     reduce using rule 57 (simple_command -> simple_command simple_command_element .)
    LESS_GREATER    reduce using rule 57 (simple_command -> simple_command simple_command_element .)
    LESS_LESS       reduce using rule 57 (simple_command -> simple_command simple_command_element .)
    LESS_LESS_MINUS reduce using rule 57 (simple_command -> simple_command simple_command_element .)
    LESS_LESS_LESS  reduce using rule 57 (simple_command -> simple_command simple_command_element .)
    LESS_AND        reduce using rule 57 (simple_command -> simple_command simple_command_element .)
    GREATER_AND     reduce using rule 57 (simple_command -> simple_command simple_command_element .)
    AND_GREATER     reduce using rule 57 (simple_command -> simple_command simple_command_element .)
    AND_GREATER_GREATER reduce using rule 57 (simple_command -> simple_command simple_command_element .)
    |               reduce using rule 57 (simple_command -> simple_command simple_command_element .)
    BAR_AND         reduce using rule 57 (simple_command -> simple_command simple_command_element .)
    AND_AND         reduce using rule 57 (simple_command -> simple_command simple_command_element .)
    OR_OR           reduce using rule 57 (simple_command -> simple_command simple_command_element .)
    &               reduce using rule 57 (simple_command -> simple_command simple_command_element .)
    ;               reduce using rule 57 (simple_command -> simple_command simple_command_element .)
    NEWLINE         reduce using rule 57 (simple_command -> simple_command simple_command_element .)
    DO              reduce using rule 57 (simple_command -> simple_command simple_command_element .)
    THEN            reduce using rule 57 (simple_command -> simple_command simple_command_element .)
    }               reduce using rule 57 (simple_command -> simple_command simple_command_element .)
    )               reduce using rule 57 (simple_command -> simple_command simple_command_element .)
    DONE            reduce using rule 57 (simple_command -> simple_command simple_command_element .)
    FI              reduce using rule 57 (simple_command -> simple_command simple_command_element .)
    ELSE            reduce using rule 57 (simple_command -> simple_command simple_command_element .)
    ELIF            reduce using rule 57 (simple_command -> simple_command simple_command_element .)
    SEMI_SEMI       reduce using rule 57 (simple_command -> simple_command simple_command_element .)
    SEMI_AND        reduce using rule 57 (simple_command -> simple_command simple_command_element .)
    SEMI_SEMI_AND   reduce using rule 57 (simple_command -> simple_command simple_command_element .)
    ESAC            reduce using rule 57 (simple_command -> simple_command simple_command_element .)


state 101

    (51) simple_command_element -> WORD .

    WORD            reduce using rule 51 (simple_command_element -> WORD .)
    ASSIGNMENT_WORD reduce using rule 51 (simple_command_element -> WORD .)
    >               reduce using rule 51 (simple_command_element -> WORD .)
    <               reduce using rule 51 (simple_command_element -> WORD .)
    NUMBER          reduce using rule 51 (simple_command_element -> WORD .)
    REDIR_WORD      reduce using rule 51 (simple_command_element -> WORD .)
    GREATER_GREATER reduce using rule 51 (simple_command_element -> WORD .)
    GREATER_BAR     reduce using rule 51 (simple_command_element -> WORD .)
    LESS_GREATER    reduce using rule 51 (simple_command_element -> WORD .)
    LESS_LESS       reduce using rule 51 (simple_command_element -> WORD .)
    LESS_LESS_MINUS reduce using rule 51 (simple_command_element -> WORD .)
    LESS_LESS_LESS  reduce using rule 51 (simple_command_element -> WORD .)
    LESS_AND        reduce using rule 51 (simple_command_element -> WORD .)
    GREATER_AND     reduce using rule 51 (simple_command_element -> WORD .)
    AND_GREATER     reduce using rule 51 (simple_command_element -> WORD .)
    AND_GREATER_GREATER reduce using rule 51 (simple_command_element -> WORD .)
    |               reduce using rule 51 (simple_command_element -> WORD .)
    BAR_AND         reduce using rule 51 (simple_command_element -> WORD .)
    &               reduce using rule 51 (simple_command_element -> WORD .)
    ;               reduce using rule 51 (simple_command_element -> WORD .)
    AND_AND         reduce using rule 51 (simple_command_element -> WORD .)
    OR_OR           reduce using rule 51 (simple_command_element -> WORD .)
    NEWLINE         reduce using rule 51 (simple_command_element -> WORD .)
    DO              reduce using rule 51 (simple_command_element -> WORD .)
    THEN            reduce using rule 51 (simple_command_element -> WORD .)
    }               reduce using rule 51 (simple_command_element -> WORD .)
    )               reduce using rule 51 (simple_command_element -> WORD .)
    DONE            reduce using rule 51 (simple_command_element -> WORD .)
    FI              reduce using rule 51 (simple_command_element -> WORD .)
    ELSE            reduce using rule 51 (simple_command_element -> WORD .)
    ELIF            reduce using rule 51 (simple_command_element -> WORD .)
    SEMI_SEMI       reduce using rule 51 (simple_command_element -> WORD .)
    SEMI_AND        reduce using rule 51 (simple_command_element -> WORD .)
    SEMI_SEMI_AND   reduce using rule 51 (simple_command_element -> WORD .)
    ESAC            reduce using rule 51 (simple_command_element -> WORD .)


state 102

    (13) redirection -> GREATER_GREATER WORD .

    >               reduce using rule 13 (redirection -> GREATER_GREATER WORD .)
    <               reduce using rule 13 (redirection -> GREATER_GREATER WORD .)
    NUMBER          reduce using rule 13 (redirection -> GREATER_GREATER WORD .)
    REDIR_WORD      reduce using rule 13 (redirection -> GREATER_GREATER WORD .)
    GREATER_GREATER reduce using rule 13 (redirection -> GREATER_GREATER WORD .)
    GREATER_BAR     reduce using rule 13 (redirection -> GREATER_GREATER WORD .)
    LESS_GREATER    reduce using rule 13 (redirection -> GREATER_GREATER WORD .)
    LESS_LESS       reduce using rule 13 (redirection -> GREATER_GREATER WORD .)
    LESS_LESS_MINUS reduce using rule 13 (redirection -> GREATER_GREATER WORD .)
    LESS_LESS_LESS  reduce using rule 13 (redirection -> GREATER_GREATER WORD .)
    LESS_AND        reduce using rule 13 (redirection -> GREATER_GREATER WORD .)
    GREATER_AND     reduce using rule 13 (redirection -> GREATER_GREATER WORD .)
    AND_GREATER     reduce using rule 13 (redirection -> GREATER_GREATER WORD .)
    AND_GREATER_GREATER reduce using rule 13 (redirection -> GREATER_GREATER WORD .)
    |               reduce using rule 13 (redirection -> GREATER_GREATER WORD .)
    BAR_AND         reduce using rule 13 (redirection -> GREATER_GREATER WORD .)
    &               reduce using rule 13 (redirection -> GREATER_GREATER WORD .)
    ;               reduce using rule 13 (redirection -> GREATER_GREATER WORD .)
    AND_AND         reduce using rule 13 (redirection -> GREATER_GREATER WORD .)
    OR_OR           reduce using rule 13 (redirection -> GREATER_GREATER WORD .)
    NEWLINE         reduce using rule 13 (redirection -> GREATER_GREATER WORD .)
    DO              reduce using rule 13 (redirection -> GREATER_GREATER WORD .)
    THEN            reduce using rule 13 (redirection -> GREATER_GREATER WORD .)
    }               reduce using rule 13 (redirection -> GREATER_GREATER WORD .)
    )               reduce using rule 13 (redirection -> GREATER_GREATER WORD .)
    DONE            reduce using rule 13 (redirection -> GREATER_GREATER WORD .)
    FI              reduce using rule 13 (redirection -> GREATER_GREATER WORD .)
    ELSE            reduce using rule 13 (redirection -> GREATER_GREATER WORD .)
    ELIF            reduce using rule 13 (redirection -> GREATER_GREATER WORD .)
    SEMI_SEMI       reduce using rule 13 (redirection -> GREATER_GREATER WORD .)
    SEMI_AND        reduce using rule 13 (redirection -> GREATER_GREATER WORD .)
    SEMI_SEMI_AND   reduce using rule 13 (redirection -> GREATER_GREATER WORD .)
    ESAC            reduce using rule 13 (redirection -> GREATER_GREATER WORD .)
    WORD            reduce using rule 13 (redirection -> GREATER_GREATER WORD .)
    ASSIGNMENT_WORD reduce using rule 13 (redirection -> GREATER_GREATER WORD .)


state 103

    (74) for_command -> FOR WORD . newline_list DO compound_list DONE
    (75) for_command -> FOR WORD . newline_list { compound_list }
    (76) for_command -> FOR WORD . ; newline_list DO compound_list DONE
    (77) for_command -> FOR WORD . ; newline_list { compound_list }
    (78) for_command -> FOR WORD . newline_list IN word_list list_terminator newline_list DO compound_list DONE
    (79) for_command -> FOR WORD . newline_list IN word_list list_terminator newline_list { compound_list }
    (80) for_command -> FOR WORD . newline_list IN list_terminator newline_list DO compound_list DONE
    (81) for_command -> FOR WORD . newline_list IN list_terminator newline_list { compound_list }
    (144) newline_list -> .
    (145) newline_list -> . newline_list NEWLINE

    ;               shift and go to state 170
    DO              reduce using rule 144 (newline_list -> .)
    {               reduce using rule 144 (newline_list -> .)
    IN              reduce using rule 144 (newline_list -> .)
    NEWLINE         reduce using rule 144 (newline_list -> .)

    newline_list                   shift and go to state 169

state 104

    (82) arith_for_command -> FOR ARITH_FOR_EXPRS . list_terminator newline_list DO compound_list DONE
    (83) arith_for_command -> FOR ARITH_FOR_EXPRS . list_terminator newline_list { compound_list }
    (84) arith_for_command -> FOR ARITH_FOR_EXPRS . DO compound_list DONE
    (85) arith_for_command -> FOR ARITH_FOR_EXPRS . { compound_list }
    (142) list_terminator -> . NEWLINE
    (143) list_terminator -> . ;

    DO              shift and go to state 173
    {               shift and go to state 172
    NEWLINE         shift and go to state 94
    ;               shift and go to state 95

    list_terminator                shift and go to state 171

state 105

    (155) pipeline_command -> BANG pipeline_command .

    AND_AND         reduce using rule 155 (pipeline_command -> BANG pipeline_command .)
    OR_OR           reduce using rule 155 (pipeline_command -> BANG pipeline_command .)
    &               reduce using rule 155 (pipeline_command -> BANG pipeline_command .)
    ;               reduce using rule 155 (pipeline_command -> BANG pipeline_command .)
    NEWLINE         reduce using rule 155 (pipeline_command -> BANG pipeline_command .)
    DO              reduce using rule 155 (pipeline_command -> BANG pipeline_command .)
    THEN            reduce using rule 155 (pipeline_command -> BANG pipeline_command .)
    }               reduce using rule 155 (pipeline_command -> BANG pipeline_command .)
    )               reduce using rule 155 (pipeline_command -> BANG pipeline_command .)
    DONE            reduce using rule 155 (pipeline_command -> BANG pipeline_command .)
    FI              reduce using rule 155 (pipeline_command -> BANG pipeline_command .)
    ELSE            reduce using rule 155 (pipeline_command -> BANG pipeline_command .)
    ELIF            reduce using rule 155 (pipeline_command -> BANG pipeline_command .)
    SEMI_SEMI       reduce using rule 155 (pipeline_command -> BANG pipeline_command .)
    SEMI_AND        reduce using rule 155 (pipeline_command -> BANG pipeline_command .)
    SEMI_SEMI_AND   reduce using rule 155 (pipeline_command -> BANG pipeline_command .)
    ESAC            reduce using rule 155 (pipeline_command -> BANG pipeline_command .)


state 106

    (158) pipeline_command -> BANG list_terminator .

    AND_AND         reduce using rule 158 (pipeline_command -> BANG list_terminator .)
    OR_OR           reduce using rule 158 (pipeline_command -> BANG list_terminator .)
    &               reduce using rule 158 (pipeline_command -> BANG list_terminator .)
    ;               reduce using rule 158 (pipeline_command -> BANG list_terminator .)
    NEWLINE         reduce using rule 158 (pipeline_command -> BANG list_terminator .)
    DO              reduce using rule 158 (pipeline_command -> BANG list_terminator .)
    THEN            reduce using rule 158 (pipeline_command -> BANG list_terminator .)
    }               reduce using rule 158 (pipeline_command -> BANG list_terminator .)
    )               reduce using rule 158 (pipeline_command -> BANG list_terminator .)
    DONE            reduce using rule 158 (pipeline_command -> BANG list_terminator .)
    FI              reduce using rule 158 (pipeline_command -> BANG list_terminator .)
    ELSE            reduce using rule 158 (pipeline_command -> BANG list_terminator .)
    ELIF            reduce using rule 158 (pipeline_command -> BANG list_terminator .)
    SEMI_SEMI       reduce using rule 158 (pipeline_command -> BANG list_terminator .)
    SEMI_AND        reduce using rule 158 (pipeline_command -> BANG list_terminator .)
    SEMI_SEMI_AND   reduce using rule 158 (pipeline_command -> BANG list_terminator .)
    ESAC            reduce using rule 158 (pipeline_command -> BANG list_terminator .)


state 107

    (19) redirection -> LESS_GREATER WORD .

    >               reduce using rule 19 (redirection -> LESS_GREATER WORD .)
    <               reduce using rule 19 (redirection -> LESS_GREATER WORD .)
    NUMBER          reduce using rule 19 (redirection -> LESS_GREATER WORD .)
    REDIR_WORD      reduce using rule 19 (redirection -> LESS_GREATER WORD .)
    GREATER_GREATER reduce using rule 19 (redirection -> LESS_GREATER WORD .)
    GREATER_BAR     reduce using rule 19 (redirection -> LESS_GREATER WORD .)
    LESS_GREATER    reduce using rule 19 (redirection -> LESS_GREATER WORD .)
    LESS_LESS       reduce using rule 19 (redirection -> LESS_GREATER WORD .)
    LESS_LESS_MINUS reduce using rule 19 (redirection -> LESS_GREATER WORD .)
    LESS_LESS_LESS  reduce using rule 19 (redirection -> LESS_GREATER WORD .)
    LESS_AND        reduce using rule 19 (redirection -> LESS_GREATER WORD .)
    GREATER_AND     reduce using rule 19 (redirection -> LESS_GREATER WORD .)
    AND_GREATER     reduce using rule 19 (redirection -> LESS_GREATER WORD .)
    AND_GREATER_GREATER reduce using rule 19 (redirection -> LESS_GREATER WORD .)
    |               reduce using rule 19 (redirection -> LESS_GREATER WORD .)
    BAR_AND         reduce using rule 19 (redirection -> LESS_GREATER WORD .)
    &               reduce using rule 19 (redirection -> LESS_GREATER WORD .)
    ;               reduce using rule 19 (redirection -> LESS_GREATER WORD .)
    AND_AND         reduce using rule 19 (redirection -> LESS_GREATER WORD .)
    OR_OR           reduce using rule 19 (redirection -> LESS_GREATER WORD .)
    NEWLINE         reduce using rule 19 (redirection -> LESS_GREATER WORD .)
    DO              reduce using rule 19 (redirection -> LESS_GREATER WORD .)
    THEN            reduce using rule 19 (redirection -> LESS_GREATER WORD .)
    }               reduce using rule 19 (redirection -> LESS_GREATER WORD .)
    )               reduce using rule 19 (redirection -> LESS_GREATER WORD .)
    DONE            reduce using rule 19 (redirection -> LESS_GREATER WORD .)
    FI              reduce using rule 19 (redirection -> LESS_GREATER WORD .)
    ELSE            reduce using rule 19 (redirection -> LESS_GREATER WORD .)
    ELIF            reduce using rule 19 (redirection -> LESS_GREATER WORD .)
    SEMI_SEMI       reduce using rule 19 (redirection -> LESS_GREATER WORD .)
    SEMI_AND        reduce using rule 19 (redirection -> LESS_GREATER WORD .)
    SEMI_SEMI_AND   reduce using rule 19 (redirection -> LESS_GREATER WORD .)
    ESAC            reduce using rule 19 (redirection -> LESS_GREATER WORD .)
    WORD            reduce using rule 19 (redirection -> LESS_GREATER WORD .)
    ASSIGNMENT_WORD reduce using rule 19 (redirection -> LESS_GREATER WORD .)


state 108

    (65) shell_command -> WHILE compound_list . DO compound_list DONE

    DO              shift and go to state 174


state 109

    (100) subshell -> ( compound_list . )

    )               shift and go to state 175


state 110

    (50) redirection -> AND_GREATER_GREATER WORD .

    >               reduce using rule 50 (redirection -> AND_GREATER_GREATER WORD .)
    <               reduce using rule 50 (redirection -> AND_GREATER_GREATER WORD .)
    NUMBER          reduce using rule 50 (redirection -> AND_GREATER_GREATER WORD .)
    REDIR_WORD      reduce using rule 50 (redirection -> AND_GREATER_GREATER WORD .)
    GREATER_GREATER reduce using rule 50 (redirection -> AND_GREATER_GREATER WORD .)
    GREATER_BAR     reduce using rule 50 (redirection -> AND_GREATER_GREATER WORD .)
    LESS_GREATER    reduce using rule 50 (redirection -> AND_GREATER_GREATER WORD .)
    LESS_LESS       reduce using rule 50 (redirection -> AND_GREATER_GREATER WORD .)
    LESS_LESS_MINUS reduce using rule 50 (redirection -> AND_GREATER_GREATER WORD .)
    LESS_LESS_LESS  reduce using rule 50 (redirection -> AND_GREATER_GREATER WORD .)
    LESS_AND        reduce using rule 50 (redirection -> AND_GREATER_GREATER WORD .)
    GREATER_AND     reduce using rule 50 (redirection -> AND_GREATER_GREATER WORD .)
    AND_GREATER     reduce using rule 50 (redirection -> AND_GREATER_GREATER WORD .)
    AND_GREATER_GREATER reduce using rule 50 (redirection -> AND_GREATER_GREATER WORD .)
    |               reduce using rule 50 (redirection -> AND_GREATER_GREATER WORD .)
    BAR_AND         reduce using rule 50 (redirection -> AND_GREATER_GREATER WORD .)
    &               reduce using rule 50 (redirection -> AND_GREATER_GREATER WORD .)
    ;               reduce using rule 50 (redirection -> AND_GREATER_GREATER WORD .)
    AND_AND         reduce using rule 50 (redirection -> AND_GREATER_GREATER WORD .)
    OR_OR           reduce using rule 50 (redirection -> AND_GREATER_GREATER WORD .)
    NEWLINE         reduce using rule 50 (redirection -> AND_GREATER_GREATER WORD .)
    DO              reduce using rule 50 (redirection -> AND_GREATER_GREATER WORD .)
    THEN            reduce using rule 50 (redirection -> AND_GREATER_GREATER WORD .)
    }               reduce using rule 50 (redirection -> AND_GREATER_GREATER WORD .)
    )               reduce using rule 50 (redirection -> AND_GREATER_GREATER WORD .)
    DONE            reduce using rule 50 (redirection -> AND_GREATER_GREATER WORD .)
    FI              reduce using rule 50 (redirection -> AND_GREATER_GREATER WORD .)
    ELSE            reduce using rule 50 (redirection -> AND_GREATER_GREATER WORD .)
    ELIF            reduce using rule 50 (redirection -> AND_GREATER_GREATER WORD .)
    SEMI_SEMI       reduce using rule 50 (redirection -> AND_GREATER_GREATER WORD .)
    SEMI_AND        reduce using rule 50 (redirection -> AND_GREATER_GREATER WORD .)
    SEMI_SEMI_AND   reduce using rule 50 (redirection -> AND_GREATER_GREATER WORD .)
    ESAC            reduce using rule 50 (redirection -> AND_GREATER_GREATER WORD .)
    WORD            reduce using rule 50 (redirection -> AND_GREATER_GREATER WORD .)
    ASSIGNMENT_WORD reduce using rule 50 (redirection -> AND_GREATER_GREATER WORD .)


state 111

    (86) select_command -> SELECT WORD . newline_list DO list DONE
    (87) select_command -> SELECT WORD . newline_list { list }
    (88) select_command -> SELECT WORD . ; newline_list DO list DONE
    (89) select_command -> SELECT WORD . ; newline_list { list }
    (90) select_command -> SELECT WORD . newline_list IN word_list list_terminator newline_list DO list DONE
    (91) select_command -> SELECT WORD . newline_list IN word_list list_terminator newline_list { list }
    (144) newline_list -> .
    (145) newline_list -> . newline_list NEWLINE

    ;               shift and go to state 177
    DO              reduce using rule 144 (newline_list -> .)
    {               reduce using rule 144 (newline_list -> .)
    IN              reduce using rule 144 (newline_list -> .)
    NEWLINE         reduce using rule 144 (newline_list -> .)

    newline_list                   shift and go to state 176

state 112

    (8) redirection -> < WORD .

    >               reduce using rule 8 (redirection -> < WORD .)
    <               reduce using rule 8 (redirection -> < WORD .)
    NUMBER          reduce using rule 8 (redirection -> < WORD .)
    REDIR_WORD      reduce using rule 8 (redirection -> < WORD .)
    GREATER_GREATER reduce using rule 8 (redirection -> < WORD .)
    GREATER_BAR     reduce using rule 8 (redirection -> < WORD .)
    LESS_GREATER    reduce using rule 8 (redirection -> < WORD .)
    LESS_LESS       reduce using rule 8 (redirection -> < WORD .)
    LESS_LESS_MINUS reduce using rule 8 (redirection -> < WORD .)
    LESS_LESS_LESS  reduce using rule 8 (redirection -> < WORD .)
    LESS_AND        reduce using rule 8 (redirection -> < WORD .)
    GREATER_AND     reduce using rule 8 (redirection -> < WORD .)
    AND_GREATER     reduce using rule 8 (redirection -> < WORD .)
    AND_GREATER_GREATER reduce using rule 8 (redirection -> < WORD .)
    |               reduce using rule 8 (redirection -> < WORD .)
    BAR_AND         reduce using rule 8 (redirection -> < WORD .)
    &               reduce using rule 8 (redirection -> < WORD .)
    ;               reduce using rule 8 (redirection -> < WORD .)
    AND_AND         reduce using rule 8 (redirection -> < WORD .)
    OR_OR           reduce using rule 8 (redirection -> < WORD .)
    NEWLINE         reduce using rule 8 (redirection -> < WORD .)
    DO              reduce using rule 8 (redirection -> < WORD .)
    THEN            reduce using rule 8 (redirection -> < WORD .)
    }               reduce using rule 8 (redirection -> < WORD .)
    )               reduce using rule 8 (redirection -> < WORD .)
    DONE            reduce using rule 8 (redirection -> < WORD .)
    FI              reduce using rule 8 (redirection -> < WORD .)
    ELSE            reduce using rule 8 (redirection -> < WORD .)
    ELIF            reduce using rule 8 (redirection -> < WORD .)
    SEMI_SEMI       reduce using rule 8 (redirection -> < WORD .)
    SEMI_AND        reduce using rule 8 (redirection -> < WORD .)
    SEMI_SEMI_AND   reduce using rule 8 (redirection -> < WORD .)
    ESAC            reduce using rule 8 (redirection -> < WORD .)
    WORD            reduce using rule 8 (redirection -> < WORD .)
    ASSIGNMENT_WORD reduce using rule 8 (redirection -> < WORD .)


state 113

    (7) redirection -> > WORD .

    >               reduce using rule 7 (redirection -> > WORD .)
    <               reduce using rule 7 (redirection -> > WORD .)
    NUMBER          reduce using rule 7 (redirection -> > WORD .)
    REDIR_WORD      reduce using rule 7 (redirection -> > WORD .)
    GREATER_GREATER reduce using rule 7 (redirection -> > WORD .)
    GREATER_BAR     reduce using rule 7 (redirection -> > WORD .)
    LESS_GREATER    reduce using rule 7 (redirection -> > WORD .)
    LESS_LESS       reduce using rule 7 (redirection -> > WORD .)
    LESS_LESS_MINUS reduce using rule 7 (redirection -> > WORD .)
    LESS_LESS_LESS  reduce using rule 7 (redirection -> > WORD .)
    LESS_AND        reduce using rule 7 (redirection -> > WORD .)
    GREATER_AND     reduce using rule 7 (redirection -> > WORD .)
    AND_GREATER     reduce using rule 7 (redirection -> > WORD .)
    AND_GREATER_GREATER reduce using rule 7 (redirection -> > WORD .)
    |               reduce using rule 7 (redirection -> > WORD .)
    BAR_AND         reduce using rule 7 (redirection -> > WORD .)
    &               reduce using rule 7 (redirection -> > WORD .)
    ;               reduce using rule 7 (redirection -> > WORD .)
    AND_AND         reduce using rule 7 (redirection -> > WORD .)
    OR_OR           reduce using rule 7 (redirection -> > WORD .)
    NEWLINE         reduce using rule 7 (redirection -> > WORD .)
    DO              reduce using rule 7 (redirection -> > WORD .)
    THEN            reduce using rule 7 (redirection -> > WORD .)
    }               reduce using rule 7 (redirection -> > WORD .)
    )               reduce using rule 7 (redirection -> > WORD .)
    DONE            reduce using rule 7 (redirection -> > WORD .)
    FI              reduce using rule 7 (redirection -> > WORD .)
    ELSE            reduce using rule 7 (redirection -> > WORD .)
    ELIF            reduce using rule 7 (redirection -> > WORD .)
    SEMI_SEMI       reduce using rule 7 (redirection -> > WORD .)
    SEMI_AND        reduce using rule 7 (redirection -> > WORD .)
    SEMI_SEMI_AND   reduce using rule 7 (redirection -> > WORD .)
    ESAC            reduce using rule 7 (redirection -> > WORD .)
    WORD            reduce using rule 7 (redirection -> > WORD .)
    ASSIGNMENT_WORD reduce using rule 7 (redirection -> > WORD .)


state 114

    (101) coproc -> COPROC shell_command .
    (102) coproc -> COPROC shell_command . redirection_list
    (54) redirection_list -> . redirection
    (55) redirection_list -> . redirection_list redirection
    (7) redirection -> . > WORD
    (8) redirection -> . < WORD
    (9) redirection -> . NUMBER > WORD
    (10) redirection -> . NUMBER < WORD
    (11) redirection -> . REDIR_WORD > WORD
    (12) redirection -> . REDIR_WORD < WORD
    (13) redirection -> . GREATER_GREATER WORD
    (14) redirection -> . NUMBER GREATER_GREATER WORD
    (15) redirection -> . REDIR_WORD GREATER_GREATER WORD
    (16) redirection -> . GREATER_BAR WORD
    (17) redirection -> . NUMBER GREATER_BAR WORD
    (18) redirection -> . REDIR_WORD GREATER_BAR WORD
    (19) redirection -> . LESS_GREATER WORD
    (20) redirection -> . NUMBER LESS_GREATER WORD
    (21) redirection -> . REDIR_WORD LESS_GREATER WORD
    (22) redirection -> . LESS_LESS WORD
    (23) redirection -> . NUMBER LESS_LESS WORD
    (24) redirection -> . REDIR_WORD LESS_LESS WORD
    (25) redirection -> . LESS_LESS_MINUS WORD
    (26) redirection -> . NUMBER LESS_LESS_MINUS WORD
    (27) redirection -> . REDIR_WORD LESS_LESS_MINUS WORD
    (28) redirection -> . LESS_LESS_LESS WORD
    (29) redirection -> . NUMBER LESS_LESS_LESS WORD
    (30) redirection -> . REDIR_WORD LESS_LESS_LESS WORD
    (31) redirection -> . LESS_AND NUMBER
    (32) redirection -> . NUMBER LESS_AND NUMBER
    (33) redirection -> . REDIR_WORD LESS_AND NUMBER
    (34) redirection -> . GREATER_AND NUMBER
    (35) redirection -> . NUMBER GREATER_AND NUMBER
    (36) redirection -> . REDIR_WORD GREATER_AND NUMBER
    (37) redirection -> . LESS_AND WORD
    (38) redirection -> . NUMBER LESS_AND WORD
    (39) redirection -> . REDIR_WORD LESS_AND WORD
    (40) redirection -> . GREATER_AND WORD
    (41) redirection -> . NUMBER GREATER_AND WORD
    (42) redirection -> . REDIR_WORD GREATER_AND WORD
    (43) redirection -> . GREATER_AND -
    (44) redirection -> . NUMBER GREATER_AND -
    (45) redirection -> . REDIR_WORD GREATER_AND -
    (46) redirection -> . LESS_AND -
    (47) redirection -> . NUMBER LESS_AND -
    (48) redirection -> . REDIR_WORD LESS_AND -
    (49) redirection -> . AND_GREATER WORD
    (50) redirection -> . AND_GREATER_GREATER WORD

    |               reduce using rule 101 (coproc -> COPROC shell_command .)
    BAR_AND         reduce using rule 101 (coproc -> COPROC shell_command .)
    &               reduce using rule 101 (coproc -> COPROC shell_command .)
    ;               reduce using rule 101 (coproc -> COPROC shell_command .)
    AND_AND         reduce using rule 101 (coproc -> COPROC shell_command .)
    OR_OR           reduce using rule 101 (coproc -> COPROC shell_command .)
    NEWLINE         reduce using rule 101 (coproc -> COPROC shell_command .)
    DO              reduce using rule 101 (coproc -> COPROC shell_command .)
    THEN            reduce using rule 101 (coproc -> COPROC shell_command .)
    }               reduce using rule 101 (coproc -> COPROC shell_command .)
    )               reduce using rule 101 (coproc -> COPROC shell_command .)
    DONE            reduce using rule 101 (coproc -> COPROC shell_command .)
    FI              reduce using rule 101 (coproc -> COPROC shell_command .)
    ELSE            reduce using rule 101 (coproc -> COPROC shell_command .)
    ELIF            reduce using rule 101 (coproc -> COPROC shell_command .)
    SEMI_SEMI       reduce using rule 101 (coproc -> COPROC shell_command .)
    SEMI_AND        reduce using rule 101 (coproc -> COPROC shell_command .)
    SEMI_SEMI_AND   reduce using rule 101 (coproc -> COPROC shell_command .)
    ESAC            reduce using rule 101 (coproc -> COPROC shell_command .)
    >               shift and go to state 41
    <               shift and go to state 40
    NUMBER          shift and go to state 9
    REDIR_WORD      shift and go to state 7
    GREATER_GREATER shift and go to state 28
    GREATER_BAR     shift and go to state 11
    LESS_GREATER    shift and go to state 33
    LESS_LESS       shift and go to state 3
    LESS_LESS_MINUS shift and go to state 18
    LESS_LESS_LESS  shift and go to state 14
    LESS_AND        shift and go to state 17
    GREATER_AND     shift and go to state 47
    AND_GREATER     shift and go to state 45
    AND_GREATER_GREATER shift and go to state 37

    redirection                    shift and go to state 98
    redirection_list               shift and go to state 178

state 115

    (105) coproc -> COPROC simple_command .
    (57) simple_command -> simple_command . simple_command_element
    (51) simple_command_element -> . WORD
    (52) simple_command_element -> . ASSIGNMENT_WORD
    (53) simple_command_element -> . redirection
    (7) redirection -> . > WORD
    (8) redirection -> . < WORD
    (9) redirection -> . NUMBER > WORD
    (10) redirection -> . NUMBER < WORD
    (11) redirection -> . REDIR_WORD > WORD
    (12) redirection -> . REDIR_WORD < WORD
    (13) redirection -> . GREATER_GREATER WORD
    (14) redirection -> . NUMBER GREATER_GREATER WORD
    (15) redirection -> . REDIR_WORD GREATER_GREATER WORD
    (16) redirection -> . GREATER_BAR WORD
    (17) redirection -> . NUMBER GREATER_BAR WORD
    (18) redirection -> . REDIR_WORD GREATER_BAR WORD
    (19) redirection -> . LESS_GREATER WORD
    (20) redirection -> . NUMBER LESS_GREATER WORD
    (21) redirection -> . REDIR_WORD LESS_GREATER WORD
    (22) redirection -> . LESS_LESS WORD
    (23) redirection -> . NUMBER LESS_LESS WORD
    (24) redirection -> . REDIR_WORD LESS_LESS WORD
    (25) redirection -> . LESS_LESS_MINUS WORD
    (26) redirection -> . NUMBER LESS_LESS_MINUS WORD
    (27) redirection -> . REDIR_WORD LESS_LESS_MINUS WORD
    (28) redirection -> . LESS_LESS_LESS WORD
    (29) redirection -> . NUMBER LESS_LESS_LESS WORD
    (30) redirection -> . REDIR_WORD LESS_LESS_LESS WORD
    (31) redirection -> . LESS_AND NUMBER
    (32) redirection -> . NUMBER LESS_AND NUMBER
    (33) redirection -> . REDIR_WORD LESS_AND NUMBER
    (34) redirection -> . GREATER_AND NUMBER
    (35) redirection -> . NUMBER GREATER_AND NUMBER
    (36) redirection -> . REDIR_WORD GREATER_AND NUMBER
    (37) redirection -> . LESS_AND WORD
    (38) redirection -> . NUMBER LESS_AND WORD
    (39) redirection -> . REDIR_WORD LESS_AND WORD
    (40) redirection -> . GREATER_AND WORD
    (41) redirection -> . NUMBER GREATER_AND WORD
    (42) redirection -> . REDIR_WORD GREATER_AND WORD
    (43) redirection -> . GREATER_AND -
    (44) redirection -> . NUMBER GREATER_AND -
    (45) redirection -> . REDIR_WORD GREATER_AND -
    (46) redirection -> . LESS_AND -
    (47) redirection -> . NUMBER LESS_AND -
    (48) redirection -> . REDIR_WORD LESS_AND -
    (49) redirection -> . AND_GREATER WORD
    (50) redirection -> . AND_GREATER_GREATER WORD

    |               reduce using rule 105 (coproc -> COPROC simple_command .)
    BAR_AND         reduce using rule 105 (coproc -> COPROC simple_command .)
    &               reduce using rule 105 (coproc -> COPROC simple_command .)
    ;               reduce using rule 105 (coproc -> COPROC simple_command .)
    AND_AND         reduce using rule 105 (coproc -> COPROC simple_command .)
    OR_OR           reduce using rule 105 (coproc -> COPROC simple_command .)
    NEWLINE         reduce using rule 105 (coproc -> COPROC simple_command .)
    DO              reduce using rule 105 (coproc -> COPROC simple_command .)
    THEN            reduce using rule 105 (coproc -> COPROC simple_command .)
    }               reduce using rule 105 (coproc -> COPROC simple_command .)
    )               reduce using rule 105 (coproc -> COPROC simple_command .)
    DONE            reduce using rule 105 (coproc -> COPROC simple_command .)
    FI              reduce using rule 105 (coproc -> COPROC simple_command .)
    ELSE            reduce using rule 105 (coproc -> COPROC simple_command .)
    ELIF            reduce using rule 105 (coproc -> COPROC simple_command .)
    SEMI_SEMI       reduce using rule 105 (coproc -> COPROC simple_command .)
    SEMI_AND        reduce using rule 105 (coproc -> COPROC simple_command .)
    SEMI_SEMI_AND   reduce using rule 105 (coproc -> COPROC simple_command .)
    ESAC            reduce using rule 105 (coproc -> COPROC simple_command .)
    WORD            shift and go to state 101
    ASSIGNMENT_WORD shift and go to state 26
    >               shift and go to state 41
    <               shift and go to state 40
    NUMBER          shift and go to state 9
    REDIR_WORD      shift and go to state 7
    GREATER_GREATER shift and go to state 28
    GREATER_BAR     shift and go to state 11
    LESS_GREATER    shift and go to state 33
    LESS_LESS       shift and go to state 3
    LESS_LESS_MINUS shift and go to state 18
    LESS_LESS_LESS  shift and go to state 14
    LESS_AND        shift and go to state 17
    GREATER_AND     shift and go to state 47
    AND_GREATER     shift and go to state 45
    AND_GREATER_GREATER shift and go to state 37

    simple_command_element         shift and go to state 100
    redirection                    shift and go to state 50

state 116

    (103) coproc -> COPROC WORD . shell_command
    (104) coproc -> COPROC WORD . shell_command redirection_list
    (51) simple_command_element -> WORD .
    (63) shell_command -> . for_command
    (64) shell_command -> . case_command
    (65) shell_command -> . WHILE compound_list DO compound_list DONE
    (66) shell_command -> . UNTIL compound_list DO compound_list DONE
    (67) shell_command -> . select_command
    (68) shell_command -> . if_command
    (69) shell_command -> . subshell
    (70) shell_command -> . group_command
    (71) shell_command -> . arith_command
    (72) shell_command -> . cond_command
    (73) shell_command -> . arith_for_command
    (74) for_command -> . FOR WORD newline_list DO compound_list DONE
    (75) for_command -> . FOR WORD newline_list { compound_list }
    (76) for_command -> . FOR WORD ; newline_list DO compound_list DONE
    (77) for_command -> . FOR WORD ; newline_list { compound_list }
    (78) for_command -> . FOR WORD newline_list IN word_list list_terminator newline_list DO compound_list DONE
    (79) for_command -> . FOR WORD newline_list IN word_list list_terminator newline_list { compound_list }
    (80) for_command -> . FOR WORD newline_list IN list_terminator newline_list DO compound_list DONE
    (81) for_command -> . FOR WORD newline_list IN list_terminator newline_list { compound_list }
    (92) case_command -> . CASE WORD newline_list IN newline_list ESAC
    (93) case_command -> . CASE WORD newline_list IN case_clause_sequence newline_list ESAC
    (94) case_command -> . CASE WORD newline_list IN case_clause ESAC
    (86) select_command -> . SELECT WORD newline_list DO list DONE
    (87) select_command -> . SELECT WORD newline_list { list }
    (88) select_command -> . SELECT WORD ; newline_list DO list DONE
    (89) select_command -> . SELECT WORD ; newline_list { list }
    (90) select_command -> . SELECT WORD newline_list IN word_list list_terminator newline_list DO list DONE
    (91) select_command -> . SELECT WORD newline_list IN word_list list_terminator newline_list { list }
    (106) if_command -> . IF compound_list THEN compound_list FI
    (107) if_command -> . IF compound_list THEN compound_list ELSE compound_list FI
    (108) if_command -> . IF compound_list THEN compound_list elif_clause FI
    (100) subshell -> . ( compound_list )
    (109) group_command -> . { compound_list }
    (110) arith_command -> . ARITH_CMD
    (111) cond_command -> . COND_START COND_CMD COND_END
    (82) arith_for_command -> . FOR ARITH_FOR_EXPRS list_terminator newline_list DO compound_list DONE
    (83) arith_for_command -> . FOR ARITH_FOR_EXPRS list_terminator newline_list { compound_list }
    (84) arith_for_command -> . FOR ARITH_FOR_EXPRS DO compound_list DONE
    (85) arith_for_command -> . FOR ARITH_FOR_EXPRS { compound_list }

    WORD            reduce using rule 51 (simple_command_element -> WORD .)
    ASSIGNMENT_WORD reduce using rule 51 (simple_command_element -> WORD .)
    >               reduce using rule 51 (simple_command_element -> WORD .)
    <               reduce using rule 51 (simple_command_element -> WORD .)
    NUMBER          reduce using rule 51 (simple_command_element -> WORD .)
    REDIR_WORD      reduce using rule 51 (simple_command_element -> WORD .)
    GREATER_GREATER reduce using rule 51 (simple_command_element -> WORD .)
    GREATER_BAR     reduce using rule 51 (simple_command_element -> WORD .)
    LESS_GREATER    reduce using rule 51 (simple_command_element -> WORD .)
    LESS_LESS       reduce using rule 51 (simple_command_element -> WORD .)
    LESS_LESS_MINUS reduce using rule 51 (simple_command_element -> WORD .)
    LESS_LESS_LESS  reduce using rule 51 (simple_command_element -> WORD .)
    LESS_AND        reduce using rule 51 (simple_command_element -> WORD .)
    GREATER_AND     reduce using rule 51 (simple_command_element -> WORD .)
    AND_GREATER     reduce using rule 51 (simple_command_element -> WORD .)
    AND_GREATER_GREATER reduce using rule 51 (simple_command_element -> WORD .)
    |               reduce using rule 51 (simple_command_element -> WORD .)
    BAR_AND         reduce using rule 51 (simple_command_element -> WORD .)
    &               reduce using rule 51 (simple_command_element -> WORD .)
    ;               reduce using rule 51 (simple_command_element -> WORD .)
    AND_AND         reduce using rule 51 (simple_command_element -> WORD .)
    OR_OR           reduce using rule 51 (simple_command_element -> WORD .)
    NEWLINE         reduce using rule 51 (simple_command_element -> WORD .)
    DO              reduce using rule 51 (simple_command_element -> WORD .)
    THEN            reduce using rule 51 (simple_command_element -> WORD .)
    }               reduce using rule 51 (simple_command_element -> WORD .)
    )               reduce using rule 51 (simple_command_element -> WORD .)
    DONE            reduce using rule 51 (simple_command_element -> WORD .)
    FI              reduce using rule 51 (simple_command_element -> WORD .)
    ELSE            reduce using rule 51 (simple_command_element -> WORD .)
    ELIF            reduce using rule 51 (simple_command_element -> WORD .)
    SEMI_SEMI       reduce using rule 51 (simple_command_element -> WORD .)
    SEMI_AND        reduce using rule 51 (simple_command_element -> WORD .)
    SEMI_SEMI_AND   reduce using rule 51 (simple_command_element -> WORD .)
    ESAC            reduce using rule 51 (simple_command_element -> WORD .)
    WHILE           shift and go to state 34
    UNTIL           shift and go to state 4
    FOR             shift and go to state 31
    CASE            shift and go to state 51
    SELECT          shift and go to state 39
    IF              shift and go to state 5
    (               shift and go to state 36
    {               shift and go to state 19
    ARITH_CMD       shift and go to state 46
    COND_START      shift and go to state 22

    arith_command                  shift and go to state 16
    select_command                 shift and go to state 6
    case_command                   shift and go to state 35
    shell_command                  shift and go to state 179
    group_command                  shift and go to state 20
    arith_for_command              shift and go to state 15
    cond_command                   shift and go to state 30
    subshell                       shift and go to state 21
    for_command                    shift and go to state 43
    if_command                     shift and go to state 38

state 117

    (49) redirection -> AND_GREATER WORD .

    >               reduce using rule 49 (redirection -> AND_GREATER WORD .)
    <               reduce using rule 49 (redirection -> AND_GREATER WORD .)
    NUMBER          reduce using rule 49 (redirection -> AND_GREATER WORD .)
    REDIR_WORD      reduce using rule 49 (redirection -> AND_GREATER WORD .)
    GREATER_GREATER reduce using rule 49 (redirection -> AND_GREATER WORD .)
    GREATER_BAR     reduce using rule 49 (redirection -> AND_GREATER WORD .)
    LESS_GREATER    reduce using rule 49 (redirection -> AND_GREATER WORD .)
    LESS_LESS       reduce using rule 49 (redirection -> AND_GREATER WORD .)
    LESS_LESS_MINUS reduce using rule 49 (redirection -> AND_GREATER WORD .)
    LESS_LESS_LESS  reduce using rule 49 (redirection -> AND_GREATER WORD .)
    LESS_AND        reduce using rule 49 (redirection -> AND_GREATER WORD .)
    GREATER_AND     reduce using rule 49 (redirection -> AND_GREATER WORD .)
    AND_GREATER     reduce using rule 49 (redirection -> AND_GREATER WORD .)
    AND_GREATER_GREATER reduce using rule 49 (redirection -> AND_GREATER WORD .)
    |               reduce using rule 49 (redirection -> AND_GREATER WORD .)
    BAR_AND         reduce using rule 49 (redirection -> AND_GREATER WORD .)
    &               reduce using rule 49 (redirection -> AND_GREATER WORD .)
    ;               reduce using rule 49 (redirection -> AND_GREATER WORD .)
    AND_AND         reduce using rule 49 (redirection -> AND_GREATER WORD .)
    OR_OR           reduce using rule 49 (redirection -> AND_GREATER WORD .)
    NEWLINE         reduce using rule 49 (redirection -> AND_GREATER WORD .)
    DO              reduce using rule 49 (redirection -> AND_GREATER WORD .)
    THEN            reduce using rule 49 (redirection -> AND_GREATER WORD .)
    }               reduce using rule 49 (redirection -> AND_GREATER WORD .)
    )               reduce using rule 49 (redirection -> AND_GREATER WORD .)
    DONE            reduce using rule 49 (redirection -> AND_GREATER WORD .)
    FI              reduce using rule 49 (redirection -> AND_GREATER WORD .)
    ELSE            reduce using rule 49 (redirection -> AND_GREATER WORD .)
    ELIF            reduce using rule 49 (redirection -> AND_GREATER WORD .)
    SEMI_SEMI       reduce using rule 49 (redirection -> AND_GREATER WORD .)
    SEMI_AND        reduce using rule 49 (redirection -> AND_GREATER WORD .)
    SEMI_SEMI_AND   reduce using rule 49 (redirection -> AND_GREATER WORD .)
    ESAC            reduce using rule 49 (redirection -> AND_GREATER WORD .)
    WORD            reduce using rule 49 (redirection -> AND_GREATER WORD .)
    ASSIGNMENT_WORD reduce using rule 49 (redirection -> AND_GREATER WORD .)


state 118

    (43) redirection -> GREATER_AND - .

    >               reduce using rule 43 (redirection -> GREATER_AND - .)
    <               reduce using rule 43 (redirection -> GREATER_AND - .)
    NUMBER          reduce using rule 43 (redirection -> GREATER_AND - .)
    REDIR_WORD      reduce using rule 43 (redirection -> GREATER_AND - .)
    GREATER_GREATER reduce using rule 43 (redirection -> GREATER_AND - .)
    GREATER_BAR     reduce using rule 43 (redirection -> GREATER_AND - .)
    LESS_GREATER    reduce using rule 43 (redirection -> GREATER_AND - .)
    LESS_LESS       reduce using rule 43 (redirection -> GREATER_AND - .)
    LESS_LESS_MINUS reduce using rule 43 (redirection -> GREATER_AND - .)
    LESS_LESS_LESS  reduce using rule 43 (redirection -> GREATER_AND - .)
    LESS_AND        reduce using rule 43 (redirection -> GREATER_AND - .)
    GREATER_AND     reduce using rule 43 (redirection -> GREATER_AND - .)
    AND_GREATER     reduce using rule 43 (redirection -> GREATER_AND - .)
    AND_GREATER_GREATER reduce using rule 43 (redirection -> GREATER_AND - .)
    |               reduce using rule 43 (redirection -> GREATER_AND - .)
    BAR_AND         reduce using rule 43 (redirection -> GREATER_AND - .)
    &               reduce using rule 43 (redirection -> GREATER_AND - .)
    ;               reduce using rule 43 (redirection -> GREATER_AND - .)
    AND_AND         reduce using rule 43 (redirection -> GREATER_AND - .)
    OR_OR           reduce using rule 43 (redirection -> GREATER_AND - .)
    NEWLINE         reduce using rule 43 (redirection -> GREATER_AND - .)
    DO              reduce using rule 43 (redirection -> GREATER_AND - .)
    THEN            reduce using rule 43 (redirection -> GREATER_AND - .)
    }               reduce using rule 43 (redirection -> GREATER_AND - .)
    )               reduce using rule 43 (redirection -> GREATER_AND - .)
    DONE            reduce using rule 43 (redirection -> GREATER_AND - .)
    FI              reduce using rule 43 (redirection -> GREATER_AND - .)
    ELSE            reduce using rule 43 (redirection -> GREATER_AND - .)
    ELIF            reduce using rule 43 (redirection -> GREATER_AND - .)
    SEMI_SEMI       reduce using rule 43 (redirection -> GREATER_AND - .)
    SEMI_AND        reduce using rule 43 (redirection -> GREATER_AND - .)
    SEMI_SEMI_AND   reduce using rule 43 (redirection -> GREATER_AND - .)
    ESAC            reduce using rule 43 (redirection -> GREATER_AND - .)
    WORD            reduce using rule 43 (redirection -> GREATER_AND - .)
    ASSIGNMENT_WORD reduce using rule 43 (redirection -> GREATER_AND - .)


state 119

    (40) redirection -> GREATER_AND WORD .

    >               reduce using rule 40 (redirection -> GREATER_AND WORD .)
    <               reduce using rule 40 (redirection -> GREATER_AND WORD .)
    NUMBER          reduce using rule 40 (redirection -> GREATER_AND WORD .)
    REDIR_WORD      reduce using rule 40 (redirection -> GREATER_AND WORD .)
    GREATER_GREATER reduce using rule 40 (redirection -> GREATER_AND WORD .)
    GREATER_BAR     reduce using rule 40 (redirection -> GREATER_AND WORD .)
    LESS_GREATER    reduce using rule 40 (redirection -> GREATER_AND WORD .)
    LESS_LESS       reduce using rule 40 (redirection -> GREATER_AND WORD .)
    LESS_LESS_MINUS reduce using rule 40 (redirection -> GREATER_AND WORD .)
    LESS_LESS_LESS  reduce using rule 40 (redirection -> GREATER_AND WORD .)
    LESS_AND        reduce using rule 40 (redirection -> GREATER_AND WORD .)
    GREATER_AND     reduce using rule 40 (redirection -> GREATER_AND WORD .)
    AND_GREATER     reduce using rule 40 (redirection -> GREATER_AND WORD .)
    AND_GREATER_GREATER reduce using rule 40 (redirection -> GREATER_AND WORD .)
    |               reduce using rule 40 (redirection -> GREATER_AND WORD .)
    BAR_AND         reduce using rule 40 (redirection -> GREATER_AND WORD .)
    &               reduce using rule 40 (redirection -> GREATER_AND WORD .)
    ;               reduce using rule 40 (redirection -> GREATER_AND WORD .)
    AND_AND         reduce using rule 40 (redirection -> GREATER_AND WORD .)
    OR_OR           reduce using rule 40 (redirection -> GREATER_AND WORD .)
    NEWLINE         reduce using rule 40 (redirection -> GREATER_AND WORD .)
    DO              reduce using rule 40 (redirection -> GREATER_AND WORD .)
    THEN            reduce using rule 40 (redirection -> GREATER_AND WORD .)
    }               reduce using rule 40 (redirection -> GREATER_AND WORD .)
    )               reduce using rule 40 (redirection -> GREATER_AND WORD .)
    DONE            reduce using rule 40 (redirection -> GREATER_AND WORD .)
    FI              reduce using rule 40 (redirection -> GREATER_AND WORD .)
    ELSE            reduce using rule 40 (redirection -> GREATER_AND WORD .)
    ELIF            reduce using rule 40 (redirection -> GREATER_AND WORD .)
    SEMI_SEMI       reduce using rule 40 (redirection -> GREATER_AND WORD .)
    SEMI_AND        reduce using rule 40 (redirection -> GREATER_AND WORD .)
    SEMI_SEMI_AND   reduce using rule 40 (redirection -> GREATER_AND WORD .)
    ESAC            reduce using rule 40 (redirection -> GREATER_AND WORD .)
    WORD            reduce using rule 40 (redirection -> GREATER_AND WORD .)
    ASSIGNMENT_WORD reduce using rule 40 (redirection -> GREATER_AND WORD .)


state 120

    (34) redirection -> GREATER_AND NUMBER .

    >               reduce using rule 34 (redirection -> GREATER_AND NUMBER .)
    <               reduce using rule 34 (redirection -> GREATER_AND NUMBER .)
    NUMBER          reduce using rule 34 (redirection -> GREATER_AND NUMBER .)
    REDIR_WORD      reduce using rule 34 (redirection -> GREATER_AND NUMBER .)
    GREATER_GREATER reduce using rule 34 (redirection -> GREATER_AND NUMBER .)
    GREATER_BAR     reduce using rule 34 (redirection -> GREATER_AND NUMBER .)
    LESS_GREATER    reduce using rule 34 (redirection -> GREATER_AND NUMBER .)
    LESS_LESS       reduce using rule 34 (redirection -> GREATER_AND NUMBER .)
    LESS_LESS_MINUS reduce using rule 34 (redirection -> GREATER_AND NUMBER .)
    LESS_LESS_LESS  reduce using rule 34 (redirection -> GREATER_AND NUMBER .)
    LESS_AND        reduce using rule 34 (redirection -> GREATER_AND NUMBER .)
    GREATER_AND     reduce using rule 34 (redirection -> GREATER_AND NUMBER .)
    AND_GREATER     reduce using rule 34 (redirection -> GREATER_AND NUMBER .)
    AND_GREATER_GREATER reduce using rule 34 (redirection -> GREATER_AND NUMBER .)
    |               reduce using rule 34 (redirection -> GREATER_AND NUMBER .)
    BAR_AND         reduce using rule 34 (redirection -> GREATER_AND NUMBER .)
    &               reduce using rule 34 (redirection -> GREATER_AND NUMBER .)
    ;               reduce using rule 34 (redirection -> GREATER_AND NUMBER .)
    AND_AND         reduce using rule 34 (redirection -> GREATER_AND NUMBER .)
    OR_OR           reduce using rule 34 (redirection -> GREATER_AND NUMBER .)
    NEWLINE         reduce using rule 34 (redirection -> GREATER_AND NUMBER .)
    DO              reduce using rule 34 (redirection -> GREATER_AND NUMBER .)
    THEN            reduce using rule 34 (redirection -> GREATER_AND NUMBER .)
    }               reduce using rule 34 (redirection -> GREATER_AND NUMBER .)
    )               reduce using rule 34 (redirection -> GREATER_AND NUMBER .)
    DONE            reduce using rule 34 (redirection -> GREATER_AND NUMBER .)
    FI              reduce using rule 34 (redirection -> GREATER_AND NUMBER .)
    ELSE            reduce using rule 34 (redirection -> GREATER_AND NUMBER .)
    ELIF            reduce using rule 34 (redirection -> GREATER_AND NUMBER .)
    SEMI_SEMI       reduce using rule 34 (redirection -> GREATER_AND NUMBER .)
    SEMI_AND        reduce using rule 34 (redirection -> GREATER_AND NUMBER .)
    SEMI_SEMI_AND   reduce using rule 34 (redirection -> GREATER_AND NUMBER .)
    ESAC            reduce using rule 34 (redirection -> GREATER_AND NUMBER .)
    WORD            reduce using rule 34 (redirection -> GREATER_AND NUMBER .)
    ASSIGNMENT_WORD reduce using rule 34 (redirection -> GREATER_AND NUMBER .)


state 121

    (163) timespec -> TIME TIMEOPT .
    (164) timespec -> TIME TIMEOPT . TIMEIGN

    BANG            reduce using rule 163 (timespec -> TIME TIMEOPT .)
    NEWLINE         reduce using rule 163 (timespec -> TIME TIMEOPT .)
    ;               reduce using rule 163 (timespec -> TIME TIMEOPT .)
    TIME            reduce using rule 163 (timespec -> TIME TIMEOPT .)
    WHILE           reduce using rule 163 (timespec -> TIME TIMEOPT .)
    UNTIL           reduce using rule 163 (timespec -> TIME TIMEOPT .)
    WORD            reduce using rule 163 (timespec -> TIME TIMEOPT .)
    FUNCTION        reduce using rule 163 (timespec -> TIME TIMEOPT .)
    COPROC          reduce using rule 163 (timespec -> TIME TIMEOPT .)
    ASSIGNMENT_WORD reduce using rule 163 (timespec -> TIME TIMEOPT .)
    FOR             reduce using rule 163 (timespec -> TIME TIMEOPT .)
    CASE            reduce using rule 163 (timespec -> TIME TIMEOPT .)
    SELECT          reduce using rule 163 (timespec -> TIME TIMEOPT .)
    IF              reduce using rule 163 (timespec -> TIME TIMEOPT .)
    (               reduce using rule 163 (timespec -> TIME TIMEOPT .)
    {               reduce using rule 163 (timespec -> TIME TIMEOPT .)
    ARITH_CMD       reduce using rule 163 (timespec -> TIME TIMEOPT .)
    COND_START      reduce using rule 163 (timespec -> TIME TIMEOPT .)
    >               reduce using rule 163 (timespec -> TIME TIMEOPT .)
    <               reduce using rule 163 (timespec -> TIME TIMEOPT .)
    NUMBER          reduce using rule 163 (timespec -> TIME TIMEOPT .)
    REDIR_WORD      reduce using rule 163 (timespec -> TIME TIMEOPT .)
    GREATER_GREATER reduce using rule 163 (timespec -> TIME TIMEOPT .)
    GREATER_BAR     reduce using rule 163 (timespec -> TIME TIMEOPT .)
    LESS_GREATER    reduce using rule 163 (timespec -> TIME TIMEOPT .)
    LESS_LESS       reduce using rule 163 (timespec -> TIME TIMEOPT .)
    LESS_LESS_MINUS reduce using rule 163 (timespec -> TIME TIMEOPT .)
    LESS_LESS_LESS  reduce using rule 163 (timespec -> TIME TIMEOPT .)
    LESS_AND        reduce using rule 163 (timespec -> TIME TIMEOPT .)
    GREATER_AND     reduce using rule 163 (timespec -> TIME TIMEOPT .)
    AND_GREATER     reduce using rule 163 (timespec -> TIME TIMEOPT .)
    AND_GREATER_GREATER reduce using rule 163 (timespec -> TIME TIMEOPT .)
    TIMEIGN         shift and go to state 180


state 122

    (96) function_def -> FUNCTION WORD . ( ) newline_list function_body
    (97) function_def -> FUNCTION WORD . newline_list function_body
    (144) newline_list -> .
    (145) newline_list -> . newline_list NEWLINE

  ! shift/reduce conflict for ( resolved as shift
    (               shift and go to state 182
    NEWLINE         reduce using rule 144 (newline_list -> .)
    WHILE           reduce using rule 144 (newline_list -> .)
    UNTIL           reduce using rule 144 (newline_list -> .)
    FOR             reduce using rule 144 (newline_list -> .)
    CASE            reduce using rule 144 (newline_list -> .)
    SELECT          reduce using rule 144 (newline_list -> .)
    IF              reduce using rule 144 (newline_list -> .)
    {               reduce using rule 144 (newline_list -> .)
    ARITH_CMD       reduce using rule 144 (newline_list -> .)
    COND_START      reduce using rule 144 (newline_list -> .)

  ! (               [ reduce using rule 144 (newline_list -> .) ]

    newline_list                   shift and go to state 181

state 123

    (92) case_command -> CASE WORD . newline_list IN newline_list ESAC
    (93) case_command -> CASE WORD . newline_list IN case_clause_sequence newline_list ESAC
    (94) case_command -> CASE WORD . newline_list IN case_clause ESAC
    (144) newline_list -> .
    (145) newline_list -> . newline_list NEWLINE

    IN              reduce using rule 144 (newline_list -> .)
    NEWLINE         reduce using rule 144 (newline_list -> .)

    newline_list                   shift and go to state 183

state 124

    (159) pipeline -> pipeline | . newline_list pipeline
    (144) newline_list -> .
    (145) newline_list -> . newline_list NEWLINE

    NEWLINE         reduce using rule 144 (newline_list -> .)
    WHILE           reduce using rule 144 (newline_list -> .)
    UNTIL           reduce using rule 144 (newline_list -> .)
    WORD            reduce using rule 144 (newline_list -> .)
    FUNCTION        reduce using rule 144 (newline_list -> .)
    COPROC          reduce using rule 144 (newline_list -> .)
    ASSIGNMENT_WORD reduce using rule 144 (newline_list -> .)
    FOR             reduce using rule 144 (newline_list -> .)
    CASE            reduce using rule 144 (newline_list -> .)
    SELECT          reduce using rule 144 (newline_list -> .)
    IF              reduce using rule 144 (newline_list -> .)
    (               reduce using rule 144 (newline_list -> .)
    {               reduce using rule 144 (newline_list -> .)
    ARITH_CMD       reduce using rule 144 (newline_list -> .)
    COND_START      reduce using rule 144 (newline_list -> .)
    >               reduce using rule 144 (newline_list -> .)
    <               reduce using rule 144 (newline_list -> .)
    NUMBER          reduce using rule 144 (newline_list -> .)
    REDIR_WORD      reduce using rule 144 (newline_list -> .)
    GREATER_GREATER reduce using rule 144 (newline_list -> .)
    GREATER_BAR     reduce using rule 144 (newline_list -> .)
    LESS_GREATER    reduce using rule 144 (newline_list -> .)
    LESS_LESS       reduce using rule 144 (newline_list -> .)
    LESS_LESS_MINUS reduce using rule 144 (newline_list -> .)
    LESS_LESS_LESS  reduce using rule 144 (newline_list -> .)
    LESS_AND        reduce using rule 144 (newline_list -> .)
    GREATER_AND     reduce using rule 144 (newline_list -> .)
    AND_GREATER     reduce using rule 144 (newline_list -> .)
    AND_GREATER_GREATER reduce using rule 144 (newline_list -> .)

    newline_list                   shift and go to state 184

state 125

    (160) pipeline -> pipeline BAR_AND . newline_list pipeline
    (144) newline_list -> .
    (145) newline_list -> . newline_list NEWLINE

    NEWLINE         reduce using rule 144 (newline_list -> .)
    WHILE           reduce using rule 144 (newline_list -> .)
    UNTIL           reduce using rule 144 (newline_list -> .)
    WORD            reduce using rule 144 (newline_list -> .)
    FUNCTION        reduce using rule 144 (newline_list -> .)
    COPROC          reduce using rule 144 (newline_list -> .)
    ASSIGNMENT_WORD reduce using rule 144 (newline_list -> .)
    FOR             reduce using rule 144 (newline_list -> .)
    CASE            reduce using rule 144 (newline_list -> .)
    SELECT          reduce using rule 144 (newline_list -> .)
    IF              reduce using rule 144 (newline_list -> .)
    (               reduce using rule 144 (newline_list -> .)
    {               reduce using rule 144 (newline_list -> .)
    ARITH_CMD       reduce using rule 144 (newline_list -> .)
    COND_START      reduce using rule 144 (newline_list -> .)
    >               reduce using rule 144 (newline_list -> .)
    <               reduce using rule 144 (newline_list -> .)
    NUMBER          reduce using rule 144 (newline_list -> .)
    REDIR_WORD      reduce using rule 144 (newline_list -> .)
    GREATER_GREATER reduce using rule 144 (newline_list -> .)
    GREATER_BAR     reduce using rule 144 (newline_list -> .)
    LESS_GREATER    reduce using rule 144 (newline_list -> .)
    LESS_LESS       reduce using rule 144 (newline_list -> .)
    LESS_LESS_MINUS reduce using rule 144 (newline_list -> .)
    LESS_LESS_LESS  reduce using rule 144 (newline_list -> .)
    LESS_AND        reduce using rule 144 (newline_list -> .)
    GREATER_AND     reduce using rule 144 (newline_list -> .)
    AND_GREATER     reduce using rule 144 (newline_list -> .)
    AND_GREATER_GREATER reduce using rule 144 (newline_list -> .)

    newline_list                   shift and go to state 185

state 126

    (95) function_def -> WORD ( . ) newline_list function_body

    )               shift and go to state 186


state 127

    (2) inputunit_list -> inputunit_list inputunit .

    NEWLINE         reduce using rule 2 (inputunit_list -> inputunit_list inputunit .)
    BANG            reduce using rule 2 (inputunit_list -> inputunit_list inputunit .)
    TIME            reduce using rule 2 (inputunit_list -> inputunit_list inputunit .)
    WHILE           reduce using rule 2 (inputunit_list -> inputunit_list inputunit .)
    UNTIL           reduce using rule 2 (inputunit_list -> inputunit_list inputunit .)
    WORD            reduce using rule 2 (inputunit_list -> inputunit_list inputunit .)
    FUNCTION        reduce using rule 2 (inputunit_list -> inputunit_list inputunit .)
    COPROC          reduce using rule 2 (inputunit_list -> inputunit_list inputunit .)
    ASSIGNMENT_WORD reduce using rule 2 (inputunit_list -> inputunit_list inputunit .)
    FOR             reduce using rule 2 (inputunit_list -> inputunit_list inputunit .)
    CASE            reduce using rule 2 (inputunit_list -> inputunit_list inputunit .)
    SELECT          reduce using rule 2 (inputunit_list -> inputunit_list inputunit .)
    IF              reduce using rule 2 (inputunit_list -> inputunit_list inputunit .)
    (               reduce using rule 2 (inputunit_list -> inputunit_list inputunit .)
    {               reduce using rule 2 (inputunit_list -> inputunit_list inputunit .)
    ARITH_CMD       reduce using rule 2 (inputunit_list -> inputunit_list inputunit .)
    COND_START      reduce using rule 2 (inputunit_list -> inputunit_list inputunit .)
    >               reduce using rule 2 (inputunit_list -> inputunit_list inputunit .)
    <               reduce using rule 2 (inputunit_list -> inputunit_list inputunit .)
    NUMBER          reduce using rule 2 (inputunit_list -> inputunit_list inputunit .)
    REDIR_WORD      reduce using rule 2 (inputunit_list -> inputunit_list inputunit .)
    GREATER_GREATER reduce using rule 2 (inputunit_list -> inputunit_list inputunit .)
    GREATER_BAR     reduce using rule 2 (inputunit_list -> inputunit_list inputunit .)
    LESS_GREATER    reduce using rule 2 (inputunit_list -> inputunit_list inputunit .)
    LESS_LESS       reduce using rule 2 (inputunit_list -> inputunit_list inputunit .)
    LESS_LESS_MINUS reduce using rule 2 (inputunit_list -> inputunit_list inputunit .)
    LESS_LESS_LESS  reduce using rule 2 (inputunit_list -> inputunit_list inputunit .)
    LESS_AND        reduce using rule 2 (inputunit_list -> inputunit_list inputunit .)
    GREATER_AND     reduce using rule 2 (inputunit_list -> inputunit_list inputunit .)
    AND_GREATER     reduce using rule 2 (inputunit_list -> inputunit_list inputunit .)
    AND_GREATER_GREATER reduce using rule 2 (inputunit_list -> inputunit_list inputunit .)
    $end            reduce using rule 2 (inputunit_list -> inputunit_list inputunit .)


state 128

    (145) newline_list -> newline_list NEWLINE .

    NEWLINE         reduce using rule 145 (newline_list -> newline_list NEWLINE .)
    BANG            reduce using rule 145 (newline_list -> newline_list NEWLINE .)
    TIME            reduce using rule 145 (newline_list -> newline_list NEWLINE .)
    WHILE           reduce using rule 145 (newline_list -> newline_list NEWLINE .)
    UNTIL           reduce using rule 145 (newline_list -> newline_list NEWLINE .)
    WORD            reduce using rule 145 (newline_list -> newline_list NEWLINE .)
    FUNCTION        reduce using rule 145 (newline_list -> newline_list NEWLINE .)
    COPROC          reduce using rule 145 (newline_list -> newline_list NEWLINE .)
    ASSIGNMENT_WORD reduce using rule 145 (newline_list -> newline_list NEWLINE .)
    FOR             reduce using rule 145 (newline_list -> newline_list NEWLINE .)
    CASE            reduce using rule 145 (newline_list -> newline_list NEWLINE .)
    SELECT          reduce using rule 145 (newline_list -> newline_list NEWLINE .)
    IF              reduce using rule 145 (newline_list -> newline_list NEWLINE .)
    (               reduce using rule 145 (newline_list -> newline_list NEWLINE .)
    {               reduce using rule 145 (newline_list -> newline_list NEWLINE .)
    ARITH_CMD       reduce using rule 145 (newline_list -> newline_list NEWLINE .)
    COND_START      reduce using rule 145 (newline_list -> newline_list NEWLINE .)
    >               reduce using rule 145 (newline_list -> newline_list NEWLINE .)
    <               reduce using rule 145 (newline_list -> newline_list NEWLINE .)
    NUMBER          reduce using rule 145 (newline_list -> newline_list NEWLINE .)
    REDIR_WORD      reduce using rule 145 (newline_list -> newline_list NEWLINE .)
    GREATER_GREATER reduce using rule 145 (newline_list -> newline_list NEWLINE .)
    GREATER_BAR     reduce using rule 145 (newline_list -> newline_list NEWLINE .)
    LESS_GREATER    reduce using rule 145 (newline_list -> newline_list NEWLINE .)
    LESS_LESS       reduce using rule 145 (newline_list -> newline_list NEWLINE .)
    LESS_LESS_MINUS reduce using rule 145 (newline_list -> newline_list NEWLINE .)
    LESS_LESS_LESS  reduce using rule 145 (newline_list -> newline_list NEWLINE .)
    LESS_AND        reduce using rule 145 (newline_list -> newline_list NEWLINE .)
    GREATER_AND     reduce using rule 145 (newline_list -> newline_list NEWLINE .)
    AND_GREATER     reduce using rule 145 (newline_list -> newline_list NEWLINE .)
    AND_GREATER_GREATER reduce using rule 145 (newline_list -> newline_list NEWLINE .)
    DO              reduce using rule 145 (newline_list -> newline_list NEWLINE .)
    IN              reduce using rule 145 (newline_list -> newline_list NEWLINE .)
    SEMI_SEMI       reduce using rule 145 (newline_list -> newline_list NEWLINE .)
    SEMI_AND        reduce using rule 145 (newline_list -> newline_list NEWLINE .)
    SEMI_SEMI_AND   reduce using rule 145 (newline_list -> newline_list NEWLINE .)
    ESAC            reduce using rule 145 (newline_list -> newline_list NEWLINE .)
    }               reduce using rule 145 (newline_list -> newline_list NEWLINE .)
    DONE            reduce using rule 145 (newline_list -> newline_list NEWLINE .)
    THEN            reduce using rule 145 (newline_list -> newline_list NEWLINE .)
    )               reduce using rule 145 (newline_list -> newline_list NEWLINE .)
    FI              reduce using rule 145 (newline_list -> newline_list NEWLINE .)
    ELSE            reduce using rule 145 (newline_list -> newline_list NEWLINE .)
    ELIF            reduce using rule 145 (newline_list -> newline_list NEWLINE .)


state 129

    (131) compound_list -> newline_list list1 .
    (135) list1 -> list1 . AND_AND newline_list list1
    (136) list1 -> list1 . OR_OR newline_list list1
    (137) list1 -> list1 . & newline_list list1
    (138) list1 -> list1 . ; newline_list list1
    (139) list1 -> list1 . NEWLINE newline_list list1
    (132) list0 -> list1 . NEWLINE newline_list
    (133) list0 -> list1 . & newline_list
    (134) list0 -> list1 . ; newline_list

    DO              reduce using rule 131 (compound_list -> newline_list list1 .)
    }               reduce using rule 131 (compound_list -> newline_list list1 .)
    THEN            reduce using rule 131 (compound_list -> newline_list list1 .)
    FI              reduce using rule 131 (compound_list -> newline_list list1 .)
    ELSE            reduce using rule 131 (compound_list -> newline_list list1 .)
    ELIF            reduce using rule 131 (compound_list -> newline_list list1 .)
    SEMI_SEMI       reduce using rule 131 (compound_list -> newline_list list1 .)
    SEMI_AND        reduce using rule 131 (compound_list -> newline_list list1 .)
    SEMI_SEMI_AND   reduce using rule 131 (compound_list -> newline_list list1 .)
    ESAC            reduce using rule 131 (compound_list -> newline_list list1 .)
    DONE            reduce using rule 131 (compound_list -> newline_list list1 .)
    )               reduce using rule 131 (compound_list -> newline_list list1 .)
    AND_AND         shift and go to state 187
    OR_OR           shift and go to state 189
    &               shift and go to state 188
    ;               shift and go to state 190
    NEWLINE         shift and go to state 191


state 130

    (129) list -> newline_list list0 .

    }               reduce using rule 129 (list -> newline_list list0 .)
    FI              reduce using rule 129 (list -> newline_list list0 .)
    SEMI_SEMI       reduce using rule 129 (list -> newline_list list0 .)
    SEMI_AND        reduce using rule 129 (list -> newline_list list0 .)
    SEMI_SEMI_AND   reduce using rule 129 (list -> newline_list list0 .)
    ESAC            reduce using rule 129 (list -> newline_list list0 .)
    ELSE            reduce using rule 129 (list -> newline_list list0 .)
    ELIF            reduce using rule 129 (list -> newline_list list0 .)
    DONE            reduce using rule 129 (list -> newline_list list0 .)
    THEN            reduce using rule 129 (list -> newline_list list0 .)
    DO              reduce using rule 129 (list -> newline_list list0 .)
    )               reduce using rule 129 (list -> newline_list list0 .)


state 131

    (140) list1 -> pipeline_command .

    AND_AND         reduce using rule 140 (list1 -> pipeline_command .)
    OR_OR           reduce using rule 140 (list1 -> pipeline_command .)
    &               reduce using rule 140 (list1 -> pipeline_command .)
    ;               reduce using rule 140 (list1 -> pipeline_command .)
    NEWLINE         reduce using rule 140 (list1 -> pipeline_command .)
    DO              reduce using rule 140 (list1 -> pipeline_command .)
    THEN            reduce using rule 140 (list1 -> pipeline_command .)
    }               reduce using rule 140 (list1 -> pipeline_command .)
    )               reduce using rule 140 (list1 -> pipeline_command .)
    DONE            reduce using rule 140 (list1 -> pipeline_command .)
    FI              reduce using rule 140 (list1 -> pipeline_command .)
    ELSE            reduce using rule 140 (list1 -> pipeline_command .)
    ELIF            reduce using rule 140 (list1 -> pipeline_command .)
    SEMI_SEMI       reduce using rule 140 (list1 -> pipeline_command .)
    SEMI_AND        reduce using rule 140 (list1 -> pipeline_command .)
    SEMI_SEMI_AND   reduce using rule 140 (list1 -> pipeline_command .)
    ESAC            reduce using rule 140 (list1 -> pipeline_command .)


state 132

    (66) shell_command -> UNTIL compound_list DO . compound_list DONE
    (130) compound_list -> . list
    (131) compound_list -> . newline_list list1
    (129) list -> . newline_list list0
    (144) newline_list -> .
    (145) newline_list -> . newline_list NEWLINE

    NEWLINE         reduce using rule 144 (newline_list -> .)
    BANG            reduce using rule 144 (newline_list -> .)
    TIME            reduce using rule 144 (newline_list -> .)
    WHILE           reduce using rule 144 (newline_list -> .)
    UNTIL           reduce using rule 144 (newline_list -> .)
    WORD            reduce using rule 144 (newline_list -> .)
    FUNCTION        reduce using rule 144 (newline_list -> .)
    COPROC          reduce using rule 144 (newline_list -> .)
    ASSIGNMENT_WORD reduce using rule 144 (newline_list -> .)
    FOR             reduce using rule 144 (newline_list -> .)
    CASE            reduce using rule 144 (newline_list -> .)
    SELECT          reduce using rule 144 (newline_list -> .)
    IF              reduce using rule 144 (newline_list -> .)
    (               reduce using rule 144 (newline_list -> .)
    {               reduce using rule 144 (newline_list -> .)
    ARITH_CMD       reduce using rule 144 (newline_list -> .)
    COND_START      reduce using rule 144 (newline_list -> .)
    >               reduce using rule 144 (newline_list -> .)
    <               reduce using rule 144 (newline_list -> .)
    NUMBER          reduce using rule 144 (newline_list -> .)
    REDIR_WORD      reduce using rule 144 (newline_list -> .)
    GREATER_GREATER reduce using rule 144 (newline_list -> .)
    GREATER_BAR     reduce using rule 144 (newline_list -> .)
    LESS_GREATER    reduce using rule 144 (newline_list -> .)
    LESS_LESS       reduce using rule 144 (newline_list -> .)
    LESS_LESS_MINUS reduce using rule 144 (newline_list -> .)
    LESS_LESS_LESS  reduce using rule 144 (newline_list -> .)
    LESS_AND        reduce using rule 144 (newline_list -> .)
    GREATER_AND     reduce using rule 144 (newline_list -> .)
    AND_GREATER     reduce using rule 144 (newline_list -> .)
    AND_GREATER_GREATER reduce using rule 144 (newline_list -> .)

    newline_list                   shift and go to state 56
    compound_list                  shift and go to state 192
    list                           shift and go to state 58

state 133

    (106) if_command -> IF compound_list THEN . compound_list FI
    (107) if_command -> IF compound_list THEN . compound_list ELSE compound_list FI
    (108) if_command -> IF compound_list THEN . compound_list elif_clause FI
    (130) compound_list -> . list
    (131) compound_list -> . newline_list list1
    (129) list -> . newline_list list0
    (144) newline_list -> .
    (145) newline_list -> . newline_list NEWLINE

    NEWLINE         reduce using rule 144 (newline_list -> .)
    BANG            reduce using rule 144 (newline_list -> .)
    TIME            reduce using rule 144 (newline_list -> .)
    WHILE           reduce using rule 144 (newline_list -> .)
    UNTIL           reduce using rule 144 (newline_list -> .)
    WORD            reduce using rule 144 (newline_list -> .)
    FUNCTION        reduce using rule 144 (newline_list -> .)
    COPROC          reduce using rule 144 (newline_list -> .)
    ASSIGNMENT_WORD reduce using rule 144 (newline_list -> .)
    FOR             reduce using rule 144 (newline_list -> .)
    CASE            reduce using rule 144 (newline_list -> .)
    SELECT          reduce using rule 144 (newline_list -> .)
    IF              reduce using rule 144 (newline_list -> .)
    (               reduce using rule 144 (newline_list -> .)
    {               reduce using rule 144 (newline_list -> .)
    ARITH_CMD       reduce using rule 144 (newline_list -> .)
    COND_START      reduce using rule 144 (newline_list -> .)
    >               reduce using rule 144 (newline_list -> .)
    <               reduce using rule 144 (newline_list -> .)
    NUMBER          reduce using rule 144 (newline_list -> .)
    REDIR_WORD      reduce using rule 144 (newline_list -> .)
    GREATER_GREATER reduce using rule 144 (newline_list -> .)
    GREATER_BAR     reduce using rule 144 (newline_list -> .)
    LESS_GREATER    reduce using rule 144 (newline_list -> .)
    LESS_LESS       reduce using rule 144 (newline_list -> .)
    LESS_LESS_MINUS reduce using rule 144 (newline_list -> .)
    LESS_LESS_LESS  reduce using rule 144 (newline_list -> .)
    LESS_AND        reduce using rule 144 (newline_list -> .)
    GREATER_AND     reduce using rule 144 (newline_list -> .)
    AND_GREATER     reduce using rule 144 (newline_list -> .)
    AND_GREATER_GREATER reduce using rule 144 (newline_list -> .)

    newline_list                   shift and go to state 56
    compound_list                  shift and go to state 193
    list                           shift and go to state 58

state 134

    (18) redirection -> REDIR_WORD GREATER_BAR WORD .

    >               reduce using rule 18 (redirection -> REDIR_WORD GREATER_BAR WORD .)
    <               reduce using rule 18 (redirection -> REDIR_WORD GREATER_BAR WORD .)
    NUMBER          reduce using rule 18 (redirection -> REDIR_WORD GREATER_BAR WORD .)
    REDIR_WORD      reduce using rule 18 (redirection -> REDIR_WORD GREATER_BAR WORD .)
    GREATER_GREATER reduce using rule 18 (redirection -> REDIR_WORD GREATER_BAR WORD .)
    GREATER_BAR     reduce using rule 18 (redirection -> REDIR_WORD GREATER_BAR WORD .)
    LESS_GREATER    reduce using rule 18 (redirection -> REDIR_WORD GREATER_BAR WORD .)
    LESS_LESS       reduce using rule 18 (redirection -> REDIR_WORD GREATER_BAR WORD .)
    LESS_LESS_MINUS reduce using rule 18 (redirection -> REDIR_WORD GREATER_BAR WORD .)
    LESS_LESS_LESS  reduce using rule 18 (redirection -> REDIR_WORD GREATER_BAR WORD .)
    LESS_AND        reduce using rule 18 (redirection -> REDIR_WORD GREATER_BAR WORD .)
    GREATER_AND     reduce using rule 18 (redirection -> REDIR_WORD GREATER_BAR WORD .)
    AND_GREATER     reduce using rule 18 (redirection -> REDIR_WORD GREATER_BAR WORD .)
    AND_GREATER_GREATER reduce using rule 18 (redirection -> REDIR_WORD GREATER_BAR WORD .)
    |               reduce using rule 18 (redirection -> REDIR_WORD GREATER_BAR WORD .)
    BAR_AND         reduce using rule 18 (redirection -> REDIR_WORD GREATER_BAR WORD .)
    &               reduce using rule 18 (redirection -> REDIR_WORD GREATER_BAR WORD .)
    ;               reduce using rule 18 (redirection -> REDIR_WORD GREATER_BAR WORD .)
    AND_AND         reduce using rule 18 (redirection -> REDIR_WORD GREATER_BAR WORD .)
    OR_OR           reduce using rule 18 (redirection -> REDIR_WORD GREATER_BAR WORD .)
    NEWLINE         reduce using rule 18 (redirection -> REDIR_WORD GREATER_BAR WORD .)
    DO              reduce using rule 18 (redirection -> REDIR_WORD GREATER_BAR WORD .)
    THEN            reduce using rule 18 (redirection -> REDIR_WORD GREATER_BAR WORD .)
    }               reduce using rule 18 (redirection -> REDIR_WORD GREATER_BAR WORD .)
    )               reduce using rule 18 (redirection -> REDIR_WORD GREATER_BAR WORD .)
    DONE            reduce using rule 18 (redirection -> REDIR_WORD GREATER_BAR WORD .)
    FI              reduce using rule 18 (redirection -> REDIR_WORD GREATER_BAR WORD .)
    ELSE            reduce using rule 18 (redirection -> REDIR_WORD GREATER_BAR WORD .)
    ELIF            reduce using rule 18 (redirection -> REDIR_WORD GREATER_BAR WORD .)
    SEMI_SEMI       reduce using rule 18 (redirection -> REDIR_WORD GREATER_BAR WORD .)
    SEMI_AND        reduce using rule 18 (redirection -> REDIR_WORD GREATER_BAR WORD .)
    SEMI_SEMI_AND   reduce using rule 18 (redirection -> REDIR_WORD GREATER_BAR WORD .)
    ESAC            reduce using rule 18 (redirection -> REDIR_WORD GREATER_BAR WORD .)
    WORD            reduce using rule 18 (redirection -> REDIR_WORD GREATER_BAR WORD .)
    ASSIGNMENT_WORD reduce using rule 18 (redirection -> REDIR_WORD GREATER_BAR WORD .)


state 135

    (15) redirection -> REDIR_WORD GREATER_GREATER WORD .

    >               reduce using rule 15 (redirection -> REDIR_WORD GREATER_GREATER WORD .)
    <               reduce using rule 15 (redirection -> REDIR_WORD GREATER_GREATER WORD .)
    NUMBER          reduce using rule 15 (redirection -> REDIR_WORD GREATER_GREATER WORD .)
    REDIR_WORD      reduce using rule 15 (redirection -> REDIR_WORD GREATER_GREATER WORD .)
    GREATER_GREATER reduce using rule 15 (redirection -> REDIR_WORD GREATER_GREATER WORD .)
    GREATER_BAR     reduce using rule 15 (redirection -> REDIR_WORD GREATER_GREATER WORD .)
    LESS_GREATER    reduce using rule 15 (redirection -> REDIR_WORD GREATER_GREATER WORD .)
    LESS_LESS       reduce using rule 15 (redirection -> REDIR_WORD GREATER_GREATER WORD .)
    LESS_LESS_MINUS reduce using rule 15 (redirection -> REDIR_WORD GREATER_GREATER WORD .)
    LESS_LESS_LESS  reduce using rule 15 (redirection -> REDIR_WORD GREATER_GREATER WORD .)
    LESS_AND        reduce using rule 15 (redirection -> REDIR_WORD GREATER_GREATER WORD .)
    GREATER_AND     reduce using rule 15 (redirection -> REDIR_WORD GREATER_GREATER WORD .)
    AND_GREATER     reduce using rule 15 (redirection -> REDIR_WORD GREATER_GREATER WORD .)
    AND_GREATER_GREATER reduce using rule 15 (redirection -> REDIR_WORD GREATER_GREATER WORD .)
    |               reduce using rule 15 (redirection -> REDIR_WORD GREATER_GREATER WORD .)
    BAR_AND         reduce using rule 15 (redirection -> REDIR_WORD GREATER_GREATER WORD .)
    &               reduce using rule 15 (redirection -> REDIR_WORD GREATER_GREATER WORD .)
    ;               reduce using rule 15 (redirection -> REDIR_WORD GREATER_GREATER WORD .)
    AND_AND         reduce using rule 15 (redirection -> REDIR_WORD GREATER_GREATER WORD .)
    OR_OR           reduce using rule 15 (redirection -> REDIR_WORD GREATER_GREATER WORD .)
    NEWLINE         reduce using rule 15 (redirection -> REDIR_WORD GREATER_GREATER WORD .)
    DO              reduce using rule 15 (redirection -> REDIR_WORD GREATER_GREATER WORD .)
    THEN            reduce using rule 15 (redirection -> REDIR_WORD GREATER_GREATER WORD .)
    }               reduce using rule 15 (redirection -> REDIR_WORD GREATER_GREATER WORD .)
    )               reduce using rule 15 (redirection -> REDIR_WORD GREATER_GREATER WORD .)
    DONE            reduce using rule 15 (redirection -> REDIR_WORD GREATER_GREATER WORD .)
    FI              reduce using rule 15 (redirection -> REDIR_WORD GREATER_GREATER WORD .)
    ELSE            reduce using rule 15 (redirection -> REDIR_WORD GREATER_GREATER WORD .)
    ELIF            reduce using rule 15 (redirection -> REDIR_WORD GREATER_GREATER WORD .)
    SEMI_SEMI       reduce using rule 15 (redirection -> REDIR_WORD GREATER_GREATER WORD .)
    SEMI_AND        reduce using rule 15 (redirection -> REDIR_WORD GREATER_GREATER WORD .)
    SEMI_SEMI_AND   reduce using rule 15 (redirection -> REDIR_WORD GREATER_GREATER WORD .)
    ESAC            reduce using rule 15 (redirection -> REDIR_WORD GREATER_GREATER WORD .)
    WORD            reduce using rule 15 (redirection -> REDIR_WORD GREATER_GREATER WORD .)
    ASSIGNMENT_WORD reduce using rule 15 (redirection -> REDIR_WORD GREATER_GREATER WORD .)


state 136

    (27) redirection -> REDIR_WORD LESS_LESS_MINUS WORD .

    >               reduce using rule 27 (redirection -> REDIR_WORD LESS_LESS_MINUS WORD .)
    <               reduce using rule 27 (redirection -> REDIR_WORD LESS_LESS_MINUS WORD .)
    NUMBER          reduce using rule 27 (redirection -> REDIR_WORD LESS_LESS_MINUS WORD .)
    REDIR_WORD      reduce using rule 27 (redirection -> REDIR_WORD LESS_LESS_MINUS WORD .)
    GREATER_GREATER reduce using rule 27 (redirection -> REDIR_WORD LESS_LESS_MINUS WORD .)
    GREATER_BAR     reduce using rule 27 (redirection -> REDIR_WORD LESS_LESS_MINUS WORD .)
    LESS_GREATER    reduce using rule 27 (redirection -> REDIR_WORD LESS_LESS_MINUS WORD .)
    LESS_LESS       reduce using rule 27 (redirection -> REDIR_WORD LESS_LESS_MINUS WORD .)
    LESS_LESS_MINUS reduce using rule 27 (redirection -> REDIR_WORD LESS_LESS_MINUS WORD .)
    LESS_LESS_LESS  reduce using rule 27 (redirection -> REDIR_WORD LESS_LESS_MINUS WORD .)
    LESS_AND        reduce using rule 27 (redirection -> REDIR_WORD LESS_LESS_MINUS WORD .)
    GREATER_AND     reduce using rule 27 (redirection -> REDIR_WORD LESS_LESS_MINUS WORD .)
    AND_GREATER     reduce using rule 27 (redirection -> REDIR_WORD LESS_LESS_MINUS WORD .)
    AND_GREATER_GREATER reduce using rule 27 (redirection -> REDIR_WORD LESS_LESS_MINUS WORD .)
    |               reduce using rule 27 (redirection -> REDIR_WORD LESS_LESS_MINUS WORD .)
    BAR_AND         reduce using rule 27 (redirection -> REDIR_WORD LESS_LESS_MINUS WORD .)
    &               reduce using rule 27 (redirection -> REDIR_WORD LESS_LESS_MINUS WORD .)
    ;               reduce using rule 27 (redirection -> REDIR_WORD LESS_LESS_MINUS WORD .)
    AND_AND         reduce using rule 27 (redirection -> REDIR_WORD LESS_LESS_MINUS WORD .)
    OR_OR           reduce using rule 27 (redirection -> REDIR_WORD LESS_LESS_MINUS WORD .)
    NEWLINE         reduce using rule 27 (redirection -> REDIR_WORD LESS_LESS_MINUS WORD .)
    DO              reduce using rule 27 (redirection -> REDIR_WORD LESS_LESS_MINUS WORD .)
    THEN            reduce using rule 27 (redirection -> REDIR_WORD LESS_LESS_MINUS WORD .)
    }               reduce using rule 27 (redirection -> REDIR_WORD LESS_LESS_MINUS WORD .)
    )               reduce using rule 27 (redirection -> REDIR_WORD LESS_LESS_MINUS WORD .)
    DONE            reduce using rule 27 (redirection -> REDIR_WORD LESS_LESS_MINUS WORD .)
    FI              reduce using rule 27 (redirection -> REDIR_WORD LESS_LESS_MINUS WORD .)
    ELSE            reduce using rule 27 (redirection -> REDIR_WORD LESS_LESS_MINUS WORD .)
    ELIF            reduce using rule 27 (redirection -> REDIR_WORD LESS_LESS_MINUS WORD .)
    SEMI_SEMI       reduce using rule 27 (redirection -> REDIR_WORD LESS_LESS_MINUS WORD .)
    SEMI_AND        reduce using rule 27 (redirection -> REDIR_WORD LESS_LESS_MINUS WORD .)
    SEMI_SEMI_AND   reduce using rule 27 (redirection -> REDIR_WORD LESS_LESS_MINUS WORD .)
    ESAC            reduce using rule 27 (redirection -> REDIR_WORD LESS_LESS_MINUS WORD .)
    WORD            reduce using rule 27 (redirection -> REDIR_WORD LESS_LESS_MINUS WORD .)
    ASSIGNMENT_WORD reduce using rule 27 (redirection -> REDIR_WORD LESS_LESS_MINUS WORD .)


state 137

    (21) redirection -> REDIR_WORD LESS_GREATER WORD .

    >               reduce using rule 21 (redirection -> REDIR_WORD LESS_GREATER WORD .)
    <               reduce using rule 21 (redirection -> REDIR_WORD LESS_GREATER WORD .)
    NUMBER          reduce using rule 21 (redirection -> REDIR_WORD LESS_GREATER WORD .)
    REDIR_WORD      reduce using rule 21 (redirection -> REDIR_WORD LESS_GREATER WORD .)
    GREATER_GREATER reduce using rule 21 (redirection -> REDIR_WORD LESS_GREATER WORD .)
    GREATER_BAR     reduce using rule 21 (redirection -> REDIR_WORD LESS_GREATER WORD .)
    LESS_GREATER    reduce using rule 21 (redirection -> REDIR_WORD LESS_GREATER WORD .)
    LESS_LESS       reduce using rule 21 (redirection -> REDIR_WORD LESS_GREATER WORD .)
    LESS_LESS_MINUS reduce using rule 21 (redirection -> REDIR_WORD LESS_GREATER WORD .)
    LESS_LESS_LESS  reduce using rule 21 (redirection -> REDIR_WORD LESS_GREATER WORD .)
    LESS_AND        reduce using rule 21 (redirection -> REDIR_WORD LESS_GREATER WORD .)
    GREATER_AND     reduce using rule 21 (redirection -> REDIR_WORD LESS_GREATER WORD .)
    AND_GREATER     reduce using rule 21 (redirection -> REDIR_WORD LESS_GREATER WORD .)
    AND_GREATER_GREATER reduce using rule 21 (redirection -> REDIR_WORD LESS_GREATER WORD .)
    |               reduce using rule 21 (redirection -> REDIR_WORD LESS_GREATER WORD .)
    BAR_AND         reduce using rule 21 (redirection -> REDIR_WORD LESS_GREATER WORD .)
    &               reduce using rule 21 (redirection -> REDIR_WORD LESS_GREATER WORD .)
    ;               reduce using rule 21 (redirection -> REDIR_WORD LESS_GREATER WORD .)
    AND_AND         reduce using rule 21 (redirection -> REDIR_WORD LESS_GREATER WORD .)
    OR_OR           reduce using rule 21 (redirection -> REDIR_WORD LESS_GREATER WORD .)
    NEWLINE         reduce using rule 21 (redirection -> REDIR_WORD LESS_GREATER WORD .)
    DO              reduce using rule 21 (redirection -> REDIR_WORD LESS_GREATER WORD .)
    THEN            reduce using rule 21 (redirection -> REDIR_WORD LESS_GREATER WORD .)
    }               reduce using rule 21 (redirection -> REDIR_WORD LESS_GREATER WORD .)
    )               reduce using rule 21 (redirection -> REDIR_WORD LESS_GREATER WORD .)
    DONE            reduce using rule 21 (redirection -> REDIR_WORD LESS_GREATER WORD .)
    FI              reduce using rule 21 (redirection -> REDIR_WORD LESS_GREATER WORD .)
    ELSE            reduce using rule 21 (redirection -> REDIR_WORD LESS_GREATER WORD .)
    ELIF            reduce using rule 21 (redirection -> REDIR_WORD LESS_GREATER WORD .)
    SEMI_SEMI       reduce using rule 21 (redirection -> REDIR_WORD LESS_GREATER WORD .)
    SEMI_AND        reduce using rule 21 (redirection -> REDIR_WORD LESS_GREATER WORD .)
    SEMI_SEMI_AND   reduce using rule 21 (redirection -> REDIR_WORD LESS_GREATER WORD .)
    ESAC            reduce using rule 21 (redirection -> REDIR_WORD LESS_GREATER WORD .)
    WORD            reduce using rule 21 (redirection -> REDIR_WORD LESS_GREATER WORD .)
    ASSIGNMENT_WORD reduce using rule 21 (redirection -> REDIR_WORD LESS_GREATER WORD .)


state 138

    (24) redirection -> REDIR_WORD LESS_LESS WORD .

    >               reduce using rule 24 (redirection -> REDIR_WORD LESS_LESS WORD .)
    <               reduce using rule 24 (redirection -> REDIR_WORD LESS_LESS WORD .)
    NUMBER          reduce using rule 24 (redirection -> REDIR_WORD LESS_LESS WORD .)
    REDIR_WORD      reduce using rule 24 (redirection -> REDIR_WORD LESS_LESS WORD .)
    GREATER_GREATER reduce using rule 24 (redirection -> REDIR_WORD LESS_LESS WORD .)
    GREATER_BAR     reduce using rule 24 (redirection -> REDIR_WORD LESS_LESS WORD .)
    LESS_GREATER    reduce using rule 24 (redirection -> REDIR_WORD LESS_LESS WORD .)
    LESS_LESS       reduce using rule 24 (redirection -> REDIR_WORD LESS_LESS WORD .)
    LESS_LESS_MINUS reduce using rule 24 (redirection -> REDIR_WORD LESS_LESS WORD .)
    LESS_LESS_LESS  reduce using rule 24 (redirection -> REDIR_WORD LESS_LESS WORD .)
    LESS_AND        reduce using rule 24 (redirection -> REDIR_WORD LESS_LESS WORD .)
    GREATER_AND     reduce using rule 24 (redirection -> REDIR_WORD LESS_LESS WORD .)
    AND_GREATER     reduce using rule 24 (redirection -> REDIR_WORD LESS_LESS WORD .)
    AND_GREATER_GREATER reduce using rule 24 (redirection -> REDIR_WORD LESS_LESS WORD .)
    |               reduce using rule 24 (redirection -> REDIR_WORD LESS_LESS WORD .)
    BAR_AND         reduce using rule 24 (redirection -> REDIR_WORD LESS_LESS WORD .)
    &               reduce using rule 24 (redirection -> REDIR_WORD LESS_LESS WORD .)
    ;               reduce using rule 24 (redirection -> REDIR_WORD LESS_LESS WORD .)
    AND_AND         reduce using rule 24 (redirection -> REDIR_WORD LESS_LESS WORD .)
    OR_OR           reduce using rule 24 (redirection -> REDIR_WORD LESS_LESS WORD .)
    NEWLINE         reduce using rule 24 (redirection -> REDIR_WORD LESS_LESS WORD .)
    DO              reduce using rule 24 (redirection -> REDIR_WORD LESS_LESS WORD .)
    THEN            reduce using rule 24 (redirection -> REDIR_WORD LESS_LESS WORD .)
    }               reduce using rule 24 (redirection -> REDIR_WORD LESS_LESS WORD .)
    )               reduce using rule 24 (redirection -> REDIR_WORD LESS_LESS WORD .)
    DONE            reduce using rule 24 (redirection -> REDIR_WORD LESS_LESS WORD .)
    FI              reduce using rule 24 (redirection -> REDIR_WORD LESS_LESS WORD .)
    ELSE            reduce using rule 24 (redirection -> REDIR_WORD LESS_LESS WORD .)
    ELIF            reduce using rule 24 (redirection -> REDIR_WORD LESS_LESS WORD .)
    SEMI_SEMI       reduce using rule 24 (redirection -> REDIR_WORD LESS_LESS WORD .)
    SEMI_AND        reduce using rule 24 (redirection -> REDIR_WORD LESS_LESS WORD .)
    SEMI_SEMI_AND   reduce using rule 24 (redirection -> REDIR_WORD LESS_LESS WORD .)
    ESAC            reduce using rule 24 (redirection -> REDIR_WORD LESS_LESS WORD .)
    WORD            reduce using rule 24 (redirection -> REDIR_WORD LESS_LESS WORD .)
    ASSIGNMENT_WORD reduce using rule 24 (redirection -> REDIR_WORD LESS_LESS WORD .)


state 139

    (11) redirection -> REDIR_WORD > WORD .

    >               reduce using rule 11 (redirection -> REDIR_WORD > WORD .)
    <               reduce using rule 11 (redirection -> REDIR_WORD > WORD .)
    NUMBER          reduce using rule 11 (redirection -> REDIR_WORD > WORD .)
    REDIR_WORD      reduce using rule 11 (redirection -> REDIR_WORD > WORD .)
    GREATER_GREATER reduce using rule 11 (redirection -> REDIR_WORD > WORD .)
    GREATER_BAR     reduce using rule 11 (redirection -> REDIR_WORD > WORD .)
    LESS_GREATER    reduce using rule 11 (redirection -> REDIR_WORD > WORD .)
    LESS_LESS       reduce using rule 11 (redirection -> REDIR_WORD > WORD .)
    LESS_LESS_MINUS reduce using rule 11 (redirection -> REDIR_WORD > WORD .)
    LESS_LESS_LESS  reduce using rule 11 (redirection -> REDIR_WORD > WORD .)
    LESS_AND        reduce using rule 11 (redirection -> REDIR_WORD > WORD .)
    GREATER_AND     reduce using rule 11 (redirection -> REDIR_WORD > WORD .)
    AND_GREATER     reduce using rule 11 (redirection -> REDIR_WORD > WORD .)
    AND_GREATER_GREATER reduce using rule 11 (redirection -> REDIR_WORD > WORD .)
    |               reduce using rule 11 (redirection -> REDIR_WORD > WORD .)
    BAR_AND         reduce using rule 11 (redirection -> REDIR_WORD > WORD .)
    &               reduce using rule 11 (redirection -> REDIR_WORD > WORD .)
    ;               reduce using rule 11 (redirection -> REDIR_WORD > WORD .)
    AND_AND         reduce using rule 11 (redirection -> REDIR_WORD > WORD .)
    OR_OR           reduce using rule 11 (redirection -> REDIR_WORD > WORD .)
    NEWLINE         reduce using rule 11 (redirection -> REDIR_WORD > WORD .)
    DO              reduce using rule 11 (redirection -> REDIR_WORD > WORD .)
    THEN            reduce using rule 11 (redirection -> REDIR_WORD > WORD .)
    }               reduce using rule 11 (redirection -> REDIR_WORD > WORD .)
    )               reduce using rule 11 (redirection -> REDIR_WORD > WORD .)
    DONE            reduce using rule 11 (redirection -> REDIR_WORD > WORD .)
    FI              reduce using rule 11 (redirection -> REDIR_WORD > WORD .)
    ELSE            reduce using rule 11 (redirection -> REDIR_WORD > WORD .)
    ELIF            reduce using rule 11 (redirection -> REDIR_WORD > WORD .)
    SEMI_SEMI       reduce using rule 11 (redirection -> REDIR_WORD > WORD .)
    SEMI_AND        reduce using rule 11 (redirection -> REDIR_WORD > WORD .)
    SEMI_SEMI_AND   reduce using rule 11 (redirection -> REDIR_WORD > WORD .)
    ESAC            reduce using rule 11 (redirection -> REDIR_WORD > WORD .)
    WORD            reduce using rule 11 (redirection -> REDIR_WORD > WORD .)
    ASSIGNMENT_WORD reduce using rule 11 (redirection -> REDIR_WORD > WORD .)


state 140

    (30) redirection -> REDIR_WORD LESS_LESS_LESS WORD .

    >               reduce using rule 30 (redirection -> REDIR_WORD LESS_LESS_LESS WORD .)
    <               reduce using rule 30 (redirection -> REDIR_WORD LESS_LESS_LESS WORD .)
    NUMBER          reduce using rule 30 (redirection -> REDIR_WORD LESS_LESS_LESS WORD .)
    REDIR_WORD      reduce using rule 30 (redirection -> REDIR_WORD LESS_LESS_LESS WORD .)
    GREATER_GREATER reduce using rule 30 (redirection -> REDIR_WORD LESS_LESS_LESS WORD .)
    GREATER_BAR     reduce using rule 30 (redirection -> REDIR_WORD LESS_LESS_LESS WORD .)
    LESS_GREATER    reduce using rule 30 (redirection -> REDIR_WORD LESS_LESS_LESS WORD .)
    LESS_LESS       reduce using rule 30 (redirection -> REDIR_WORD LESS_LESS_LESS WORD .)
    LESS_LESS_MINUS reduce using rule 30 (redirection -> REDIR_WORD LESS_LESS_LESS WORD .)
    LESS_LESS_LESS  reduce using rule 30 (redirection -> REDIR_WORD LESS_LESS_LESS WORD .)
    LESS_AND        reduce using rule 30 (redirection -> REDIR_WORD LESS_LESS_LESS WORD .)
    GREATER_AND     reduce using rule 30 (redirection -> REDIR_WORD LESS_LESS_LESS WORD .)
    AND_GREATER     reduce using rule 30 (redirection -> REDIR_WORD LESS_LESS_LESS WORD .)
    AND_GREATER_GREATER reduce using rule 30 (redirection -> REDIR_WORD LESS_LESS_LESS WORD .)
    |               reduce using rule 30 (redirection -> REDIR_WORD LESS_LESS_LESS WORD .)
    BAR_AND         reduce using rule 30 (redirection -> REDIR_WORD LESS_LESS_LESS WORD .)
    &               reduce using rule 30 (redirection -> REDIR_WORD LESS_LESS_LESS WORD .)
    ;               reduce using rule 30 (redirection -> REDIR_WORD LESS_LESS_LESS WORD .)
    AND_AND         reduce using rule 30 (redirection -> REDIR_WORD LESS_LESS_LESS WORD .)
    OR_OR           reduce using rule 30 (redirection -> REDIR_WORD LESS_LESS_LESS WORD .)
    NEWLINE         reduce using rule 30 (redirection -> REDIR_WORD LESS_LESS_LESS WORD .)
    DO              reduce using rule 30 (redirection -> REDIR_WORD LESS_LESS_LESS WORD .)
    THEN            reduce using rule 30 (redirection -> REDIR_WORD LESS_LESS_LESS WORD .)
    }               reduce using rule 30 (redirection -> REDIR_WORD LESS_LESS_LESS WORD .)
    )               reduce using rule 30 (redirection -> REDIR_WORD LESS_LESS_LESS WORD .)
    DONE            reduce using rule 30 (redirection -> REDIR_WORD LESS_LESS_LESS WORD .)
    FI              reduce using rule 30 (redirection -> REDIR_WORD LESS_LESS_LESS WORD .)
    ELSE            reduce using rule 30 (redirection -> REDIR_WORD LESS_LESS_LESS WORD .)
    ELIF            reduce using rule 30 (redirection -> REDIR_WORD LESS_LESS_LESS WORD .)
    SEMI_SEMI       reduce using rule 30 (redirection -> REDIR_WORD LESS_LESS_LESS WORD .)
    SEMI_AND        reduce using rule 30 (redirection -> REDIR_WORD LESS_LESS_LESS WORD .)
    SEMI_SEMI_AND   reduce using rule 30 (redirection -> REDIR_WORD LESS_LESS_LESS WORD .)
    ESAC            reduce using rule 30 (redirection -> REDIR_WORD LESS_LESS_LESS WORD .)
    WORD            reduce using rule 30 (redirection -> REDIR_WORD LESS_LESS_LESS WORD .)
    ASSIGNMENT_WORD reduce using rule 30 (redirection -> REDIR_WORD LESS_LESS_LESS WORD .)


state 141

    (12) redirection -> REDIR_WORD < WORD .

    >               reduce using rule 12 (redirection -> REDIR_WORD < WORD .)
    <               reduce using rule 12 (redirection -> REDIR_WORD < WORD .)
    NUMBER          reduce using rule 12 (redirection -> REDIR_WORD < WORD .)
    REDIR_WORD      reduce using rule 12 (redirection -> REDIR_WORD < WORD .)
    GREATER_GREATER reduce using rule 12 (redirection -> REDIR_WORD < WORD .)
    GREATER_BAR     reduce using rule 12 (redirection -> REDIR_WORD < WORD .)
    LESS_GREATER    reduce using rule 12 (redirection -> REDIR_WORD < WORD .)
    LESS_LESS       reduce using rule 12 (redirection -> REDIR_WORD < WORD .)
    LESS_LESS_MINUS reduce using rule 12 (redirection -> REDIR_WORD < WORD .)
    LESS_LESS_LESS  reduce using rule 12 (redirection -> REDIR_WORD < WORD .)
    LESS_AND        reduce using rule 12 (redirection -> REDIR_WORD < WORD .)
    GREATER_AND     reduce using rule 12 (redirection -> REDIR_WORD < WORD .)
    AND_GREATER     reduce using rule 12 (redirection -> REDIR_WORD < WORD .)
    AND_GREATER_GREATER reduce using rule 12 (redirection -> REDIR_WORD < WORD .)
    |               reduce using rule 12 (redirection -> REDIR_WORD < WORD .)
    BAR_AND         reduce using rule 12 (redirection -> REDIR_WORD < WORD .)
    &               reduce using rule 12 (redirection -> REDIR_WORD < WORD .)
    ;               reduce using rule 12 (redirection -> REDIR_WORD < WORD .)
    AND_AND         reduce using rule 12 (redirection -> REDIR_WORD < WORD .)
    OR_OR           reduce using rule 12 (redirection -> REDIR_WORD < WORD .)
    NEWLINE         reduce using rule 12 (redirection -> REDIR_WORD < WORD .)
    DO              reduce using rule 12 (redirection -> REDIR_WORD < WORD .)
    THEN            reduce using rule 12 (redirection -> REDIR_WORD < WORD .)
    }               reduce using rule 12 (redirection -> REDIR_WORD < WORD .)
    )               reduce using rule 12 (redirection -> REDIR_WORD < WORD .)
    DONE            reduce using rule 12 (redirection -> REDIR_WORD < WORD .)
    FI              reduce using rule 12 (redirection -> REDIR_WORD < WORD .)
    ELSE            reduce using rule 12 (redirection -> REDIR_WORD < WORD .)
    ELIF            reduce using rule 12 (redirection -> REDIR_WORD < WORD .)
    SEMI_SEMI       reduce using rule 12 (redirection -> REDIR_WORD < WORD .)
    SEMI_AND        reduce using rule 12 (redirection -> REDIR_WORD < WORD .)
    SEMI_SEMI_AND   reduce using rule 12 (redirection -> REDIR_WORD < WORD .)
    ESAC            reduce using rule 12 (redirection -> REDIR_WORD < WORD .)
    WORD            reduce using rule 12 (redirection -> REDIR_WORD < WORD .)
    ASSIGNMENT_WORD reduce using rule 12 (redirection -> REDIR_WORD < WORD .)


state 142

    (48) redirection -> REDIR_WORD LESS_AND - .

    >               reduce using rule 48 (redirection -> REDIR_WORD LESS_AND - .)
    <               reduce using rule 48 (redirection -> REDIR_WORD LESS_AND - .)
    NUMBER          reduce using rule 48 (redirection -> REDIR_WORD LESS_AND - .)
    REDIR_WORD      reduce using rule 48 (redirection -> REDIR_WORD LESS_AND - .)
    GREATER_GREATER reduce using rule 48 (redirection -> REDIR_WORD LESS_AND - .)
    GREATER_BAR     reduce using rule 48 (redirection -> REDIR_WORD LESS_AND - .)
    LESS_GREATER    reduce using rule 48 (redirection -> REDIR_WORD LESS_AND - .)
    LESS_LESS       reduce using rule 48 (redirection -> REDIR_WORD LESS_AND - .)
    LESS_LESS_MINUS reduce using rule 48 (redirection -> REDIR_WORD LESS_AND - .)
    LESS_LESS_LESS  reduce using rule 48 (redirection -> REDIR_WORD LESS_AND - .)
    LESS_AND        reduce using rule 48 (redirection -> REDIR_WORD LESS_AND - .)
    GREATER_AND     reduce using rule 48 (redirection -> REDIR_WORD LESS_AND - .)
    AND_GREATER     reduce using rule 48 (redirection -> REDIR_WORD LESS_AND - .)
    AND_GREATER_GREATER reduce using rule 48 (redirection -> REDIR_WORD LESS_AND - .)
    |               reduce using rule 48 (redirection -> REDIR_WORD LESS_AND - .)
    BAR_AND         reduce using rule 48 (redirection -> REDIR_WORD LESS_AND - .)
    &               reduce using rule 48 (redirection -> REDIR_WORD LESS_AND - .)
    ;               reduce using rule 48 (redirection -> REDIR_WORD LESS_AND - .)
    AND_AND         reduce using rule 48 (redirection -> REDIR_WORD LESS_AND - .)
    OR_OR           reduce using rule 48 (redirection -> REDIR_WORD LESS_AND - .)
    NEWLINE         reduce using rule 48 (redirection -> REDIR_WORD LESS_AND - .)
    DO              reduce using rule 48 (redirection -> REDIR_WORD LESS_AND - .)
    THEN            reduce using rule 48 (redirection -> REDIR_WORD LESS_AND - .)
    }               reduce using rule 48 (redirection -> REDIR_WORD LESS_AND - .)
    )               reduce using rule 48 (redirection -> REDIR_WORD LESS_AND - .)
    DONE            reduce using rule 48 (redirection -> REDIR_WORD LESS_AND - .)
    FI              reduce using rule 48 (redirection -> REDIR_WORD LESS_AND - .)
    ELSE            reduce using rule 48 (redirection -> REDIR_WORD LESS_AND - .)
    ELIF            reduce using rule 48 (redirection -> REDIR_WORD LESS_AND - .)
    SEMI_SEMI       reduce using rule 48 (redirection -> REDIR_WORD LESS_AND - .)
    SEMI_AND        reduce using rule 48 (redirection -> REDIR_WORD LESS_AND - .)
    SEMI_SEMI_AND   reduce using rule 48 (redirection -> REDIR_WORD LESS_AND - .)
    ESAC            reduce using rule 48 (redirection -> REDIR_WORD LESS_AND - .)
    WORD            reduce using rule 48 (redirection -> REDIR_WORD LESS_AND - .)
    ASSIGNMENT_WORD reduce using rule 48 (redirection -> REDIR_WORD LESS_AND - .)


state 143

    (39) redirection -> REDIR_WORD LESS_AND WORD .

    >               reduce using rule 39 (redirection -> REDIR_WORD LESS_AND WORD .)
    <               reduce using rule 39 (redirection -> REDIR_WORD LESS_AND WORD .)
    NUMBER          reduce using rule 39 (redirection -> REDIR_WORD LESS_AND WORD .)
    REDIR_WORD      reduce using rule 39 (redirection -> REDIR_WORD LESS_AND WORD .)
    GREATER_GREATER reduce using rule 39 (redirection -> REDIR_WORD LESS_AND WORD .)
    GREATER_BAR     reduce using rule 39 (redirection -> REDIR_WORD LESS_AND WORD .)
    LESS_GREATER    reduce using rule 39 (redirection -> REDIR_WORD LESS_AND WORD .)
    LESS_LESS       reduce using rule 39 (redirection -> REDIR_WORD LESS_AND WORD .)
    LESS_LESS_MINUS reduce using rule 39 (redirection -> REDIR_WORD LESS_AND WORD .)
    LESS_LESS_LESS  reduce using rule 39 (redirection -> REDIR_WORD LESS_AND WORD .)
    LESS_AND        reduce using rule 39 (redirection -> REDIR_WORD LESS_AND WORD .)
    GREATER_AND     reduce using rule 39 (redirection -> REDIR_WORD LESS_AND WORD .)
    AND_GREATER     reduce using rule 39 (redirection -> REDIR_WORD LESS_AND WORD .)
    AND_GREATER_GREATER reduce using rule 39 (redirection -> REDIR_WORD LESS_AND WORD .)
    |               reduce using rule 39 (redirection -> REDIR_WORD LESS_AND WORD .)
    BAR_AND         reduce using rule 39 (redirection -> REDIR_WORD LESS_AND WORD .)
    &               reduce using rule 39 (redirection -> REDIR_WORD LESS_AND WORD .)
    ;               reduce using rule 39 (redirection -> REDIR_WORD LESS_AND WORD .)
    AND_AND         reduce using rule 39 (redirection -> REDIR_WORD LESS_AND WORD .)
    OR_OR           reduce using rule 39 (redirection -> REDIR_WORD LESS_AND WORD .)
    NEWLINE         reduce using rule 39 (redirection -> REDIR_WORD LESS_AND WORD .)
    DO              reduce using rule 39 (redirection -> REDIR_WORD LESS_AND WORD .)
    THEN            reduce using rule 39 (redirection -> REDIR_WORD LESS_AND WORD .)
    }               reduce using rule 39 (redirection -> REDIR_WORD LESS_AND WORD .)
    )               reduce using rule 39 (redirection -> REDIR_WORD LESS_AND WORD .)
    DONE            reduce using rule 39 (redirection -> REDIR_WORD LESS_AND WORD .)
    FI              reduce using rule 39 (redirection -> REDIR_WORD LESS_AND WORD .)
    ELSE            reduce using rule 39 (redirection -> REDIR_WORD LESS_AND WORD .)
    ELIF            reduce using rule 39 (redirection -> REDIR_WORD LESS_AND WORD .)
    SEMI_SEMI       reduce using rule 39 (redirection -> REDIR_WORD LESS_AND WORD .)
    SEMI_AND        reduce using rule 39 (redirection -> REDIR_WORD LESS_AND WORD .)
    SEMI_SEMI_AND   reduce using rule 39 (redirection -> REDIR_WORD LESS_AND WORD .)
    ESAC            reduce using rule 39 (redirection -> REDIR_WORD LESS_AND WORD .)
    WORD            reduce using rule 39 (redirection -> REDIR_WORD LESS_AND WORD .)
    ASSIGNMENT_WORD reduce using rule 39 (redirection -> REDIR_WORD LESS_AND WORD .)


state 144

    (33) redirection -> REDIR_WORD LESS_AND NUMBER .

    >               reduce using rule 33 (redirection -> REDIR_WORD LESS_AND NUMBER .)
    <               reduce using rule 33 (redirection -> REDIR_WORD LESS_AND NUMBER .)
    NUMBER          reduce using rule 33 (redirection -> REDIR_WORD LESS_AND NUMBER .)
    REDIR_WORD      reduce using rule 33 (redirection -> REDIR_WORD LESS_AND NUMBER .)
    GREATER_GREATER reduce using rule 33 (redirection -> REDIR_WORD LESS_AND NUMBER .)
    GREATER_BAR     reduce using rule 33 (redirection -> REDIR_WORD LESS_AND NUMBER .)
    LESS_GREATER    reduce using rule 33 (redirection -> REDIR_WORD LESS_AND NUMBER .)
    LESS_LESS       reduce using rule 33 (redirection -> REDIR_WORD LESS_AND NUMBER .)
    LESS_LESS_MINUS reduce using rule 33 (redirection -> REDIR_WORD LESS_AND NUMBER .)
    LESS_LESS_LESS  reduce using rule 33 (redirection -> REDIR_WORD LESS_AND NUMBER .)
    LESS_AND        reduce using rule 33 (redirection -> REDIR_WORD LESS_AND NUMBER .)
    GREATER_AND     reduce using rule 33 (redirection -> REDIR_WORD LESS_AND NUMBER .)
    AND_GREATER     reduce using rule 33 (redirection -> REDIR_WORD LESS_AND NUMBER .)
    AND_GREATER_GREATER reduce using rule 33 (redirection -> REDIR_WORD LESS_AND NUMBER .)
    |               reduce using rule 33 (redirection -> REDIR_WORD LESS_AND NUMBER .)
    BAR_AND         reduce using rule 33 (redirection -> REDIR_WORD LESS_AND NUMBER .)
    &               reduce using rule 33 (redirection -> REDIR_WORD LESS_AND NUMBER .)
    ;               reduce using rule 33 (redirection -> REDIR_WORD LESS_AND NUMBER .)
    AND_AND         reduce using rule 33 (redirection -> REDIR_WORD LESS_AND NUMBER .)
    OR_OR           reduce using rule 33 (redirection -> REDIR_WORD LESS_AND NUMBER .)
    NEWLINE         reduce using rule 33 (redirection -> REDIR_WORD LESS_AND NUMBER .)
    DO              reduce using rule 33 (redirection -> REDIR_WORD LESS_AND NUMBER .)
    THEN            reduce using rule 33 (redirection -> REDIR_WORD LESS_AND NUMBER .)
    }               reduce using rule 33 (redirection -> REDIR_WORD LESS_AND NUMBER .)
    )               reduce using rule 33 (redirection -> REDIR_WORD LESS_AND NUMBER .)
    DONE            reduce using rule 33 (redirection -> REDIR_WORD LESS_AND NUMBER .)
    FI              reduce using rule 33 (redirection -> REDIR_WORD LESS_AND NUMBER .)
    ELSE            reduce using rule 33 (redirection -> REDIR_WORD LESS_AND NUMBER .)
    ELIF            reduce using rule 33 (redirection -> REDIR_WORD LESS_AND NUMBER .)
    SEMI_SEMI       reduce using rule 33 (redirection -> REDIR_WORD LESS_AND NUMBER .)
    SEMI_AND        reduce using rule 33 (redirection -> REDIR_WORD LESS_AND NUMBER .)
    SEMI_SEMI_AND   reduce using rule 33 (redirection -> REDIR_WORD LESS_AND NUMBER .)
    ESAC            reduce using rule 33 (redirection -> REDIR_WORD LESS_AND NUMBER .)
    WORD            reduce using rule 33 (redirection -> REDIR_WORD LESS_AND NUMBER .)
    ASSIGNMENT_WORD reduce using rule 33 (redirection -> REDIR_WORD LESS_AND NUMBER .)


state 145

    (45) redirection -> REDIR_WORD GREATER_AND - .

    >               reduce using rule 45 (redirection -> REDIR_WORD GREATER_AND - .)
    <               reduce using rule 45 (redirection -> REDIR_WORD GREATER_AND - .)
    NUMBER          reduce using rule 45 (redirection -> REDIR_WORD GREATER_AND - .)
    REDIR_WORD      reduce using rule 45 (redirection -> REDIR_WORD GREATER_AND - .)
    GREATER_GREATER reduce using rule 45 (redirection -> REDIR_WORD GREATER_AND - .)
    GREATER_BAR     reduce using rule 45 (redirection -> REDIR_WORD GREATER_AND - .)
    LESS_GREATER    reduce using rule 45 (redirection -> REDIR_WORD GREATER_AND - .)
    LESS_LESS       reduce using rule 45 (redirection -> REDIR_WORD GREATER_AND - .)
    LESS_LESS_MINUS reduce using rule 45 (redirection -> REDIR_WORD GREATER_AND - .)
    LESS_LESS_LESS  reduce using rule 45 (redirection -> REDIR_WORD GREATER_AND - .)
    LESS_AND        reduce using rule 45 (redirection -> REDIR_WORD GREATER_AND - .)
    GREATER_AND     reduce using rule 45 (redirection -> REDIR_WORD GREATER_AND - .)
    AND_GREATER     reduce using rule 45 (redirection -> REDIR_WORD GREATER_AND - .)
    AND_GREATER_GREATER reduce using rule 45 (redirection -> REDIR_WORD GREATER_AND - .)
    |               reduce using rule 45 (redirection -> REDIR_WORD GREATER_AND - .)
    BAR_AND         reduce using rule 45 (redirection -> REDIR_WORD GREATER_AND - .)
    &               reduce using rule 45 (redirection -> REDIR_WORD GREATER_AND - .)
    ;               reduce using rule 45 (redirection -> REDIR_WORD GREATER_AND - .)
    AND_AND         reduce using rule 45 (redirection -> REDIR_WORD GREATER_AND - .)
    OR_OR           reduce using rule 45 (redirection -> REDIR_WORD GREATER_AND - .)
    NEWLINE         reduce using rule 45 (redirection -> REDIR_WORD GREATER_AND - .)
    DO              reduce using rule 45 (redirection -> REDIR_WORD GREATER_AND - .)
    THEN            reduce using rule 45 (redirection -> REDIR_WORD GREATER_AND - .)
    }               reduce using rule 45 (redirection -> REDIR_WORD GREATER_AND - .)
    )               reduce using rule 45 (redirection -> REDIR_WORD GREATER_AND - .)
    DONE            reduce using rule 45 (redirection -> REDIR_WORD GREATER_AND - .)
    FI              reduce using rule 45 (redirection -> REDIR_WORD GREATER_AND - .)
    ELSE            reduce using rule 45 (redirection -> REDIR_WORD GREATER_AND - .)
    ELIF            reduce using rule 45 (redirection -> REDIR_WORD GREATER_AND - .)
    SEMI_SEMI       reduce using rule 45 (redirection -> REDIR_WORD GREATER_AND - .)
    SEMI_AND        reduce using rule 45 (redirection -> REDIR_WORD GREATER_AND - .)
    SEMI_SEMI_AND   reduce using rule 45 (redirection -> REDIR_WORD GREATER_AND - .)
    ESAC            reduce using rule 45 (redirection -> REDIR_WORD GREATER_AND - .)
    WORD            reduce using rule 45 (redirection -> REDIR_WORD GREATER_AND - .)
    ASSIGNMENT_WORD reduce using rule 45 (redirection -> REDIR_WORD GREATER_AND - .)


state 146

    (42) redirection -> REDIR_WORD GREATER_AND WORD .

    >               reduce using rule 42 (redirection -> REDIR_WORD GREATER_AND WORD .)
    <               reduce using rule 42 (redirection -> REDIR_WORD GREATER_AND WORD .)
    NUMBER          reduce using rule 42 (redirection -> REDIR_WORD GREATER_AND WORD .)
    REDIR_WORD      reduce using rule 42 (redirection -> REDIR_WORD GREATER_AND WORD .)
    GREATER_GREATER reduce using rule 42 (redirection -> REDIR_WORD GREATER_AND WORD .)
    GREATER_BAR     reduce using rule 42 (redirection -> REDIR_WORD GREATER_AND WORD .)
    LESS_GREATER    reduce using rule 42 (redirection -> REDIR_WORD GREATER_AND WORD .)
    LESS_LESS       reduce using rule 42 (redirection -> REDIR_WORD GREATER_AND WORD .)
    LESS_LESS_MINUS reduce using rule 42 (redirection -> REDIR_WORD GREATER_AND WORD .)
    LESS_LESS_LESS  reduce using rule 42 (redirection -> REDIR_WORD GREATER_AND WORD .)
    LESS_AND        reduce using rule 42 (redirection -> REDIR_WORD GREATER_AND WORD .)
    GREATER_AND     reduce using rule 42 (redirection -> REDIR_WORD GREATER_AND WORD .)
    AND_GREATER     reduce using rule 42 (redirection -> REDIR_WORD GREATER_AND WORD .)
    AND_GREATER_GREATER reduce using rule 42 (redirection -> REDIR_WORD GREATER_AND WORD .)
    |               reduce using rule 42 (redirection -> REDIR_WORD GREATER_AND WORD .)
    BAR_AND         reduce using rule 42 (redirection -> REDIR_WORD GREATER_AND WORD .)
    &               reduce using rule 42 (redirection -> REDIR_WORD GREATER_AND WORD .)
    ;               reduce using rule 42 (redirection -> REDIR_WORD GREATER_AND WORD .)
    AND_AND         reduce using rule 42 (redirection -> REDIR_WORD GREATER_AND WORD .)
    OR_OR           reduce using rule 42 (redirection -> REDIR_WORD GREATER_AND WORD .)
    NEWLINE         reduce using rule 42 (redirection -> REDIR_WORD GREATER_AND WORD .)
    DO              reduce using rule 42 (redirection -> REDIR_WORD GREATER_AND WORD .)
    THEN            reduce using rule 42 (redirection -> REDIR_WORD GREATER_AND WORD .)
    }               reduce using rule 42 (redirection -> REDIR_WORD GREATER_AND WORD .)
    )               reduce using rule 42 (redirection -> REDIR_WORD GREATER_AND WORD .)
    DONE            reduce using rule 42 (redirection -> REDIR_WORD GREATER_AND WORD .)
    FI              reduce using rule 42 (redirection -> REDIR_WORD GREATER_AND WORD .)
    ELSE            reduce using rule 42 (redirection -> REDIR_WORD GREATER_AND WORD .)
    ELIF            reduce using rule 42 (redirection -> REDIR_WORD GREATER_AND WORD .)
    SEMI_SEMI       reduce using rule 42 (redirection -> REDIR_WORD GREATER_AND WORD .)
    SEMI_AND        reduce using rule 42 (redirection -> REDIR_WORD GREATER_AND WORD .)
    SEMI_SEMI_AND   reduce using rule 42 (redirection -> REDIR_WORD GREATER_AND WORD .)
    ESAC            reduce using rule 42 (redirection -> REDIR_WORD GREATER_AND WORD .)
    WORD            reduce using rule 42 (redirection -> REDIR_WORD GREATER_AND WORD .)
    ASSIGNMENT_WORD reduce using rule 42 (redirection -> REDIR_WORD GREATER_AND WORD .)


state 147

    (36) redirection -> REDIR_WORD GREATER_AND NUMBER .

    >               reduce using rule 36 (redirection -> REDIR_WORD GREATER_AND NUMBER .)
    <               reduce using rule 36 (redirection -> REDIR_WORD GREATER_AND NUMBER .)
    NUMBER          reduce using rule 36 (redirection -> REDIR_WORD GREATER_AND NUMBER .)
    REDIR_WORD      reduce using rule 36 (redirection -> REDIR_WORD GREATER_AND NUMBER .)
    GREATER_GREATER reduce using rule 36 (redirection -> REDIR_WORD GREATER_AND NUMBER .)
    GREATER_BAR     reduce using rule 36 (redirection -> REDIR_WORD GREATER_AND NUMBER .)
    LESS_GREATER    reduce using rule 36 (redirection -> REDIR_WORD GREATER_AND NUMBER .)
    LESS_LESS       reduce using rule 36 (redirection -> REDIR_WORD GREATER_AND NUMBER .)
    LESS_LESS_MINUS reduce using rule 36 (redirection -> REDIR_WORD GREATER_AND NUMBER .)
    LESS_LESS_LESS  reduce using rule 36 (redirection -> REDIR_WORD GREATER_AND NUMBER .)
    LESS_AND        reduce using rule 36 (redirection -> REDIR_WORD GREATER_AND NUMBER .)
    GREATER_AND     reduce using rule 36 (redirection -> REDIR_WORD GREATER_AND NUMBER .)
    AND_GREATER     reduce using rule 36 (redirection -> REDIR_WORD GREATER_AND NUMBER .)
    AND_GREATER_GREATER reduce using rule 36 (redirection -> REDIR_WORD GREATER_AND NUMBER .)
    |               reduce using rule 36 (redirection -> REDIR_WORD GREATER_AND NUMBER .)
    BAR_AND         reduce using rule 36 (redirection -> REDIR_WORD GREATER_AND NUMBER .)
    &               reduce using rule 36 (redirection -> REDIR_WORD GREATER_AND NUMBER .)
    ;               reduce using rule 36 (redirection -> REDIR_WORD GREATER_AND NUMBER .)
    AND_AND         reduce using rule 36 (redirection -> REDIR_WORD GREATER_AND NUMBER .)
    OR_OR           reduce using rule 36 (redirection -> REDIR_WORD GREATER_AND NUMBER .)
    NEWLINE         reduce using rule 36 (redirection -> REDIR_WORD GREATER_AND NUMBER .)
    DO              reduce using rule 36 (redirection -> REDIR_WORD GREATER_AND NUMBER .)
    THEN            reduce using rule 36 (redirection -> REDIR_WORD GREATER_AND NUMBER .)
    }               reduce using rule 36 (redirection -> REDIR_WORD GREATER_AND NUMBER .)
    )               reduce using rule 36 (redirection -> REDIR_WORD GREATER_AND NUMBER .)
    DONE            reduce using rule 36 (redirection -> REDIR_WORD GREATER_AND NUMBER .)
    FI              reduce using rule 36 (redirection -> REDIR_WORD GREATER_AND NUMBER .)
    ELSE            reduce using rule 36 (redirection -> REDIR_WORD GREATER_AND NUMBER .)
    ELIF            reduce using rule 36 (redirection -> REDIR_WORD GREATER_AND NUMBER .)
    SEMI_SEMI       reduce using rule 36 (redirection -> REDIR_WORD GREATER_AND NUMBER .)
    SEMI_AND        reduce using rule 36 (redirection -> REDIR_WORD GREATER_AND NUMBER .)
    SEMI_SEMI_AND   reduce using rule 36 (redirection -> REDIR_WORD GREATER_AND NUMBER .)
    ESAC            reduce using rule 36 (redirection -> REDIR_WORD GREATER_AND NUMBER .)
    WORD            reduce using rule 36 (redirection -> REDIR_WORD GREATER_AND NUMBER .)
    ASSIGNMENT_WORD reduce using rule 36 (redirection -> REDIR_WORD GREATER_AND NUMBER .)


state 148

    (149) simple_list1 -> simple_list1 AND_AND newline_list . simple_list1
    (145) newline_list -> newline_list . NEWLINE
    (149) simple_list1 -> . simple_list1 AND_AND newline_list simple_list1
    (150) simple_list1 -> . simple_list1 OR_OR newline_list simple_list1
    (151) simple_list1 -> . simple_list1 & simple_list1
    (152) simple_list1 -> . simple_list1 ; simple_list1
    (153) simple_list1 -> . pipeline_command
    (154) pipeline_command -> . pipeline
    (155) pipeline_command -> . BANG pipeline_command
    (156) pipeline_command -> . timespec pipeline_command
    (157) pipeline_command -> . timespec list_terminator
    (158) pipeline_command -> . BANG list_terminator
    (159) pipeline -> . pipeline | newline_list pipeline
    (160) pipeline -> . pipeline BAR_AND newline_list pipeline
    (161) pipeline -> . command
    (162) timespec -> . TIME
    (163) timespec -> . TIME TIMEOPT
    (164) timespec -> . TIME TIMEOPT TIMEIGN
    (58) command -> . simple_command
    (59) command -> . shell_command
    (60) command -> . shell_command redirection_list
    (61) command -> . function_def
    (62) command -> . coproc
    (56) simple_command -> . simple_command_element
    (57) simple_command -> . simple_command simple_command_element
    (63) shell_command -> . for_command
    (64) shell_command -> . case_command
    (65) shell_command -> . WHILE compound_list DO compound_list DONE
    (66) shell_command -> . UNTIL compound_list DO compound_list DONE
    (67) shell_command -> . select_command
    (68) shell_command -> . if_command
    (69) shell_command -> . subshell
    (70) shell_command -> . group_command
    (71) shell_command -> . arith_command
    (72) shell_command -> . cond_command
    (73) shell_command -> . arith_for_command
    (95) function_def -> . WORD ( ) newline_list function_body
    (96) function_def -> . FUNCTION WORD ( ) newline_list function_body
    (97) function_def -> . FUNCTION WORD newline_list function_body
    (101) coproc -> . COPROC shell_command
    (102) coproc -> . COPROC shell_command redirection_list
    (103) coproc -> . COPROC WORD shell_command
    (104) coproc -> . COPROC WORD shell_command redirection_list
    (105) coproc -> . COPROC simple_command
    (51) simple_command_element -> . WORD
    (52) simple_command_element -> . ASSIGNMENT_WORD
    (53) simple_command_element -> . redirection
    (74) for_command -> . FOR WORD newline_list DO compound_list DONE
    (75) for_command -> . FOR WORD newline_list { compound_list }
    (76) for_command -> . FOR WORD ; newline_list DO compound_list DONE
    (77) for_command -> . FOR WORD ; newline_list { compound_list }
    (78) for_command -> . FOR WORD newline_list IN word_list list_terminator newline_list DO compound_list DONE
    (79) for_command -> . FOR WORD newline_list IN word_list list_terminator newline_list { compound_list }
    (80) for_command -> . FOR WORD newline_list IN list_terminator newline_list DO compound_list DONE
    (81) for_command -> . FOR WORD newline_list IN list_terminator newline_list { compound_list }
    (92) case_command -> . CASE WORD newline_list IN newline_list ESAC
    (93) case_command -> . CASE WORD newline_list IN case_clause_sequence newline_list ESAC
    (94) case_command -> . CASE WORD newline_list IN case_clause ESAC
    (86) select_command -> . SELECT WORD newline_list DO list DONE
    (87) select_command -> . SELECT WORD newline_list { list }
    (88) select_command -> . SELECT WORD ; newline_list DO list DONE
    (89) select_command -> . SELECT WORD ; newline_list { list }
    (90) select_command -> . SELECT WORD newline_list IN word_list list_terminator newline_list DO list DONE
    (91) select_command -> . SELECT WORD newline_list IN word_list list_terminator newline_list { list }
    (106) if_command -> . IF compound_list THEN compound_list FI
    (107) if_command -> . IF compound_list THEN compound_list ELSE compound_list FI
    (108) if_command -> . IF compound_list THEN compound_list elif_clause FI
    (100) subshell -> . ( compound_list )
    (109) group_command -> . { compound_list }
    (110) arith_command -> . ARITH_CMD
    (111) cond_command -> . COND_START COND_CMD COND_END
    (82) arith_for_command -> . FOR ARITH_FOR_EXPRS list_terminator newline_list DO compound_list DONE
    (83) arith_for_command -> . FOR ARITH_FOR_EXPRS list_terminator newline_list { compound_list }
    (84) arith_for_command -> . FOR ARITH_FOR_EXPRS DO compound_list DONE
    (85) arith_for_command -> . FOR ARITH_FOR_EXPRS { compound_list }
    (7) redirection -> . > WORD
    (8) redirection -> . < WORD
    (9) redirection -> . NUMBER > WORD
    (10) redirection -> . NUMBER < WORD
    (11) redirection -> . REDIR_WORD > WORD
    (12) redirection -> . REDIR_WORD < WORD
    (13) redirection -> . GREATER_GREATER WORD
    (14) redirection -> . NUMBER GREATER_GREATER WORD
    (15) redirection -> . REDIR_WORD GREATER_GREATER WORD
    (16) redirection -> . GREATER_BAR WORD
    (17) redirection -> . NUMBER GREATER_BAR WORD
    (18) redirection -> . REDIR_WORD GREATER_BAR WORD
    (19) redirection -> . LESS_GREATER WORD
    (20) redirection -> . NUMBER LESS_GREATER WORD
    (21) redirection -> . REDIR_WORD LESS_GREATER WORD
    (22) redirection -> . LESS_LESS WORD
    (23) redirection -> . NUMBER LESS_LESS WORD
    (24) redirection -> . REDIR_WORD LESS_LESS WORD
    (25) redirection -> . LESS_LESS_MINUS WORD
    (26) redirection -> . NUMBER LESS_LESS_MINUS WORD
    (27) redirection -> . REDIR_WORD LESS_LESS_MINUS WORD
    (28) redirection -> . LESS_LESS_LESS WORD
    (29) redirection -> . NUMBER LESS_LESS_LESS WORD
    (30) redirection -> . REDIR_WORD LESS_LESS_LESS WORD
    (31) redirection -> . LESS_AND NUMBER
    (32) redirection -> . NUMBER LESS_AND NUMBER
    (33) redirection -> . REDIR_WORD LESS_AND NUMBER
    (34) redirection -> . GREATER_AND NUMBER
    (35) redirection -> . NUMBER GREATER_AND NUMBER
    (36) redirection -> . REDIR_WORD GREATER_AND NUMBER
    (37) redirection -> . LESS_AND WORD
    (38) redirection -> . NUMBER LESS_AND WORD
    (39) redirection -> . REDIR_WORD LESS_AND WORD
    (40) redirection -> . GREATER_AND WORD
    (41) redirection -> . NUMBER GREATER_AND WORD
    (42) redirection -> . REDIR_WORD GREATER_AND WORD
    (43) redirection -> . GREATER_AND -
    (44) redirection -> . NUMBER GREATER_AND -
    (45) redirection -> . REDIR_WORD GREATER_AND -
    (46) redirection -> . LESS_AND -
    (47) redirection -> . NUMBER LESS_AND -
    (48) redirection -> . REDIR_WORD LESS_AND -
    (49) redirection -> . AND_GREATER WORD
    (50) redirection -> . AND_GREATER_GREATER WORD

    NEWLINE         shift and go to state 128
    BANG            shift and go to state 32
    TIME            shift and go to state 48
    WHILE           shift and go to state 34
    UNTIL           shift and go to state 4
    WORD            shift and go to state 53
    FUNCTION        shift and go to state 49
    COPROC          shift and go to state 44
    ASSIGNMENT_WORD shift and go to state 26
    FOR             shift and go to state 31
    CASE            shift and go to state 51
    SELECT          shift and go to state 39
    IF              shift and go to state 5
    (               shift and go to state 36
    {               shift and go to state 19
    ARITH_CMD       shift and go to state 46
    COND_START      shift and go to state 22
    >               shift and go to state 41
    <               shift and go to state 40
    NUMBER          shift and go to state 9
    REDIR_WORD      shift and go to state 7
    GREATER_GREATER shift and go to state 28
    GREATER_BAR     shift and go to state 11
    LESS_GREATER    shift and go to state 33
    LESS_LESS       shift and go to state 3
    LESS_LESS_MINUS shift and go to state 18
    LESS_LESS_LESS  shift and go to state 14
    LESS_AND        shift and go to state 17
    GREATER_AND     shift and go to state 47
    AND_GREATER     shift and go to state 45
    AND_GREATER_GREATER shift and go to state 37

    command                        shift and go to state 23
    select_command                 shift and go to state 6
    for_command                    shift and go to state 43
    shell_command                  shift and go to state 25
    simple_command_element         shift and go to state 2
    coproc                         shift and go to state 10
    simple_command                 shift and go to state 27
    pipeline_command               shift and go to state 12
    cond_command                   shift and go to state 30
    timespec                       shift and go to state 24
    arith_for_command              shift and go to state 15
    arith_command                  shift and go to state 16
    case_command                   shift and go to state 35
    simple_list1                   shift and go to state 194
    group_command                  shift and go to state 20
    redirection                    shift and go to state 50
    subshell                       shift and go to state 21
    pipeline                       shift and go to state 52
    if_command                     shift and go to state 38
    function_def                   shift and go to state 1

state 149

    (151) simple_list1 -> simple_list1 & simple_list1 .
    (149) simple_list1 -> simple_list1 . AND_AND newline_list simple_list1
    (150) simple_list1 -> simple_list1 . OR_OR newline_list simple_list1
    (151) simple_list1 -> simple_list1 . & simple_list1
    (152) simple_list1 -> simple_list1 . ; simple_list1

  ! shift/reduce conflict for AND_AND resolved as shift
  ! shift/reduce conflict for OR_OR resolved as shift
  ! shift/reduce conflict for & resolved as shift
  ! shift/reduce conflict for ; resolved as shift
    NEWLINE         reduce using rule 151 (simple_list1 -> simple_list1 & simple_list1 .)
    AND_AND         shift and go to state 70
    OR_OR           shift and go to state 72
    &               shift and go to state 195
    ;               shift and go to state 196

  ! AND_AND         [ reduce using rule 151 (simple_list1 -> simple_list1 & simple_list1 .) ]
  ! OR_OR           [ reduce using rule 151 (simple_list1 -> simple_list1 & simple_list1 .) ]
  ! &               [ reduce using rule 151 (simple_list1 -> simple_list1 & simple_list1 .) ]
  ! ;               [ reduce using rule 151 (simple_list1 -> simple_list1 & simple_list1 .) ]


state 150

    (150) simple_list1 -> simple_list1 OR_OR newline_list . simple_list1
    (145) newline_list -> newline_list . NEWLINE
    (149) simple_list1 -> . simple_list1 AND_AND newline_list simple_list1
    (150) simple_list1 -> . simple_list1 OR_OR newline_list simple_list1
    (151) simple_list1 -> . simple_list1 & simple_list1
    (152) simple_list1 -> . simple_list1 ; simple_list1
    (153) simple_list1 -> . pipeline_command
    (154) pipeline_command -> . pipeline
    (155) pipeline_command -> . BANG pipeline_command
    (156) pipeline_command -> . timespec pipeline_command
    (157) pipeline_command -> . timespec list_terminator
    (158) pipeline_command -> . BANG list_terminator
    (159) pipeline -> . pipeline | newline_list pipeline
    (160) pipeline -> . pipeline BAR_AND newline_list pipeline
    (161) pipeline -> . command
    (162) timespec -> . TIME
    (163) timespec -> . TIME TIMEOPT
    (164) timespec -> . TIME TIMEOPT TIMEIGN
    (58) command -> . simple_command
    (59) command -> . shell_command
    (60) command -> . shell_command redirection_list
    (61) command -> . function_def
    (62) command -> . coproc
    (56) simple_command -> . simple_command_element
    (57) simple_command -> . simple_command simple_command_element
    (63) shell_command -> . for_command
    (64) shell_command -> . case_command
    (65) shell_command -> . WHILE compound_list DO compound_list DONE
    (66) shell_command -> . UNTIL compound_list DO compound_list DONE
    (67) shell_command -> . select_command
    (68) shell_command -> . if_command
    (69) shell_command -> . subshell
    (70) shell_command -> . group_command
    (71) shell_command -> . arith_command
    (72) shell_command -> . cond_command
    (73) shell_command -> . arith_for_command
    (95) function_def -> . WORD ( ) newline_list function_body
    (96) function_def -> . FUNCTION WORD ( ) newline_list function_body
    (97) function_def -> . FUNCTION WORD newline_list function_body
    (101) coproc -> . COPROC shell_command
    (102) coproc -> . COPROC shell_command redirection_list
    (103) coproc -> . COPROC WORD shell_command
    (104) coproc -> . COPROC WORD shell_command redirection_list
    (105) coproc -> . COPROC simple_command
    (51) simple_command_element -> . WORD
    (52) simple_command_element -> . ASSIGNMENT_WORD
    (53) simple_command_element -> . redirection
    (74) for_command -> . FOR WORD newline_list DO compound_list DONE
    (75) for_command -> . FOR WORD newline_list { compound_list }
    (76) for_command -> . FOR WORD ; newline_list DO compound_list DONE
    (77) for_command -> . FOR WORD ; newline_list { compound_list }
    (78) for_command -> . FOR WORD newline_list IN word_list list_terminator newline_list DO compound_list DONE
    (79) for_command -> . FOR WORD newline_list IN word_list list_terminator newline_list { compound_list }
    (80) for_command -> . FOR WORD newline_list IN list_terminator newline_list DO compound_list DONE
    (81) for_command -> . FOR WORD newline_list IN list_terminator newline_list { compound_list }
    (92) case_command -> . CASE WORD newline_list IN newline_list ESAC
    (93) case_command -> . CASE WORD newline_list IN case_clause_sequence newline_list ESAC
    (94) case_command -> . CASE WORD newline_list IN case_clause ESAC
    (86) select_command -> . SELECT WORD newline_list DO list DONE
    (87) select_command -> . SELECT WORD newline_list { list }
    (88) select_command -> . SELECT WORD ; newline_list DO list DONE
    (89) select_command -> . SELECT WORD ; newline_list { list }
    (90) select_command -> . SELECT WORD newline_list IN word_list list_terminator newline_list DO list DONE
    (91) select_command -> . SELECT WORD newline_list IN word_list list_terminator newline_list { list }
    (106) if_command -> . IF compound_list THEN compound_list FI
    (107) if_command -> . IF compound_list THEN compound_list ELSE compound_list FI
    (108) if_command -> . IF compound_list THEN compound_list elif_clause FI
    (100) subshell -> . ( compound_list )
    (109) group_command -> . { compound_list }
    (110) arith_command -> . ARITH_CMD
    (111) cond_command -> . COND_START COND_CMD COND_END
    (82) arith_for_command -> . FOR ARITH_FOR_EXPRS list_terminator newline_list DO compound_list DONE
    (83) arith_for_command -> . FOR ARITH_FOR_EXPRS list_terminator newline_list { compound_list }
    (84) arith_for_command -> . FOR ARITH_FOR_EXPRS DO compound_list DONE
    (85) arith_for_command -> . FOR ARITH_FOR_EXPRS { compound_list }
    (7) redirection -> . > WORD
    (8) redirection -> . < WORD
    (9) redirection -> . NUMBER > WORD
    (10) redirection -> . NUMBER < WORD
    (11) redirection -> . REDIR_WORD > WORD
    (12) redirection -> . REDIR_WORD < WORD
    (13) redirection -> . GREATER_GREATER WORD
    (14) redirection -> . NUMBER GREATER_GREATER WORD
    (15) redirection -> . REDIR_WORD GREATER_GREATER WORD
    (16) redirection -> . GREATER_BAR WORD
    (17) redirection -> . NUMBER GREATER_BAR WORD
    (18) redirection -> . REDIR_WORD GREATER_BAR WORD
    (19) redirection -> . LESS_GREATER WORD
    (20) redirection -> . NUMBER LESS_GREATER WORD
    (21) redirection -> . REDIR_WORD LESS_GREATER WORD
    (22) redirection -> . LESS_LESS WORD
    (23) redirection -> . NUMBER LESS_LESS WORD
    (24) redirection -> . REDIR_WORD LESS_LESS WORD
    (25) redirection -> . LESS_LESS_MINUS WORD
    (26) redirection -> . NUMBER LESS_LESS_MINUS WORD
    (27) redirection -> . REDIR_WORD LESS_LESS_MINUS WORD
    (28) redirection -> . LESS_LESS_LESS WORD
    (29) redirection -> . NUMBER LESS_LESS_LESS WORD
    (30) redirection -> . REDIR_WORD LESS_LESS_LESS WORD
    (31) redirection -> . LESS_AND NUMBER
    (32) redirection -> . NUMBER LESS_AND NUMBER
    (33) redirection -> . REDIR_WORD LESS_AND NUMBER
    (34) redirection -> . GREATER_AND NUMBER
    (35) redirection -> . NUMBER GREATER_AND NUMBER
    (36) redirection -> . REDIR_WORD GREATER_AND NUMBER
    (37) redirection -> . LESS_AND WORD
    (38) redirection -> . NUMBER LESS_AND WORD
    (39) redirection -> . REDIR_WORD LESS_AND WORD
    (40) redirection -> . GREATER_AND WORD
    (41) redirection -> . NUMBER GREATER_AND WORD
    (42) redirection -> . REDIR_WORD GREATER_AND WORD
    (43) redirection -> . GREATER_AND -
    (44) redirection -> . NUMBER GREATER_AND -
    (45) redirection -> . REDIR_WORD GREATER_AND -
    (46) redirection -> . LESS_AND -
    (47) redirection -> . NUMBER LESS_AND -
    (48) redirection -> . REDIR_WORD LESS_AND -
    (49) redirection -> . AND_GREATER WORD
    (50) redirection -> . AND_GREATER_GREATER WORD

    NEWLINE         shift and go to state 128
    BANG            shift and go to state 32
    TIME            shift and go to state 48
    WHILE           shift and go to state 34
    UNTIL           shift and go to state 4
    WORD            shift and go to state 53
    FUNCTION        shift and go to state 49
    COPROC          shift and go to state 44
    ASSIGNMENT_WORD shift and go to state 26
    FOR             shift and go to state 31
    CASE            shift and go to state 51
    SELECT          shift and go to state 39
    IF              shift and go to state 5
    (               shift and go to state 36
    {               shift and go to state 19
    ARITH_CMD       shift and go to state 46
    COND_START      shift and go to state 22
    >               shift and go to state 41
    <               shift and go to state 40
    NUMBER          shift and go to state 9
    REDIR_WORD      shift and go to state 7
    GREATER_GREATER shift and go to state 28
    GREATER_BAR     shift and go to state 11
    LESS_GREATER    shift and go to state 33
    LESS_LESS       shift and go to state 3
    LESS_LESS_MINUS shift and go to state 18
    LESS_LESS_LESS  shift and go to state 14
    LESS_AND        shift and go to state 17
    GREATER_AND     shift and go to state 47
    AND_GREATER     shift and go to state 45
    AND_GREATER_GREATER shift and go to state 37

    command                        shift and go to state 23
    select_command                 shift and go to state 6
    for_command                    shift and go to state 43
    shell_command                  shift and go to state 25
    simple_command_element         shift and go to state 2
    coproc                         shift and go to state 10
    simple_command                 shift and go to state 27
    pipeline_command               shift and go to state 12
    cond_command                   shift and go to state 30
    timespec                       shift and go to state 24
    arith_for_command              shift and go to state 15
    arith_command                  shift and go to state 16
    case_command                   shift and go to state 35
    simple_list1                   shift and go to state 197
    group_command                  shift and go to state 20
    redirection                    shift and go to state 50
    subshell                       shift and go to state 21
    pipeline                       shift and go to state 52
    if_command                     shift and go to state 38
    function_def                   shift and go to state 1

state 151

    (152) simple_list1 -> simple_list1 ; simple_list1 .
    (149) simple_list1 -> simple_list1 . AND_AND newline_list simple_list1
    (150) simple_list1 -> simple_list1 . OR_OR newline_list simple_list1
    (151) simple_list1 -> simple_list1 . & simple_list1
    (152) simple_list1 -> simple_list1 . ; simple_list1

  ! shift/reduce conflict for AND_AND resolved as shift
  ! shift/reduce conflict for OR_OR resolved as shift
  ! shift/reduce conflict for & resolved as shift
  ! shift/reduce conflict for ; resolved as shift
    NEWLINE         reduce using rule 152 (simple_list1 -> simple_list1 ; simple_list1 .)
    AND_AND         shift and go to state 70
    OR_OR           shift and go to state 72
    &               shift and go to state 195
    ;               shift and go to state 196

  ! AND_AND         [ reduce using rule 152 (simple_list1 -> simple_list1 ; simple_list1 .) ]
  ! OR_OR           [ reduce using rule 152 (simple_list1 -> simple_list1 ; simple_list1 .) ]
  ! &               [ reduce using rule 152 (simple_list1 -> simple_list1 ; simple_list1 .) ]
  ! ;               [ reduce using rule 152 (simple_list1 -> simple_list1 ; simple_list1 .) ]


state 152

    (17) redirection -> NUMBER GREATER_BAR WORD .

    >               reduce using rule 17 (redirection -> NUMBER GREATER_BAR WORD .)
    <               reduce using rule 17 (redirection -> NUMBER GREATER_BAR WORD .)
    NUMBER          reduce using rule 17 (redirection -> NUMBER GREATER_BAR WORD .)
    REDIR_WORD      reduce using rule 17 (redirection -> NUMBER GREATER_BAR WORD .)
    GREATER_GREATER reduce using rule 17 (redirection -> NUMBER GREATER_BAR WORD .)
    GREATER_BAR     reduce using rule 17 (redirection -> NUMBER GREATER_BAR WORD .)
    LESS_GREATER    reduce using rule 17 (redirection -> NUMBER GREATER_BAR WORD .)
    LESS_LESS       reduce using rule 17 (redirection -> NUMBER GREATER_BAR WORD .)
    LESS_LESS_MINUS reduce using rule 17 (redirection -> NUMBER GREATER_BAR WORD .)
    LESS_LESS_LESS  reduce using rule 17 (redirection -> NUMBER GREATER_BAR WORD .)
    LESS_AND        reduce using rule 17 (redirection -> NUMBER GREATER_BAR WORD .)
    GREATER_AND     reduce using rule 17 (redirection -> NUMBER GREATER_BAR WORD .)
    AND_GREATER     reduce using rule 17 (redirection -> NUMBER GREATER_BAR WORD .)
    AND_GREATER_GREATER reduce using rule 17 (redirection -> NUMBER GREATER_BAR WORD .)
    |               reduce using rule 17 (redirection -> NUMBER GREATER_BAR WORD .)
    BAR_AND         reduce using rule 17 (redirection -> NUMBER GREATER_BAR WORD .)
    &               reduce using rule 17 (redirection -> NUMBER GREATER_BAR WORD .)
    ;               reduce using rule 17 (redirection -> NUMBER GREATER_BAR WORD .)
    AND_AND         reduce using rule 17 (redirection -> NUMBER GREATER_BAR WORD .)
    OR_OR           reduce using rule 17 (redirection -> NUMBER GREATER_BAR WORD .)
    NEWLINE         reduce using rule 17 (redirection -> NUMBER GREATER_BAR WORD .)
    DO              reduce using rule 17 (redirection -> NUMBER GREATER_BAR WORD .)
    THEN            reduce using rule 17 (redirection -> NUMBER GREATER_BAR WORD .)
    }               reduce using rule 17 (redirection -> NUMBER GREATER_BAR WORD .)
    )               reduce using rule 17 (redirection -> NUMBER GREATER_BAR WORD .)
    DONE            reduce using rule 17 (redirection -> NUMBER GREATER_BAR WORD .)
    FI              reduce using rule 17 (redirection -> NUMBER GREATER_BAR WORD .)
    ELSE            reduce using rule 17 (redirection -> NUMBER GREATER_BAR WORD .)
    ELIF            reduce using rule 17 (redirection -> NUMBER GREATER_BAR WORD .)
    SEMI_SEMI       reduce using rule 17 (redirection -> NUMBER GREATER_BAR WORD .)
    SEMI_AND        reduce using rule 17 (redirection -> NUMBER GREATER_BAR WORD .)
    SEMI_SEMI_AND   reduce using rule 17 (redirection -> NUMBER GREATER_BAR WORD .)
    ESAC            reduce using rule 17 (redirection -> NUMBER GREATER_BAR WORD .)
    WORD            reduce using rule 17 (redirection -> NUMBER GREATER_BAR WORD .)
    ASSIGNMENT_WORD reduce using rule 17 (redirection -> NUMBER GREATER_BAR WORD .)


state 153

    (14) redirection -> NUMBER GREATER_GREATER WORD .

    >               reduce using rule 14 (redirection -> NUMBER GREATER_GREATER WORD .)
    <               reduce using rule 14 (redirection -> NUMBER GREATER_GREATER WORD .)
    NUMBER          reduce using rule 14 (redirection -> NUMBER GREATER_GREATER WORD .)
    REDIR_WORD      reduce using rule 14 (redirection -> NUMBER GREATER_GREATER WORD .)
    GREATER_GREATER reduce using rule 14 (redirection -> NUMBER GREATER_GREATER WORD .)
    GREATER_BAR     reduce using rule 14 (redirection -> NUMBER GREATER_GREATER WORD .)
    LESS_GREATER    reduce using rule 14 (redirection -> NUMBER GREATER_GREATER WORD .)
    LESS_LESS       reduce using rule 14 (redirection -> NUMBER GREATER_GREATER WORD .)
    LESS_LESS_MINUS reduce using rule 14 (redirection -> NUMBER GREATER_GREATER WORD .)
    LESS_LESS_LESS  reduce using rule 14 (redirection -> NUMBER GREATER_GREATER WORD .)
    LESS_AND        reduce using rule 14 (redirection -> NUMBER GREATER_GREATER WORD .)
    GREATER_AND     reduce using rule 14 (redirection -> NUMBER GREATER_GREATER WORD .)
    AND_GREATER     reduce using rule 14 (redirection -> NUMBER GREATER_GREATER WORD .)
    AND_GREATER_GREATER reduce using rule 14 (redirection -> NUMBER GREATER_GREATER WORD .)
    |               reduce using rule 14 (redirection -> NUMBER GREATER_GREATER WORD .)
    BAR_AND         reduce using rule 14 (redirection -> NUMBER GREATER_GREATER WORD .)
    &               reduce using rule 14 (redirection -> NUMBER GREATER_GREATER WORD .)
    ;               reduce using rule 14 (redirection -> NUMBER GREATER_GREATER WORD .)
    AND_AND         reduce using rule 14 (redirection -> NUMBER GREATER_GREATER WORD .)
    OR_OR           reduce using rule 14 (redirection -> NUMBER GREATER_GREATER WORD .)
    NEWLINE         reduce using rule 14 (redirection -> NUMBER GREATER_GREATER WORD .)
    DO              reduce using rule 14 (redirection -> NUMBER GREATER_GREATER WORD .)
    THEN            reduce using rule 14 (redirection -> NUMBER GREATER_GREATER WORD .)
    }               reduce using rule 14 (redirection -> NUMBER GREATER_GREATER WORD .)
    )               reduce using rule 14 (redirection -> NUMBER GREATER_GREATER WORD .)
    DONE            reduce using rule 14 (redirection -> NUMBER GREATER_GREATER WORD .)
    FI              reduce using rule 14 (redirection -> NUMBER GREATER_GREATER WORD .)
    ELSE            reduce using rule 14 (redirection -> NUMBER GREATER_GREATER WORD .)
    ELIF            reduce using rule 14 (redirection -> NUMBER GREATER_GREATER WORD .)
    SEMI_SEMI       reduce using rule 14 (redirection -> NUMBER GREATER_GREATER WORD .)
    SEMI_AND        reduce using rule 14 (redirection -> NUMBER GREATER_GREATER WORD .)
    SEMI_SEMI_AND   reduce using rule 14 (redirection -> NUMBER GREATER_GREATER WORD .)
    ESAC            reduce using rule 14 (redirection -> NUMBER GREATER_GREATER WORD .)
    WORD            reduce using rule 14 (redirection -> NUMBER GREATER_GREATER WORD .)
    ASSIGNMENT_WORD reduce using rule 14 (redirection -> NUMBER GREATER_GREATER WORD .)


state 154

    (26) redirection -> NUMBER LESS_LESS_MINUS WORD .

    >               reduce using rule 26 (redirection -> NUMBER LESS_LESS_MINUS WORD .)
    <               reduce using rule 26 (redirection -> NUMBER LESS_LESS_MINUS WORD .)
    NUMBER          reduce using rule 26 (redirection -> NUMBER LESS_LESS_MINUS WORD .)
    REDIR_WORD      reduce using rule 26 (redirection -> NUMBER LESS_LESS_MINUS WORD .)
    GREATER_GREATER reduce using rule 26 (redirection -> NUMBER LESS_LESS_MINUS WORD .)
    GREATER_BAR     reduce using rule 26 (redirection -> NUMBER LESS_LESS_MINUS WORD .)
    LESS_GREATER    reduce using rule 26 (redirection -> NUMBER LESS_LESS_MINUS WORD .)
    LESS_LESS       reduce using rule 26 (redirection -> NUMBER LESS_LESS_MINUS WORD .)
    LESS_LESS_MINUS reduce using rule 26 (redirection -> NUMBER LESS_LESS_MINUS WORD .)
    LESS_LESS_LESS  reduce using rule 26 (redirection -> NUMBER LESS_LESS_MINUS WORD .)
    LESS_AND        reduce using rule 26 (redirection -> NUMBER LESS_LESS_MINUS WORD .)
    GREATER_AND     reduce using rule 26 (redirection -> NUMBER LESS_LESS_MINUS WORD .)
    AND_GREATER     reduce using rule 26 (redirection -> NUMBER LESS_LESS_MINUS WORD .)
    AND_GREATER_GREATER reduce using rule 26 (redirection -> NUMBER LESS_LESS_MINUS WORD .)
    |               reduce using rule 26 (redirection -> NUMBER LESS_LESS_MINUS WORD .)
    BAR_AND         reduce using rule 26 (redirection -> NUMBER LESS_LESS_MINUS WORD .)
    &               reduce using rule 26 (redirection -> NUMBER LESS_LESS_MINUS WORD .)
    ;               reduce using rule 26 (redirection -> NUMBER LESS_LESS_MINUS WORD .)
    AND_AND         reduce using rule 26 (redirection -> NUMBER LESS_LESS_MINUS WORD .)
    OR_OR           reduce using rule 26 (redirection -> NUMBER LESS_LESS_MINUS WORD .)
    NEWLINE         reduce using rule 26 (redirection -> NUMBER LESS_LESS_MINUS WORD .)
    DO              reduce using rule 26 (redirection -> NUMBER LESS_LESS_MINUS WORD .)
    THEN            reduce using rule 26 (redirection -> NUMBER LESS_LESS_MINUS WORD .)
    }               reduce using rule 26 (redirection -> NUMBER LESS_LESS_MINUS WORD .)
    )               reduce using rule 26 (redirection -> NUMBER LESS_LESS_MINUS WORD .)
    DONE            reduce using rule 26 (redirection -> NUMBER LESS_LESS_MINUS WORD .)
    FI              reduce using rule 26 (redirection -> NUMBER LESS_LESS_MINUS WORD .)
    ELSE            reduce using rule 26 (redirection -> NUMBER LESS_LESS_MINUS WORD .)
    ELIF            reduce using rule 26 (redirection -> NUMBER LESS_LESS_MINUS WORD .)
    SEMI_SEMI       reduce using rule 26 (redirection -> NUMBER LESS_LESS_MINUS WORD .)
    SEMI_AND        reduce using rule 26 (redirection -> NUMBER LESS_LESS_MINUS WORD .)
    SEMI_SEMI_AND   reduce using rule 26 (redirection -> NUMBER LESS_LESS_MINUS WORD .)
    ESAC            reduce using rule 26 (redirection -> NUMBER LESS_LESS_MINUS WORD .)
    WORD            reduce using rule 26 (redirection -> NUMBER LESS_LESS_MINUS WORD .)
    ASSIGNMENT_WORD reduce using rule 26 (redirection -> NUMBER LESS_LESS_MINUS WORD .)


state 155

    (20) redirection -> NUMBER LESS_GREATER WORD .

    >               reduce using rule 20 (redirection -> NUMBER LESS_GREATER WORD .)
    <               reduce using rule 20 (redirection -> NUMBER LESS_GREATER WORD .)
    NUMBER          reduce using rule 20 (redirection -> NUMBER LESS_GREATER WORD .)
    REDIR_WORD      reduce using rule 20 (redirection -> NUMBER LESS_GREATER WORD .)
    GREATER_GREATER reduce using rule 20 (redirection -> NUMBER LESS_GREATER WORD .)
    GREATER_BAR     reduce using rule 20 (redirection -> NUMBER LESS_GREATER WORD .)
    LESS_GREATER    reduce using rule 20 (redirection -> NUMBER LESS_GREATER WORD .)
    LESS_LESS       reduce using rule 20 (redirection -> NUMBER LESS_GREATER WORD .)
    LESS_LESS_MINUS reduce using rule 20 (redirection -> NUMBER LESS_GREATER WORD .)
    LESS_LESS_LESS  reduce using rule 20 (redirection -> NUMBER LESS_GREATER WORD .)
    LESS_AND        reduce using rule 20 (redirection -> NUMBER LESS_GREATER WORD .)
    GREATER_AND     reduce using rule 20 (redirection -> NUMBER LESS_GREATER WORD .)
    AND_GREATER     reduce using rule 20 (redirection -> NUMBER LESS_GREATER WORD .)
    AND_GREATER_GREATER reduce using rule 20 (redirection -> NUMBER LESS_GREATER WORD .)
    |               reduce using rule 20 (redirection -> NUMBER LESS_GREATER WORD .)
    BAR_AND         reduce using rule 20 (redirection -> NUMBER LESS_GREATER WORD .)
    &               reduce using rule 20 (redirection -> NUMBER LESS_GREATER WORD .)
    ;               reduce using rule 20 (redirection -> NUMBER LESS_GREATER WORD .)
    AND_AND         reduce using rule 20 (redirection -> NUMBER LESS_GREATER WORD .)
    OR_OR           reduce using rule 20 (redirection -> NUMBER LESS_GREATER WORD .)
    NEWLINE         reduce using rule 20 (redirection -> NUMBER LESS_GREATER WORD .)
    DO              reduce using rule 20 (redirection -> NUMBER LESS_GREATER WORD .)
    THEN            reduce using rule 20 (redirection -> NUMBER LESS_GREATER WORD .)
    }               reduce using rule 20 (redirection -> NUMBER LESS_GREATER WORD .)
    )               reduce using rule 20 (redirection -> NUMBER LESS_GREATER WORD .)
    DONE            reduce using rule 20 (redirection -> NUMBER LESS_GREATER WORD .)
    FI              reduce using rule 20 (redirection -> NUMBER LESS_GREATER WORD .)
    ELSE            reduce using rule 20 (redirection -> NUMBER LESS_GREATER WORD .)
    ELIF            reduce using rule 20 (redirection -> NUMBER LESS_GREATER WORD .)
    SEMI_SEMI       reduce using rule 20 (redirection -> NUMBER LESS_GREATER WORD .)
    SEMI_AND        reduce using rule 20 (redirection -> NUMBER LESS_GREATER WORD .)
    SEMI_SEMI_AND   reduce using rule 20 (redirection -> NUMBER LESS_GREATER WORD .)
    ESAC            reduce using rule 20 (redirection -> NUMBER LESS_GREATER WORD .)
    WORD            reduce using rule 20 (redirection -> NUMBER LESS_GREATER WORD .)
    ASSIGNMENT_WORD reduce using rule 20 (redirection -> NUMBER LESS_GREATER WORD .)


state 156

    (23) redirection -> NUMBER LESS_LESS WORD .

    >               reduce using rule 23 (redirection -> NUMBER LESS_LESS WORD .)
    <               reduce using rule 23 (redirection -> NUMBER LESS_LESS WORD .)
    NUMBER          reduce using rule 23 (redirection -> NUMBER LESS_LESS WORD .)
    REDIR_WORD      reduce using rule 23 (redirection -> NUMBER LESS_LESS WORD .)
    GREATER_GREATER reduce using rule 23 (redirection -> NUMBER LESS_LESS WORD .)
    GREATER_BAR     reduce using rule 23 (redirection -> NUMBER LESS_LESS WORD .)
    LESS_GREATER    reduce using rule 23 (redirection -> NUMBER LESS_LESS WORD .)
    LESS_LESS       reduce using rule 23 (redirection -> NUMBER LESS_LESS WORD .)
    LESS_LESS_MINUS reduce using rule 23 (redirection -> NUMBER LESS_LESS WORD .)
    LESS_LESS_LESS  reduce using rule 23 (redirection -> NUMBER LESS_LESS WORD .)
    LESS_AND        reduce using rule 23 (redirection -> NUMBER LESS_LESS WORD .)
    GREATER_AND     reduce using rule 23 (redirection -> NUMBER LESS_LESS WORD .)
    AND_GREATER     reduce using rule 23 (redirection -> NUMBER LESS_LESS WORD .)
    AND_GREATER_GREATER reduce using rule 23 (redirection -> NUMBER LESS_LESS WORD .)
    |               reduce using rule 23 (redirection -> NUMBER LESS_LESS WORD .)
    BAR_AND         reduce using rule 23 (redirection -> NUMBER LESS_LESS WORD .)
    &               reduce using rule 23 (redirection -> NUMBER LESS_LESS WORD .)
    ;               reduce using rule 23 (redirection -> NUMBER LESS_LESS WORD .)
    AND_AND         reduce using rule 23 (redirection -> NUMBER LESS_LESS WORD .)
    OR_OR           reduce using rule 23 (redirection -> NUMBER LESS_LESS WORD .)
    NEWLINE         reduce using rule 23 (redirection -> NUMBER LESS_LESS WORD .)
    DO              reduce using rule 23 (redirection -> NUMBER LESS_LESS WORD .)
    THEN            reduce using rule 23 (redirection -> NUMBER LESS_LESS WORD .)
    }               reduce using rule 23 (redirection -> NUMBER LESS_LESS WORD .)
    )               reduce using rule 23 (redirection -> NUMBER LESS_LESS WORD .)
    DONE            reduce using rule 23 (redirection -> NUMBER LESS_LESS WORD .)
    FI              reduce using rule 23 (redirection -> NUMBER LESS_LESS WORD .)
    ELSE            reduce using rule 23 (redirection -> NUMBER LESS_LESS WORD .)
    ELIF            reduce using rule 23 (redirection -> NUMBER LESS_LESS WORD .)
    SEMI_SEMI       reduce using rule 23 (redirection -> NUMBER LESS_LESS WORD .)
    SEMI_AND        reduce using rule 23 (redirection -> NUMBER LESS_LESS WORD .)
    SEMI_SEMI_AND   reduce using rule 23 (redirection -> NUMBER LESS_LESS WORD .)
    ESAC            reduce using rule 23 (redirection -> NUMBER LESS_LESS WORD .)
    WORD            reduce using rule 23 (redirection -> NUMBER LESS_LESS WORD .)
    ASSIGNMENT_WORD reduce using rule 23 (redirection -> NUMBER LESS_LESS WORD .)


state 157

    (9) redirection -> NUMBER > WORD .

    >               reduce using rule 9 (redirection -> NUMBER > WORD .)
    <               reduce using rule 9 (redirection -> NUMBER > WORD .)
    NUMBER          reduce using rule 9 (redirection -> NUMBER > WORD .)
    REDIR_WORD      reduce using rule 9 (redirection -> NUMBER > WORD .)
    GREATER_GREATER reduce using rule 9 (redirection -> NUMBER > WORD .)
    GREATER_BAR     reduce using rule 9 (redirection -> NUMBER > WORD .)
    LESS_GREATER    reduce using rule 9 (redirection -> NUMBER > WORD .)
    LESS_LESS       reduce using rule 9 (redirection -> NUMBER > WORD .)
    LESS_LESS_MINUS reduce using rule 9 (redirection -> NUMBER > WORD .)
    LESS_LESS_LESS  reduce using rule 9 (redirection -> NUMBER > WORD .)
    LESS_AND        reduce using rule 9 (redirection -> NUMBER > WORD .)
    GREATER_AND     reduce using rule 9 (redirection -> NUMBER > WORD .)
    AND_GREATER     reduce using rule 9 (redirection -> NUMBER > WORD .)
    AND_GREATER_GREATER reduce using rule 9 (redirection -> NUMBER > WORD .)
    |               reduce using rule 9 (redirection -> NUMBER > WORD .)
    BAR_AND         reduce using rule 9 (redirection -> NUMBER > WORD .)
    &               reduce using rule 9 (redirection -> NUMBER > WORD .)
    ;               reduce using rule 9 (redirection -> NUMBER > WORD .)
    AND_AND         reduce using rule 9 (redirection -> NUMBER > WORD .)
    OR_OR           reduce using rule 9 (redirection -> NUMBER > WORD .)
    NEWLINE         reduce using rule 9 (redirection -> NUMBER > WORD .)
    DO              reduce using rule 9 (redirection -> NUMBER > WORD .)
    THEN            reduce using rule 9 (redirection -> NUMBER > WORD .)
    }               reduce using rule 9 (redirection -> NUMBER > WORD .)
    )               reduce using rule 9 (redirection -> NUMBER > WORD .)
    DONE            reduce using rule 9 (redirection -> NUMBER > WORD .)
    FI              reduce using rule 9 (redirection -> NUMBER > WORD .)
    ELSE            reduce using rule 9 (redirection -> NUMBER > WORD .)
    ELIF            reduce using rule 9 (redirection -> NUMBER > WORD .)
    SEMI_SEMI       reduce using rule 9 (redirection -> NUMBER > WORD .)
    SEMI_AND        reduce using rule 9 (redirection -> NUMBER > WORD .)
    SEMI_SEMI_AND   reduce using rule 9 (redirection -> NUMBER > WORD .)
    ESAC            reduce using rule 9 (redirection -> NUMBER > WORD .)
    WORD            reduce using rule 9 (redirection -> NUMBER > WORD .)
    ASSIGNMENT_WORD reduce using rule 9 (redirection -> NUMBER > WORD .)


state 158

    (29) redirection -> NUMBER LESS_LESS_LESS WORD .

    >               reduce using rule 29 (redirection -> NUMBER LESS_LESS_LESS WORD .)
    <               reduce using rule 29 (redirection -> NUMBER LESS_LESS_LESS WORD .)
    NUMBER          reduce using rule 29 (redirection -> NUMBER LESS_LESS_LESS WORD .)
    REDIR_WORD      reduce using rule 29 (redirection -> NUMBER LESS_LESS_LESS WORD .)
    GREATER_GREATER reduce using rule 29 (redirection -> NUMBER LESS_LESS_LESS WORD .)
    GREATER_BAR     reduce using rule 29 (redirection -> NUMBER LESS_LESS_LESS WORD .)
    LESS_GREATER    reduce using rule 29 (redirection -> NUMBER LESS_LESS_LESS WORD .)
    LESS_LESS       reduce using rule 29 (redirection -> NUMBER LESS_LESS_LESS WORD .)
    LESS_LESS_MINUS reduce using rule 29 (redirection -> NUMBER LESS_LESS_LESS WORD .)
    LESS_LESS_LESS  reduce using rule 29 (redirection -> NUMBER LESS_LESS_LESS WORD .)
    LESS_AND        reduce using rule 29 (redirection -> NUMBER LESS_LESS_LESS WORD .)
    GREATER_AND     reduce using rule 29 (redirection -> NUMBER LESS_LESS_LESS WORD .)
    AND_GREATER     reduce using rule 29 (redirection -> NUMBER LESS_LESS_LESS WORD .)
    AND_GREATER_GREATER reduce using rule 29 (redirection -> NUMBER LESS_LESS_LESS WORD .)
    |               reduce using rule 29 (redirection -> NUMBER LESS_LESS_LESS WORD .)
    BAR_AND         reduce using rule 29 (redirection -> NUMBER LESS_LESS_LESS WORD .)
    &               reduce using rule 29 (redirection -> NUMBER LESS_LESS_LESS WORD .)
    ;               reduce using rule 29 (redirection -> NUMBER LESS_LESS_LESS WORD .)
    AND_AND         reduce using rule 29 (redirection -> NUMBER LESS_LESS_LESS WORD .)
    OR_OR           reduce using rule 29 (redirection -> NUMBER LESS_LESS_LESS WORD .)
    NEWLINE         reduce using rule 29 (redirection -> NUMBER LESS_LESS_LESS WORD .)
    DO              reduce using rule 29 (redirection -> NUMBER LESS_LESS_LESS WORD .)
    THEN            reduce using rule 29 (redirection -> NUMBER LESS_LESS_LESS WORD .)
    }               reduce using rule 29 (redirection -> NUMBER LESS_LESS_LESS WORD .)
    )               reduce using rule 29 (redirection -> NUMBER LESS_LESS_LESS WORD .)
    DONE            reduce using rule 29 (redirection -> NUMBER LESS_LESS_LESS WORD .)
    FI              reduce using rule 29 (redirection -> NUMBER LESS_LESS_LESS WORD .)
    ELSE            reduce using rule 29 (redirection -> NUMBER LESS_LESS_LESS WORD .)
    ELIF            reduce using rule 29 (redirection -> NUMBER LESS_LESS_LESS WORD .)
    SEMI_SEMI       reduce using rule 29 (redirection -> NUMBER LESS_LESS_LESS WORD .)
    SEMI_AND        reduce using rule 29 (redirection -> NUMBER LESS_LESS_LESS WORD .)
    SEMI_SEMI_AND   reduce using rule 29 (redirection -> NUMBER LESS_LESS_LESS WORD .)
    ESAC            reduce using rule 29 (redirection -> NUMBER LESS_LESS_LESS WORD .)
    WORD            reduce using rule 29 (redirection -> NUMBER LESS_LESS_LESS WORD .)
    ASSIGNMENT_WORD reduce using rule 29 (redirection -> NUMBER LESS_LESS_LESS WORD .)


state 159

    (10) redirection -> NUMBER < WORD .

    >               reduce using rule 10 (redirection -> NUMBER < WORD .)
    <               reduce using rule 10 (redirection -> NUMBER < WORD .)
    NUMBER          reduce using rule 10 (redirection -> NUMBER < WORD .)
    REDIR_WORD      reduce using rule 10 (redirection -> NUMBER < WORD .)
    GREATER_GREATER reduce using rule 10 (redirection -> NUMBER < WORD .)
    GREATER_BAR     reduce using rule 10 (redirection -> NUMBER < WORD .)
    LESS_GREATER    reduce using rule 10 (redirection -> NUMBER < WORD .)
    LESS_LESS       reduce using rule 10 (redirection -> NUMBER < WORD .)
    LESS_LESS_MINUS reduce using rule 10 (redirection -> NUMBER < WORD .)
    LESS_LESS_LESS  reduce using rule 10 (redirection -> NUMBER < WORD .)
    LESS_AND        reduce using rule 10 (redirection -> NUMBER < WORD .)
    GREATER_AND     reduce using rule 10 (redirection -> NUMBER < WORD .)
    AND_GREATER     reduce using rule 10 (redirection -> NUMBER < WORD .)
    AND_GREATER_GREATER reduce using rule 10 (redirection -> NUMBER < WORD .)
    |               reduce using rule 10 (redirection -> NUMBER < WORD .)
    BAR_AND         reduce using rule 10 (redirection -> NUMBER < WORD .)
    &               reduce using rule 10 (redirection -> NUMBER < WORD .)
    ;               reduce using rule 10 (redirection -> NUMBER < WORD .)
    AND_AND         reduce using rule 10 (redirection -> NUMBER < WORD .)
    OR_OR           reduce using rule 10 (redirection -> NUMBER < WORD .)
    NEWLINE         reduce using rule 10 (redirection -> NUMBER < WORD .)
    DO              reduce using rule 10 (redirection -> NUMBER < WORD .)
    THEN            reduce using rule 10 (redirection -> NUMBER < WORD .)
    }               reduce using rule 10 (redirection -> NUMBER < WORD .)
    )               reduce using rule 10 (redirection -> NUMBER < WORD .)
    DONE            reduce using rule 10 (redirection -> NUMBER < WORD .)
    FI              reduce using rule 10 (redirection -> NUMBER < WORD .)
    ELSE            reduce using rule 10 (redirection -> NUMBER < WORD .)
    ELIF            reduce using rule 10 (redirection -> NUMBER < WORD .)
    SEMI_SEMI       reduce using rule 10 (redirection -> NUMBER < WORD .)
    SEMI_AND        reduce using rule 10 (redirection -> NUMBER < WORD .)
    SEMI_SEMI_AND   reduce using rule 10 (redirection -> NUMBER < WORD .)
    ESAC            reduce using rule 10 (redirection -> NUMBER < WORD .)
    WORD            reduce using rule 10 (redirection -> NUMBER < WORD .)
    ASSIGNMENT_WORD reduce using rule 10 (redirection -> NUMBER < WORD .)


state 160

    (47) redirection -> NUMBER LESS_AND - .

    >               reduce using rule 47 (redirection -> NUMBER LESS_AND - .)
    <               reduce using rule 47 (redirection -> NUMBER LESS_AND - .)
    NUMBER          reduce using rule 47 (redirection -> NUMBER LESS_AND - .)
    REDIR_WORD      reduce using rule 47 (redirection -> NUMBER LESS_AND - .)
    GREATER_GREATER reduce using rule 47 (redirection -> NUMBER LESS_AND - .)
    GREATER_BAR     reduce using rule 47 (redirection -> NUMBER LESS_AND - .)
    LESS_GREATER    reduce using rule 47 (redirection -> NUMBER LESS_AND - .)
    LESS_LESS       reduce using rule 47 (redirection -> NUMBER LESS_AND - .)
    LESS_LESS_MINUS reduce using rule 47 (redirection -> NUMBER LESS_AND - .)
    LESS_LESS_LESS  reduce using rule 47 (redirection -> NUMBER LESS_AND - .)
    LESS_AND        reduce using rule 47 (redirection -> NUMBER LESS_AND - .)
    GREATER_AND     reduce using rule 47 (redirection -> NUMBER LESS_AND - .)
    AND_GREATER     reduce using rule 47 (redirection -> NUMBER LESS_AND - .)
    AND_GREATER_GREATER reduce using rule 47 (redirection -> NUMBER LESS_AND - .)
    |               reduce using rule 47 (redirection -> NUMBER LESS_AND - .)
    BAR_AND         reduce using rule 47 (redirection -> NUMBER LESS_AND - .)
    &               reduce using rule 47 (redirection -> NUMBER LESS_AND - .)
    ;               reduce using rule 47 (redirection -> NUMBER LESS_AND - .)
    AND_AND         reduce using rule 47 (redirection -> NUMBER LESS_AND - .)
    OR_OR           reduce using rule 47 (redirection -> NUMBER LESS_AND - .)
    NEWLINE         reduce using rule 47 (redirection -> NUMBER LESS_AND - .)
    DO              reduce using rule 47 (redirection -> NUMBER LESS_AND - .)
    THEN            reduce using rule 47 (redirection -> NUMBER LESS_AND - .)
    }               reduce using rule 47 (redirection -> NUMBER LESS_AND - .)
    )               reduce using rule 47 (redirection -> NUMBER LESS_AND - .)
    DONE            reduce using rule 47 (redirection -> NUMBER LESS_AND - .)
    FI              reduce using rule 47 (redirection -> NUMBER LESS_AND - .)
    ELSE            reduce using rule 47 (redirection -> NUMBER LESS_AND - .)
    ELIF            reduce using rule 47 (redirection -> NUMBER LESS_AND - .)
    SEMI_SEMI       reduce using rule 47 (redirection -> NUMBER LESS_AND - .)
    SEMI_AND        reduce using rule 47 (redirection -> NUMBER LESS_AND - .)
    SEMI_SEMI_AND   reduce using rule 47 (redirection -> NUMBER LESS_AND - .)
    ESAC            reduce using rule 47 (redirection -> NUMBER LESS_AND - .)
    WORD            reduce using rule 47 (redirection -> NUMBER LESS_AND - .)
    ASSIGNMENT_WORD reduce using rule 47 (redirection -> NUMBER LESS_AND - .)


state 161

    (38) redirection -> NUMBER LESS_AND WORD .

    >               reduce using rule 38 (redirection -> NUMBER LESS_AND WORD .)
    <               reduce using rule 38 (redirection -> NUMBER LESS_AND WORD .)
    NUMBER          reduce using rule 38 (redirection -> NUMBER LESS_AND WORD .)
    REDIR_WORD      reduce using rule 38 (redirection -> NUMBER LESS_AND WORD .)
    GREATER_GREATER reduce using rule 38 (redirection -> NUMBER LESS_AND WORD .)
    GREATER_BAR     reduce using rule 38 (redirection -> NUMBER LESS_AND WORD .)
    LESS_GREATER    reduce using rule 38 (redirection -> NUMBER LESS_AND WORD .)
    LESS_LESS       reduce using rule 38 (redirection -> NUMBER LESS_AND WORD .)
    LESS_LESS_MINUS reduce using rule 38 (redirection -> NUMBER LESS_AND WORD .)
    LESS_LESS_LESS  reduce using rule 38 (redirection -> NUMBER LESS_AND WORD .)
    LESS_AND        reduce using rule 38 (redirection -> NUMBER LESS_AND WORD .)
    GREATER_AND     reduce using rule 38 (redirection -> NUMBER LESS_AND WORD .)
    AND_GREATER     reduce using rule 38 (redirection -> NUMBER LESS_AND WORD .)
    AND_GREATER_GREATER reduce using rule 38 (redirection -> NUMBER LESS_AND WORD .)
    |               reduce using rule 38 (redirection -> NUMBER LESS_AND WORD .)
    BAR_AND         reduce using rule 38 (redirection -> NUMBER LESS_AND WORD .)
    &               reduce using rule 38 (redirection -> NUMBER LESS_AND WORD .)
    ;               reduce using rule 38 (redirection -> NUMBER LESS_AND WORD .)
    AND_AND         reduce using rule 38 (redirection -> NUMBER LESS_AND WORD .)
    OR_OR           reduce using rule 38 (redirection -> NUMBER LESS_AND WORD .)
    NEWLINE         reduce using rule 38 (redirection -> NUMBER LESS_AND WORD .)
    DO              reduce using rule 38 (redirection -> NUMBER LESS_AND WORD .)
    THEN            reduce using rule 38 (redirection -> NUMBER LESS_AND WORD .)
    }               reduce using rule 38 (redirection -> NUMBER LESS_AND WORD .)
    )               reduce using rule 38 (redirection -> NUMBER LESS_AND WORD .)
    DONE            reduce using rule 38 (redirection -> NUMBER LESS_AND WORD .)
    FI              reduce using rule 38 (redirection -> NUMBER LESS_AND WORD .)
    ELSE            reduce using rule 38 (redirection -> NUMBER LESS_AND WORD .)
    ELIF            reduce using rule 38 (redirection -> NUMBER LESS_AND WORD .)
    SEMI_SEMI       reduce using rule 38 (redirection -> NUMBER LESS_AND WORD .)
    SEMI_AND        reduce using rule 38 (redirection -> NUMBER LESS_AND WORD .)
    SEMI_SEMI_AND   reduce using rule 38 (redirection -> NUMBER LESS_AND WORD .)
    ESAC            reduce using rule 38 (redirection -> NUMBER LESS_AND WORD .)
    WORD            reduce using rule 38 (redirection -> NUMBER LESS_AND WORD .)
    ASSIGNMENT_WORD reduce using rule 38 (redirection -> NUMBER LESS_AND WORD .)


state 162

    (32) redirection -> NUMBER LESS_AND NUMBER .

    >               reduce using rule 32 (redirection -> NUMBER LESS_AND NUMBER .)
    <               reduce using rule 32 (redirection -> NUMBER LESS_AND NUMBER .)
    NUMBER          reduce using rule 32 (redirection -> NUMBER LESS_AND NUMBER .)
    REDIR_WORD      reduce using rule 32 (redirection -> NUMBER LESS_AND NUMBER .)
    GREATER_GREATER reduce using rule 32 (redirection -> NUMBER LESS_AND NUMBER .)
    GREATER_BAR     reduce using rule 32 (redirection -> NUMBER LESS_AND NUMBER .)
    LESS_GREATER    reduce using rule 32 (redirection -> NUMBER LESS_AND NUMBER .)
    LESS_LESS       reduce using rule 32 (redirection -> NUMBER LESS_AND NUMBER .)
    LESS_LESS_MINUS reduce using rule 32 (redirection -> NUMBER LESS_AND NUMBER .)
    LESS_LESS_LESS  reduce using rule 32 (redirection -> NUMBER LESS_AND NUMBER .)
    LESS_AND        reduce using rule 32 (redirection -> NUMBER LESS_AND NUMBER .)
    GREATER_AND     reduce using rule 32 (redirection -> NUMBER LESS_AND NUMBER .)
    AND_GREATER     reduce using rule 32 (redirection -> NUMBER LESS_AND NUMBER .)
    AND_GREATER_GREATER reduce using rule 32 (redirection -> NUMBER LESS_AND NUMBER .)
    |               reduce using rule 32 (redirection -> NUMBER LESS_AND NUMBER .)
    BAR_AND         reduce using rule 32 (redirection -> NUMBER LESS_AND NUMBER .)
    &               reduce using rule 32 (redirection -> NUMBER LESS_AND NUMBER .)
    ;               reduce using rule 32 (redirection -> NUMBER LESS_AND NUMBER .)
    AND_AND         reduce using rule 32 (redirection -> NUMBER LESS_AND NUMBER .)
    OR_OR           reduce using rule 32 (redirection -> NUMBER LESS_AND NUMBER .)
    NEWLINE         reduce using rule 32 (redirection -> NUMBER LESS_AND NUMBER .)
    DO              reduce using rule 32 (redirection -> NUMBER LESS_AND NUMBER .)
    THEN            reduce using rule 32 (redirection -> NUMBER LESS_AND NUMBER .)
    }               reduce using rule 32 (redirection -> NUMBER LESS_AND NUMBER .)
    )               reduce using rule 32 (redirection -> NUMBER LESS_AND NUMBER .)
    DONE            reduce using rule 32 (redirection -> NUMBER LESS_AND NUMBER .)
    FI              reduce using rule 32 (redirection -> NUMBER LESS_AND NUMBER .)
    ELSE            reduce using rule 32 (redirection -> NUMBER LESS_AND NUMBER .)
    ELIF            reduce using rule 32 (redirection -> NUMBER LESS_AND NUMBER .)
    SEMI_SEMI       reduce using rule 32 (redirection -> NUMBER LESS_AND NUMBER .)
    SEMI_AND        reduce using rule 32 (redirection -> NUMBER LESS_AND NUMBER .)
    SEMI_SEMI_AND   reduce using rule 32 (redirection -> NUMBER LESS_AND NUMBER .)
    ESAC            reduce using rule 32 (redirection -> NUMBER LESS_AND NUMBER .)
    WORD            reduce using rule 32 (redirection -> NUMBER LESS_AND NUMBER .)
    ASSIGNMENT_WORD reduce using rule 32 (redirection -> NUMBER LESS_AND NUMBER .)


state 163

    (44) redirection -> NUMBER GREATER_AND - .

    >               reduce using rule 44 (redirection -> NUMBER GREATER_AND - .)
    <               reduce using rule 44 (redirection -> NUMBER GREATER_AND - .)
    NUMBER          reduce using rule 44 (redirection -> NUMBER GREATER_AND - .)
    REDIR_WORD      reduce using rule 44 (redirection -> NUMBER GREATER_AND - .)
    GREATER_GREATER reduce using rule 44 (redirection -> NUMBER GREATER_AND - .)
    GREATER_BAR     reduce using rule 44 (redirection -> NUMBER GREATER_AND - .)
    LESS_GREATER    reduce using rule 44 (redirection -> NUMBER GREATER_AND - .)
    LESS_LESS       reduce using rule 44 (redirection -> NUMBER GREATER_AND - .)
    LESS_LESS_MINUS reduce using rule 44 (redirection -> NUMBER GREATER_AND - .)
    LESS_LESS_LESS  reduce using rule 44 (redirection -> NUMBER GREATER_AND - .)
    LESS_AND        reduce using rule 44 (redirection -> NUMBER GREATER_AND - .)
    GREATER_AND     reduce using rule 44 (redirection -> NUMBER GREATER_AND - .)
    AND_GREATER     reduce using rule 44 (redirection -> NUMBER GREATER_AND - .)
    AND_GREATER_GREATER reduce using rule 44 (redirection -> NUMBER GREATER_AND - .)
    |               reduce using rule 44 (redirection -> NUMBER GREATER_AND - .)
    BAR_AND         reduce using rule 44 (redirection -> NUMBER GREATER_AND - .)
    &               reduce using rule 44 (redirection -> NUMBER GREATER_AND - .)
    ;               reduce using rule 44 (redirection -> NUMBER GREATER_AND - .)
    AND_AND         reduce using rule 44 (redirection -> NUMBER GREATER_AND - .)
    OR_OR           reduce using rule 44 (redirection -> NUMBER GREATER_AND - .)
    NEWLINE         reduce using rule 44 (redirection -> NUMBER GREATER_AND - .)
    DO              reduce using rule 44 (redirection -> NUMBER GREATER_AND - .)
    THEN            reduce using rule 44 (redirection -> NUMBER GREATER_AND - .)
    }               reduce using rule 44 (redirection -> NUMBER GREATER_AND - .)
    )               reduce using rule 44 (redirection -> NUMBER GREATER_AND - .)
    DONE            reduce using rule 44 (redirection -> NUMBER GREATER_AND - .)
    FI              reduce using rule 44 (redirection -> NUMBER GREATER_AND - .)
    ELSE            reduce using rule 44 (redirection -> NUMBER GREATER_AND - .)
    ELIF            reduce using rule 44 (redirection -> NUMBER GREATER_AND - .)
    SEMI_SEMI       reduce using rule 44 (redirection -> NUMBER GREATER_AND - .)
    SEMI_AND        reduce using rule 44 (redirection -> NUMBER GREATER_AND - .)
    SEMI_SEMI_AND   reduce using rule 44 (redirection -> NUMBER GREATER_AND - .)
    ESAC            reduce using rule 44 (redirection -> NUMBER GREATER_AND - .)
    WORD            reduce using rule 44 (redirection -> NUMBER GREATER_AND - .)
    ASSIGNMENT_WORD reduce using rule 44 (redirection -> NUMBER GREATER_AND - .)


state 164

    (41) redirection -> NUMBER GREATER_AND WORD .

    >               reduce using rule 41 (redirection -> NUMBER GREATER_AND WORD .)
    <               reduce using rule 41 (redirection -> NUMBER GREATER_AND WORD .)
    NUMBER          reduce using rule 41 (redirection -> NUMBER GREATER_AND WORD .)
    REDIR_WORD      reduce using rule 41 (redirection -> NUMBER GREATER_AND WORD .)
    GREATER_GREATER reduce using rule 41 (redirection -> NUMBER GREATER_AND WORD .)
    GREATER_BAR     reduce using rule 41 (redirection -> NUMBER GREATER_AND WORD .)
    LESS_GREATER    reduce using rule 41 (redirection -> NUMBER GREATER_AND WORD .)
    LESS_LESS       reduce using rule 41 (redirection -> NUMBER GREATER_AND WORD .)
    LESS_LESS_MINUS reduce using rule 41 (redirection -> NUMBER GREATER_AND WORD .)
    LESS_LESS_LESS  reduce using rule 41 (redirection -> NUMBER GREATER_AND WORD .)
    LESS_AND        reduce using rule 41 (redirection -> NUMBER GREATER_AND WORD .)
    GREATER_AND     reduce using rule 41 (redirection -> NUMBER GREATER_AND WORD .)
    AND_GREATER     reduce using rule 41 (redirection -> NUMBER GREATER_AND WORD .)
    AND_GREATER_GREATER reduce using rule 41 (redirection -> NUMBER GREATER_AND WORD .)
    |               reduce using rule 41 (redirection -> NUMBER GREATER_AND WORD .)
    BAR_AND         reduce using rule 41 (redirection -> NUMBER GREATER_AND WORD .)
    &               reduce using rule 41 (redirection -> NUMBER GREATER_AND WORD .)
    ;               reduce using rule 41 (redirection -> NUMBER GREATER_AND WORD .)
    AND_AND         reduce using rule 41 (redirection -> NUMBER GREATER_AND WORD .)
    OR_OR           reduce using rule 41 (redirection -> NUMBER GREATER_AND WORD .)
    NEWLINE         reduce using rule 41 (redirection -> NUMBER GREATER_AND WORD .)
    DO              reduce using rule 41 (redirection -> NUMBER GREATER_AND WORD .)
    THEN            reduce using rule 41 (redirection -> NUMBER GREATER_AND WORD .)
    }               reduce using rule 41 (redirection -> NUMBER GREATER_AND WORD .)
    )               reduce using rule 41 (redirection -> NUMBER GREATER_AND WORD .)
    DONE            reduce using rule 41 (redirection -> NUMBER GREATER_AND WORD .)
    FI              reduce using rule 41 (redirection -> NUMBER GREATER_AND WORD .)
    ELSE            reduce using rule 41 (redirection -> NUMBER GREATER_AND WORD .)
    ELIF            reduce using rule 41 (redirection -> NUMBER GREATER_AND WORD .)
    SEMI_SEMI       reduce using rule 41 (redirection -> NUMBER GREATER_AND WORD .)
    SEMI_AND        reduce using rule 41 (redirection -> NUMBER GREATER_AND WORD .)
    SEMI_SEMI_AND   reduce using rule 41 (redirection -> NUMBER GREATER_AND WORD .)
    ESAC            reduce using rule 41 (redirection -> NUMBER GREATER_AND WORD .)
    WORD            reduce using rule 41 (redirection -> NUMBER GREATER_AND WORD .)
    ASSIGNMENT_WORD reduce using rule 41 (redirection -> NUMBER GREATER_AND WORD .)


state 165

    (35) redirection -> NUMBER GREATER_AND NUMBER .

    >               reduce using rule 35 (redirection -> NUMBER GREATER_AND NUMBER .)
    <               reduce using rule 35 (redirection -> NUMBER GREATER_AND NUMBER .)
    NUMBER          reduce using rule 35 (redirection -> NUMBER GREATER_AND NUMBER .)
    REDIR_WORD      reduce using rule 35 (redirection -> NUMBER GREATER_AND NUMBER .)
    GREATER_GREATER reduce using rule 35 (redirection -> NUMBER GREATER_AND NUMBER .)
    GREATER_BAR     reduce using rule 35 (redirection -> NUMBER GREATER_AND NUMBER .)
    LESS_GREATER    reduce using rule 35 (redirection -> NUMBER GREATER_AND NUMBER .)
    LESS_LESS       reduce using rule 35 (redirection -> NUMBER GREATER_AND NUMBER .)
    LESS_LESS_MINUS reduce using rule 35 (redirection -> NUMBER GREATER_AND NUMBER .)
    LESS_LESS_LESS  reduce using rule 35 (redirection -> NUMBER GREATER_AND NUMBER .)
    LESS_AND        reduce using rule 35 (redirection -> NUMBER GREATER_AND NUMBER .)
    GREATER_AND     reduce using rule 35 (redirection -> NUMBER GREATER_AND NUMBER .)
    AND_GREATER     reduce using rule 35 (redirection -> NUMBER GREATER_AND NUMBER .)
    AND_GREATER_GREATER reduce using rule 35 (redirection -> NUMBER GREATER_AND NUMBER .)
    |               reduce using rule 35 (redirection -> NUMBER GREATER_AND NUMBER .)
    BAR_AND         reduce using rule 35 (redirection -> NUMBER GREATER_AND NUMBER .)
    &               reduce using rule 35 (redirection -> NUMBER GREATER_AND NUMBER .)
    ;               reduce using rule 35 (redirection -> NUMBER GREATER_AND NUMBER .)
    AND_AND         reduce using rule 35 (redirection -> NUMBER GREATER_AND NUMBER .)
    OR_OR           reduce using rule 35 (redirection -> NUMBER GREATER_AND NUMBER .)
    NEWLINE         reduce using rule 35 (redirection -> NUMBER GREATER_AND NUMBER .)
    DO              reduce using rule 35 (redirection -> NUMBER GREATER_AND NUMBER .)
    THEN            reduce using rule 35 (redirection -> NUMBER GREATER_AND NUMBER .)
    }               reduce using rule 35 (redirection -> NUMBER GREATER_AND NUMBER .)
    )               reduce using rule 35 (redirection -> NUMBER GREATER_AND NUMBER .)
    DONE            reduce using rule 35 (redirection -> NUMBER GREATER_AND NUMBER .)
    FI              reduce using rule 35 (redirection -> NUMBER GREATER_AND NUMBER .)
    ELSE            reduce using rule 35 (redirection -> NUMBER GREATER_AND NUMBER .)
    ELIF            reduce using rule 35 (redirection -> NUMBER GREATER_AND NUMBER .)
    SEMI_SEMI       reduce using rule 35 (redirection -> NUMBER GREATER_AND NUMBER .)
    SEMI_AND        reduce using rule 35 (redirection -> NUMBER GREATER_AND NUMBER .)
    SEMI_SEMI_AND   reduce using rule 35 (redirection -> NUMBER GREATER_AND NUMBER .)
    ESAC            reduce using rule 35 (redirection -> NUMBER GREATER_AND NUMBER .)
    WORD            reduce using rule 35 (redirection -> NUMBER GREATER_AND NUMBER .)
    ASSIGNMENT_WORD reduce using rule 35 (redirection -> NUMBER GREATER_AND NUMBER .)


state 166

    (109) group_command -> { compound_list } .

    >               reduce using rule 109 (group_command -> { compound_list } .)
    <               reduce using rule 109 (group_command -> { compound_list } .)
    NUMBER          reduce using rule 109 (group_command -> { compound_list } .)
    REDIR_WORD      reduce using rule 109 (group_command -> { compound_list } .)
    GREATER_GREATER reduce using rule 109 (group_command -> { compound_list } .)
    GREATER_BAR     reduce using rule 109 (group_command -> { compound_list } .)
    LESS_GREATER    reduce using rule 109 (group_command -> { compound_list } .)
    LESS_LESS       reduce using rule 109 (group_command -> { compound_list } .)
    LESS_LESS_MINUS reduce using rule 109 (group_command -> { compound_list } .)
    LESS_LESS_LESS  reduce using rule 109 (group_command -> { compound_list } .)
    LESS_AND        reduce using rule 109 (group_command -> { compound_list } .)
    GREATER_AND     reduce using rule 109 (group_command -> { compound_list } .)
    AND_GREATER     reduce using rule 109 (group_command -> { compound_list } .)
    AND_GREATER_GREATER reduce using rule 109 (group_command -> { compound_list } .)
    |               reduce using rule 109 (group_command -> { compound_list } .)
    BAR_AND         reduce using rule 109 (group_command -> { compound_list } .)
    AND_AND         reduce using rule 109 (group_command -> { compound_list } .)
    OR_OR           reduce using rule 109 (group_command -> { compound_list } .)
    &               reduce using rule 109 (group_command -> { compound_list } .)
    ;               reduce using rule 109 (group_command -> { compound_list } .)
    NEWLINE         reduce using rule 109 (group_command -> { compound_list } .)
    DO              reduce using rule 109 (group_command -> { compound_list } .)
    THEN            reduce using rule 109 (group_command -> { compound_list } .)
    }               reduce using rule 109 (group_command -> { compound_list } .)
    )               reduce using rule 109 (group_command -> { compound_list } .)
    DONE            reduce using rule 109 (group_command -> { compound_list } .)
    FI              reduce using rule 109 (group_command -> { compound_list } .)
    ELSE            reduce using rule 109 (group_command -> { compound_list } .)
    ELIF            reduce using rule 109 (group_command -> { compound_list } .)
    SEMI_SEMI       reduce using rule 109 (group_command -> { compound_list } .)
    SEMI_AND        reduce using rule 109 (group_command -> { compound_list } .)
    SEMI_SEMI_AND   reduce using rule 109 (group_command -> { compound_list } .)
    ESAC            reduce using rule 109 (group_command -> { compound_list } .)


state 167

    (111) cond_command -> COND_START COND_CMD COND_END .

    >               reduce using rule 111 (cond_command -> COND_START COND_CMD COND_END .)
    <               reduce using rule 111 (cond_command -> COND_START COND_CMD COND_END .)
    NUMBER          reduce using rule 111 (cond_command -> COND_START COND_CMD COND_END .)
    REDIR_WORD      reduce using rule 111 (cond_command -> COND_START COND_CMD COND_END .)
    GREATER_GREATER reduce using rule 111 (cond_command -> COND_START COND_CMD COND_END .)
    GREATER_BAR     reduce using rule 111 (cond_command -> COND_START COND_CMD COND_END .)
    LESS_GREATER    reduce using rule 111 (cond_command -> COND_START COND_CMD COND_END .)
    LESS_LESS       reduce using rule 111 (cond_command -> COND_START COND_CMD COND_END .)
    LESS_LESS_MINUS reduce using rule 111 (cond_command -> COND_START COND_CMD COND_END .)
    LESS_LESS_LESS  reduce using rule 111 (cond_command -> COND_START COND_CMD COND_END .)
    LESS_AND        reduce using rule 111 (cond_command -> COND_START COND_CMD COND_END .)
    GREATER_AND     reduce using rule 111 (cond_command -> COND_START COND_CMD COND_END .)
    AND_GREATER     reduce using rule 111 (cond_command -> COND_START COND_CMD COND_END .)
    AND_GREATER_GREATER reduce using rule 111 (cond_command -> COND_START COND_CMD COND_END .)
    |               reduce using rule 111 (cond_command -> COND_START COND_CMD COND_END .)
    BAR_AND         reduce using rule 111 (cond_command -> COND_START COND_CMD COND_END .)
    AND_AND         reduce using rule 111 (cond_command -> COND_START COND_CMD COND_END .)
    OR_OR           reduce using rule 111 (cond_command -> COND_START COND_CMD COND_END .)
    &               reduce using rule 111 (cond_command -> COND_START COND_CMD COND_END .)
    ;               reduce using rule 111 (cond_command -> COND_START COND_CMD COND_END .)
    NEWLINE         reduce using rule 111 (cond_command -> COND_START COND_CMD COND_END .)
    DO              reduce using rule 111 (cond_command -> COND_START COND_CMD COND_END .)
    THEN            reduce using rule 111 (cond_command -> COND_START COND_CMD COND_END .)
    }               reduce using rule 111 (cond_command -> COND_START COND_CMD COND_END .)
    )               reduce using rule 111 (cond_command -> COND_START COND_CMD COND_END .)
    DONE            reduce using rule 111 (cond_command -> COND_START COND_CMD COND_END .)
    FI              reduce using rule 111 (cond_command -> COND_START COND_CMD COND_END .)
    ELSE            reduce using rule 111 (cond_command -> COND_START COND_CMD COND_END .)
    ELIF            reduce using rule 111 (cond_command -> COND_START COND_CMD COND_END .)
    SEMI_SEMI       reduce using rule 111 (cond_command -> COND_START COND_CMD COND_END .)
    SEMI_AND        reduce using rule 111 (cond_command -> COND_START COND_CMD COND_END .)
    SEMI_SEMI_AND   reduce using rule 111 (cond_command -> COND_START COND_CMD COND_END .)
    ESAC            reduce using rule 111 (cond_command -> COND_START COND_CMD COND_END .)


state 168

    (55) redirection_list -> redirection_list redirection .

    >               reduce using rule 55 (redirection_list -> redirection_list redirection .)
    <               reduce using rule 55 (redirection_list -> redirection_list redirection .)
    NUMBER          reduce using rule 55 (redirection_list -> redirection_list redirection .)
    REDIR_WORD      reduce using rule 55 (redirection_list -> redirection_list redirection .)
    GREATER_GREATER reduce using rule 55 (redirection_list -> redirection_list redirection .)
    GREATER_BAR     reduce using rule 55 (redirection_list -> redirection_list redirection .)
    LESS_GREATER    reduce using rule 55 (redirection_list -> redirection_list redirection .)
    LESS_LESS       reduce using rule 55 (redirection_list -> redirection_list redirection .)
    LESS_LESS_MINUS reduce using rule 55 (redirection_list -> redirection_list redirection .)
    LESS_LESS_LESS  reduce using rule 55 (redirection_list -> redirection_list redirection .)
    LESS_AND        reduce using rule 55 (redirection_list -> redirection_list redirection .)
    GREATER_AND     reduce using rule 55 (redirection_list -> redirection_list redirection .)
    AND_GREATER     reduce using rule 55 (redirection_list -> redirection_list redirection .)
    AND_GREATER_GREATER reduce using rule 55 (redirection_list -> redirection_list redirection .)
    |               reduce using rule 55 (redirection_list -> redirection_list redirection .)
    BAR_AND         reduce using rule 55 (redirection_list -> redirection_list redirection .)
    &               reduce using rule 55 (redirection_list -> redirection_list redirection .)
    ;               reduce using rule 55 (redirection_list -> redirection_list redirection .)
    AND_AND         reduce using rule 55 (redirection_list -> redirection_list redirection .)
    OR_OR           reduce using rule 55 (redirection_list -> redirection_list redirection .)
    NEWLINE         reduce using rule 55 (redirection_list -> redirection_list redirection .)
    DO              reduce using rule 55 (redirection_list -> redirection_list redirection .)
    THEN            reduce using rule 55 (redirection_list -> redirection_list redirection .)
    }               reduce using rule 55 (redirection_list -> redirection_list redirection .)
    )               reduce using rule 55 (redirection_list -> redirection_list redirection .)
    DONE            reduce using rule 55 (redirection_list -> redirection_list redirection .)
    FI              reduce using rule 55 (redirection_list -> redirection_list redirection .)
    ELSE            reduce using rule 55 (redirection_list -> redirection_list redirection .)
    ELIF            reduce using rule 55 (redirection_list -> redirection_list redirection .)
    SEMI_SEMI       reduce using rule 55 (redirection_list -> redirection_list redirection .)
    SEMI_AND        reduce using rule 55 (redirection_list -> redirection_list redirection .)
    SEMI_SEMI_AND   reduce using rule 55 (redirection_list -> redirection_list redirection .)
    ESAC            reduce using rule 55 (redirection_list -> redirection_list redirection .)


state 169

    (74) for_command -> FOR WORD newline_list . DO compound_list DONE
    (75) for_command -> FOR WORD newline_list . { compound_list }
    (78) for_command -> FOR WORD newline_list . IN word_list list_terminator newline_list DO compound_list DONE
    (79) for_command -> FOR WORD newline_list . IN word_list list_terminator newline_list { compound_list }
    (80) for_command -> FOR WORD newline_list . IN list_terminator newline_list DO compound_list DONE
    (81) for_command -> FOR WORD newline_list . IN list_terminator newline_list { compound_list }
    (145) newline_list -> newline_list . NEWLINE

    DO              shift and go to state 200
    {               shift and go to state 199
    IN              shift and go to state 198
    NEWLINE         shift and go to state 128


state 170

    (76) for_command -> FOR WORD ; . newline_list DO compound_list DONE
    (77) for_command -> FOR WORD ; . newline_list { compound_list }
    (144) newline_list -> .
    (145) newline_list -> . newline_list NEWLINE

    DO              reduce using rule 144 (newline_list -> .)
    {               reduce using rule 144 (newline_list -> .)
    NEWLINE         reduce using rule 144 (newline_list -> .)

    newline_list                   shift and go to state 201

state 171

    (82) arith_for_command -> FOR ARITH_FOR_EXPRS list_terminator . newline_list DO compound_list DONE
    (83) arith_for_command -> FOR ARITH_FOR_EXPRS list_terminator . newline_list { compound_list }
    (144) newline_list -> .
    (145) newline_list -> . newline_list NEWLINE

    DO              reduce using rule 144 (newline_list -> .)
    {               reduce using rule 144 (newline_list -> .)
    NEWLINE         reduce using rule 144 (newline_list -> .)

    newline_list                   shift and go to state 202

state 172

    (85) arith_for_command -> FOR ARITH_FOR_EXPRS { . compound_list }
    (130) compound_list -> . list
    (131) compound_list -> . newline_list list1
    (129) list -> . newline_list list0
    (144) newline_list -> .
    (145) newline_list -> . newline_list NEWLINE

    NEWLINE         reduce using rule 144 (newline_list -> .)
    BANG            reduce using rule 144 (newline_list -> .)
    TIME            reduce using rule 144 (newline_list -> .)
    WHILE           reduce using rule 144 (newline_list -> .)
    UNTIL           reduce using rule 144 (newline_list -> .)
    WORD            reduce using rule 144 (newline_list -> .)
    FUNCTION        reduce using rule 144 (newline_list -> .)
    COPROC          reduce using rule 144 (newline_list -> .)
    ASSIGNMENT_WORD reduce using rule 144 (newline_list -> .)
    FOR             reduce using rule 144 (newline_list -> .)
    CASE            reduce using rule 144 (newline_list -> .)
    SELECT          reduce using rule 144 (newline_list -> .)
    IF              reduce using rule 144 (newline_list -> .)
    (               reduce using rule 144 (newline_list -> .)
    {               reduce using rule 144 (newline_list -> .)
    ARITH_CMD       reduce using rule 144 (newline_list -> .)
    COND_START      reduce using rule 144 (newline_list -> .)
    >               reduce using rule 144 (newline_list -> .)
    <               reduce using rule 144 (newline_list -> .)
    NUMBER          reduce using rule 144 (newline_list -> .)
    REDIR_WORD      reduce using rule 144 (newline_list -> .)
    GREATER_GREATER reduce using rule 144 (newline_list -> .)
    GREATER_BAR     reduce using rule 144 (newline_list -> .)
    LESS_GREATER    reduce using rule 144 (newline_list -> .)
    LESS_LESS       reduce using rule 144 (newline_list -> .)
    LESS_LESS_MINUS reduce using rule 144 (newline_list -> .)
    LESS_LESS_LESS  reduce using rule 144 (newline_list -> .)
    LESS_AND        reduce using rule 144 (newline_list -> .)
    GREATER_AND     reduce using rule 144 (newline_list -> .)
    AND_GREATER     reduce using rule 144 (newline_list -> .)
    AND_GREATER_GREATER reduce using rule 144 (newline_list -> .)

    newline_list                   shift and go to state 56
    compound_list                  shift and go to state 203
    list                           shift and go to state 58

state 173

    (84) arith_for_command -> FOR ARITH_FOR_EXPRS DO . compound_list DONE
    (130) compound_list -> . list
    (131) compound_list -> . newline_list list1
    (129) list -> . newline_list list0
    (144) newline_list -> .
    (145) newline_list -> . newline_list NEWLINE

    NEWLINE         reduce using rule 144 (newline_list -> .)
    BANG            reduce using rule 144 (newline_list -> .)
    TIME            reduce using rule 144 (newline_list -> .)
    WHILE           reduce using rule 144 (newline_list -> .)
    UNTIL           reduce using rule 144 (newline_list -> .)
    WORD            reduce using rule 144 (newline_list -> .)
    FUNCTION        reduce using rule 144 (newline_list -> .)
    COPROC          reduce using rule 144 (newline_list -> .)
    ASSIGNMENT_WORD reduce using rule 144 (newline_list -> .)
    FOR             reduce using rule 144 (newline_list -> .)
    CASE            reduce using rule 144 (newline_list -> .)
    SELECT          reduce using rule 144 (newline_list -> .)
    IF              reduce using rule 144 (newline_list -> .)
    (               reduce using rule 144 (newline_list -> .)
    {               reduce using rule 144 (newline_list -> .)
    ARITH_CMD       reduce using rule 144 (newline_list -> .)
    COND_START      reduce using rule 144 (newline_list -> .)
    >               reduce using rule 144 (newline_list -> .)
    <               reduce using rule 144 (newline_list -> .)
    NUMBER          reduce using rule 144 (newline_list -> .)
    REDIR_WORD      reduce using rule 144 (newline_list -> .)
    GREATER_GREATER reduce using rule 144 (newline_list -> .)
    GREATER_BAR     reduce using rule 144 (newline_list -> .)
    LESS_GREATER    reduce using rule 144 (newline_list -> .)
    LESS_LESS       reduce using rule 144 (newline_list -> .)
    LESS_LESS_MINUS reduce using rule 144 (newline_list -> .)
    LESS_LESS_LESS  reduce using rule 144 (newline_list -> .)
    LESS_AND        reduce using rule 144 (newline_list -> .)
    GREATER_AND     reduce using rule 144 (newline_list -> .)
    AND_GREATER     reduce using rule 144 (newline_list -> .)
    AND_GREATER_GREATER reduce using rule 144 (newline_list -> .)

    newline_list                   shift and go to state 56
    compound_list                  shift and go to state 204
    list                           shift and go to state 58

state 174

    (65) shell_command -> WHILE compound_list DO . compound_list DONE
    (130) compound_list -> . list
    (131) compound_list -> . newline_list list1
    (129) list -> . newline_list list0
    (144) newline_list -> .
    (145) newline_list -> . newline_list NEWLINE

    NEWLINE         reduce using rule 144 (newline_list -> .)
    BANG            reduce using rule 144 (newline_list -> .)
    TIME            reduce using rule 144 (newline_list -> .)
    WHILE           reduce using rule 144 (newline_list -> .)
    UNTIL           reduce using rule 144 (newline_list -> .)
    WORD            reduce using rule 144 (newline_list -> .)
    FUNCTION        reduce using rule 144 (newline_list -> .)
    COPROC          reduce using rule 144 (newline_list -> .)
    ASSIGNMENT_WORD reduce using rule 144 (newline_list -> .)
    FOR             reduce using rule 144 (newline_list -> .)
    CASE            reduce using rule 144 (newline_list -> .)
    SELECT          reduce using rule 144 (newline_list -> .)
    IF              reduce using rule 144 (newline_list -> .)
    (               reduce using rule 144 (newline_list -> .)
    {               reduce using rule 144 (newline_list -> .)
    ARITH_CMD       reduce using rule 144 (newline_list -> .)
    COND_START      reduce using rule 144 (newline_list -> .)
    >               reduce using rule 144 (newline_list -> .)
    <               reduce using rule 144 (newline_list -> .)
    NUMBER          reduce using rule 144 (newline_list -> .)
    REDIR_WORD      reduce using rule 144 (newline_list -> .)
    GREATER_GREATER reduce using rule 144 (newline_list -> .)
    GREATER_BAR     reduce using rule 144 (newline_list -> .)
    LESS_GREATER    reduce using rule 144 (newline_list -> .)
    LESS_LESS       reduce using rule 144 (newline_list -> .)
    LESS_LESS_MINUS reduce using rule 144 (newline_list -> .)
    LESS_LESS_LESS  reduce using rule 144 (newline_list -> .)
    LESS_AND        reduce using rule 144 (newline_list -> .)
    GREATER_AND     reduce using rule 144 (newline_list -> .)
    AND_GREATER     reduce using rule 144 (newline_list -> .)
    AND_GREATER_GREATER reduce using rule 144 (newline_list -> .)

    newline_list                   shift and go to state 56
    compound_list                  shift and go to state 205
    list                           shift and go to state 58

state 175

    (100) subshell -> ( compound_list ) .

    >               reduce using rule 100 (subshell -> ( compound_list ) .)
    <               reduce using rule 100 (subshell -> ( compound_list ) .)
    NUMBER          reduce using rule 100 (subshell -> ( compound_list ) .)
    REDIR_WORD      reduce using rule 100 (subshell -> ( compound_list ) .)
    GREATER_GREATER reduce using rule 100 (subshell -> ( compound_list ) .)
    GREATER_BAR     reduce using rule 100 (subshell -> ( compound_list ) .)
    LESS_GREATER    reduce using rule 100 (subshell -> ( compound_list ) .)
    LESS_LESS       reduce using rule 100 (subshell -> ( compound_list ) .)
    LESS_LESS_MINUS reduce using rule 100 (subshell -> ( compound_list ) .)
    LESS_LESS_LESS  reduce using rule 100 (subshell -> ( compound_list ) .)
    LESS_AND        reduce using rule 100 (subshell -> ( compound_list ) .)
    GREATER_AND     reduce using rule 100 (subshell -> ( compound_list ) .)
    AND_GREATER     reduce using rule 100 (subshell -> ( compound_list ) .)
    AND_GREATER_GREATER reduce using rule 100 (subshell -> ( compound_list ) .)
    |               reduce using rule 100 (subshell -> ( compound_list ) .)
    BAR_AND         reduce using rule 100 (subshell -> ( compound_list ) .)
    AND_AND         reduce using rule 100 (subshell -> ( compound_list ) .)
    OR_OR           reduce using rule 100 (subshell -> ( compound_list ) .)
    &               reduce using rule 100 (subshell -> ( compound_list ) .)
    ;               reduce using rule 100 (subshell -> ( compound_list ) .)
    NEWLINE         reduce using rule 100 (subshell -> ( compound_list ) .)
    DO              reduce using rule 100 (subshell -> ( compound_list ) .)
    THEN            reduce using rule 100 (subshell -> ( compound_list ) .)
    }               reduce using rule 100 (subshell -> ( compound_list ) .)
    )               reduce using rule 100 (subshell -> ( compound_list ) .)
    DONE            reduce using rule 100 (subshell -> ( compound_list ) .)
    FI              reduce using rule 100 (subshell -> ( compound_list ) .)
    ELSE            reduce using rule 100 (subshell -> ( compound_list ) .)
    ELIF            reduce using rule 100 (subshell -> ( compound_list ) .)
    SEMI_SEMI       reduce using rule 100 (subshell -> ( compound_list ) .)
    SEMI_AND        reduce using rule 100 (subshell -> ( compound_list ) .)
    SEMI_SEMI_AND   reduce using rule 100 (subshell -> ( compound_list ) .)
    ESAC            reduce using rule 100 (subshell -> ( compound_list ) .)


state 176

    (86) select_command -> SELECT WORD newline_list . DO list DONE
    (87) select_command -> SELECT WORD newline_list . { list }
    (90) select_command -> SELECT WORD newline_list . IN word_list list_terminator newline_list DO list DONE
    (91) select_command -> SELECT WORD newline_list . IN word_list list_terminator newline_list { list }
    (145) newline_list -> newline_list . NEWLINE

    DO              shift and go to state 208
    {               shift and go to state 207
    IN              shift and go to state 206
    NEWLINE         shift and go to state 128


state 177

    (88) select_command -> SELECT WORD ; . newline_list DO list DONE
    (89) select_command -> SELECT WORD ; . newline_list { list }
    (144) newline_list -> .
    (145) newline_list -> . newline_list NEWLINE

    DO              reduce using rule 144 (newline_list -> .)
    {               reduce using rule 144 (newline_list -> .)
    NEWLINE         reduce using rule 144 (newline_list -> .)

    newline_list                   shift and go to state 209

state 178

    (102) coproc -> COPROC shell_command redirection_list .
    (55) redirection_list -> redirection_list . redirection
    (7) redirection -> . > WORD
    (8) redirection -> . < WORD
    (9) redirection -> . NUMBER > WORD
    (10) redirection -> . NUMBER < WORD
    (11) redirection -> . REDIR_WORD > WORD
    (12) redirection -> . REDIR_WORD < WORD
    (13) redirection -> . GREATER_GREATER WORD
    (14) redirection -> . NUMBER GREATER_GREATER WORD
    (15) redirection -> . REDIR_WORD GREATER_GREATER WORD
    (16) redirection -> . GREATER_BAR WORD
    (17) redirection -> . NUMBER GREATER_BAR WORD
    (18) redirection -> . REDIR_WORD GREATER_BAR WORD
    (19) redirection -> . LESS_GREATER WORD
    (20) redirection -> . NUMBER LESS_GREATER WORD
    (21) redirection -> . REDIR_WORD LESS_GREATER WORD
    (22) redirection -> . LESS_LESS WORD
    (23) redirection -> . NUMBER LESS_LESS WORD
    (24) redirection -> . REDIR_WORD LESS_LESS WORD
    (25) redirection -> . LESS_LESS_MINUS WORD
    (26) redirection -> . NUMBER LESS_LESS_MINUS WORD
    (27) redirection -> . REDIR_WORD LESS_LESS_MINUS WORD
    (28) redirection -> . LESS_LESS_LESS WORD
    (29) redirection -> . NUMBER LESS_LESS_LESS WORD
    (30) redirection -> . REDIR_WORD LESS_LESS_LESS WORD
    (31) redirection -> . LESS_AND NUMBER
    (32) redirection -> . NUMBER LESS_AND NUMBER
    (33) redirection -> . REDIR_WORD LESS_AND NUMBER
    (34) redirection -> . GREATER_AND NUMBER
    (35) redirection -> . NUMBER GREATER_AND NUMBER
    (36) redirection -> . REDIR_WORD GREATER_AND NUMBER
    (37) redirection -> . LESS_AND WORD
    (38) redirection -> . NUMBER LESS_AND WORD
    (39) redirection -> . REDIR_WORD LESS_AND WORD
    (40) redirection -> . GREATER_AND WORD
    (41) redirection -> . NUMBER GREATER_AND WORD
    (42) redirection -> . REDIR_WORD GREATER_AND WORD
    (43) redirection -> . GREATER_AND -
    (44) redirection -> . NUMBER GREATER_AND -
    (45) redirection -> . REDIR_WORD GREATER_AND -
    (46) redirection -> . LESS_AND -
    (47) redirection -> . NUMBER LESS_AND -
    (48) redirection -> . REDIR_WORD LESS_AND -
    (49) redirection -> . AND_GREATER WORD
    (50) redirection -> . AND_GREATER_GREATER WORD

    |               reduce using rule 102 (coproc -> COPROC shell_command redirection_list .)
    BAR_AND         reduce using rule 102 (coproc -> COPROC shell_command redirection_list .)
    &               reduce using rule 102 (coproc -> COPROC shell_command redirection_list .)
    ;               reduce using rule 102 (coproc -> COPROC shell_command redirection_list .)
    AND_AND         reduce using rule 102 (coproc -> COPROC shell_command redirection_list .)
    OR_OR           reduce using rule 102 (coproc -> COPROC shell_command redirection_list .)
    NEWLINE         reduce using rule 102 (coproc -> COPROC shell_command redirection_list .)
    DO              reduce using rule 102 (coproc -> COPROC shell_command redirection_list .)
    THEN            reduce using rule 102 (coproc -> COPROC shell_command redirection_list .)
    }               reduce using rule 102 (coproc -> COPROC shell_command redirection_list .)
    )               reduce using rule 102 (coproc -> COPROC shell_command redirection_list .)
    DONE            reduce using rule 102 (coproc -> COPROC shell_command redirection_list .)
    FI              reduce using rule 102 (coproc -> COPROC shell_command redirection_list .)
    ELSE            reduce using rule 102 (coproc -> COPROC shell_command redirection_list .)
    ELIF            reduce using rule 102 (coproc -> COPROC shell_command redirection_list .)
    SEMI_SEMI       reduce using rule 102 (coproc -> COPROC shell_command redirection_list .)
    SEMI_AND        reduce using rule 102 (coproc -> COPROC shell_command redirection_list .)
    SEMI_SEMI_AND   reduce using rule 102 (coproc -> COPROC shell_command redirection_list .)
    ESAC            reduce using rule 102 (coproc -> COPROC shell_command redirection_list .)
    >               shift and go to state 41
    <               shift and go to state 40
    NUMBER          shift and go to state 9
    REDIR_WORD      shift and go to state 7
    GREATER_GREATER shift and go to state 28
    GREATER_BAR     shift and go to state 11
    LESS_GREATER    shift and go to state 33
    LESS_LESS       shift and go to state 3
    LESS_LESS_MINUS shift and go to state 18
    LESS_LESS_LESS  shift and go to state 14
    LESS_AND        shift and go to state 17
    GREATER_AND     shift and go to state 47
    AND_GREATER     shift and go to state 45
    AND_GREATER_GREATER shift and go to state 37

    redirection                    shift and go to state 168

state 179

    (103) coproc -> COPROC WORD shell_command .
    (104) coproc -> COPROC WORD shell_command . redirection_list
    (54) redirection_list -> . redirection
    (55) redirection_list -> . redirection_list redirection
    (7) redirection -> . > WORD
    (8) redirection -> . < WORD
    (9) redirection -> . NUMBER > WORD
    (10) redirection -> . NUMBER < WORD
    (11) redirection -> . REDIR_WORD > WORD
    (12) redirection -> . REDIR_WORD < WORD
    (13) redirection -> . GREATER_GREATER WORD
    (14) redirection -> . NUMBER GREATER_GREATER WORD
    (15) redirection -> . REDIR_WORD GREATER_GREATER WORD
    (16) redirection -> . GREATER_BAR WORD
    (17) redirection -> . NUMBER GREATER_BAR WORD
    (18) redirection -> . REDIR_WORD GREATER_BAR WORD
    (19) redirection -> . LESS_GREATER WORD
    (20) redirection -> . NUMBER LESS_GREATER WORD
    (21) redirection -> . REDIR_WORD LESS_GREATER WORD
    (22) redirection -> . LESS_LESS WORD
    (23) redirection -> . NUMBER LESS_LESS WORD
    (24) redirection -> . REDIR_WORD LESS_LESS WORD
    (25) redirection -> . LESS_LESS_MINUS WORD
    (26) redirection -> . NUMBER LESS_LESS_MINUS WORD
    (27) redirection -> . REDIR_WORD LESS_LESS_MINUS WORD
    (28) redirection -> . LESS_LESS_LESS WORD
    (29) redirection -> . NUMBER LESS_LESS_LESS WORD
    (30) redirection -> . REDIR_WORD LESS_LESS_LESS WORD
    (31) redirection -> . LESS_AND NUMBER
    (32) redirection -> . NUMBER LESS_AND NUMBER
    (33) redirection -> . REDIR_WORD LESS_AND NUMBER
    (34) redirection -> . GREATER_AND NUMBER
    (35) redirection -> . NUMBER GREATER_AND NUMBER
    (36) redirection -> . REDIR_WORD GREATER_AND NUMBER
    (37) redirection -> . LESS_AND WORD
    (38) redirection -> . NUMBER LESS_AND WORD
    (39) redirection -> . REDIR_WORD LESS_AND WORD
    (40) redirection -> . GREATER_AND WORD
    (41) redirection -> . NUMBER GREATER_AND WORD
    (42) redirection -> . REDIR_WORD GREATER_AND WORD
    (43) redirection -> . GREATER_AND -
    (44) redirection -> . NUMBER GREATER_AND -
    (45) redirection -> . REDIR_WORD GREATER_AND -
    (46) redirection -> . LESS_AND -
    (47) redirection -> . NUMBER LESS_AND -
    (48) redirection -> . REDIR_WORD LESS_AND -
    (49) redirection -> . AND_GREATER WORD
    (50) redirection -> . AND_GREATER_GREATER WORD

    |               reduce using rule 103 (coproc -> COPROC WORD shell_command .)
    BAR_AND         reduce using rule 103 (coproc -> COPROC WORD shell_command .)
    &               reduce using rule 103 (coproc -> COPROC WORD shell_command .)
    ;               reduce using rule 103 (coproc -> COPROC WORD shell_command .)
    AND_AND         reduce using rule 103 (coproc -> COPROC WORD shell_command .)
    OR_OR           reduce using rule 103 (coproc -> COPROC WORD shell_command .)
    NEWLINE         reduce using rule 103 (coproc -> COPROC WORD shell_command .)
    DO              reduce using rule 103 (coproc -> COPROC WORD shell_command .)
    THEN            reduce using rule 103 (coproc -> COPROC WORD shell_command .)
    }               reduce using rule 103 (coproc -> COPROC WORD shell_command .)
    )               reduce using rule 103 (coproc -> COPROC WORD shell_command .)
    DONE            reduce using rule 103 (coproc -> COPROC WORD shell_command .)
    FI              reduce using rule 103 (coproc -> COPROC WORD shell_command .)
    ELSE            reduce using rule 103 (coproc -> COPROC WORD shell_command .)
    ELIF            reduce using rule 103 (coproc -> COPROC WORD shell_command .)
    SEMI_SEMI       reduce using rule 103 (coproc -> COPROC WORD shell_command .)
    SEMI_AND        reduce using rule 103 (coproc -> COPROC WORD shell_command .)
    SEMI_SEMI_AND   reduce using rule 103 (coproc -> COPROC WORD shell_command .)
    ESAC            reduce using rule 103 (coproc -> COPROC WORD shell_command .)
    >               shift and go to state 41
    <               shift and go to state 40
    NUMBER          shift and go to state 9
    REDIR_WORD      shift and go to state 7
    GREATER_GREATER shift and go to state 28
    GREATER_BAR     shift and go to state 11
    LESS_GREATER    shift and go to state 33
    LESS_LESS       shift and go to state 3
    LESS_LESS_MINUS shift and go to state 18
    LESS_LESS_LESS  shift and go to state 14
    LESS_AND        shift and go to state 17
    GREATER_AND     shift and go to state 47
    AND_GREATER     shift and go to state 45
    AND_GREATER_GREATER shift and go to state 37

    redirection                    shift and go to state 98
    redirection_list               shift and go to state 210

state 180

    (164) timespec -> TIME TIMEOPT TIMEIGN .

    BANG            reduce using rule 164 (timespec -> TIME TIMEOPT TIMEIGN .)
    NEWLINE         reduce using rule 164 (timespec -> TIME TIMEOPT TIMEIGN .)
    ;               reduce using rule 164 (timespec -> TIME TIMEOPT TIMEIGN .)
    TIME            reduce using rule 164 (timespec -> TIME TIMEOPT TIMEIGN .)
    WHILE           reduce using rule 164 (timespec -> TIME TIMEOPT TIMEIGN .)
    UNTIL           reduce using rule 164 (timespec -> TIME TIMEOPT TIMEIGN .)
    WORD            reduce using rule 164 (timespec -> TIME TIMEOPT TIMEIGN .)
    FUNCTION        reduce using rule 164 (timespec -> TIME TIMEOPT TIMEIGN .)
    COPROC          reduce using rule 164 (timespec -> TIME TIMEOPT TIMEIGN .)
    ASSIGNMENT_WORD reduce using rule 164 (timespec -> TIME TIMEOPT TIMEIGN .)
    FOR             reduce using rule 164 (timespec -> TIME TIMEOPT TIMEIGN .)
    CASE            reduce using rule 164 (timespec -> TIME TIMEOPT TIMEIGN .)
    SELECT          reduce using rule 164 (timespec -> TIME TIMEOPT TIMEIGN .)
    IF              reduce using rule 164 (timespec -> TIME TIMEOPT TIMEIGN .)
    (               reduce using rule 164 (timespec -> TIME TIMEOPT TIMEIGN .)
    {               reduce using rule 164 (timespec -> TIME TIMEOPT TIMEIGN .)
    ARITH_CMD       reduce using rule 164 (timespec -> TIME TIMEOPT TIMEIGN .)
    COND_START      reduce using rule 164 (timespec -> TIME TIMEOPT TIMEIGN .)
    >               reduce using rule 164 (timespec -> TIME TIMEOPT TIMEIGN .)
    <               reduce using rule 164 (timespec -> TIME TIMEOPT TIMEIGN .)
    NUMBER          reduce using rule 164 (timespec -> TIME TIMEOPT TIMEIGN .)
    REDIR_WORD      reduce using rule 164 (timespec -> TIME TIMEOPT TIMEIGN .)
    GREATER_GREATER reduce using rule 164 (timespec -> TIME TIMEOPT TIMEIGN .)
    GREATER_BAR     reduce using rule 164 (timespec -> TIME TIMEOPT TIMEIGN .)
    LESS_GREATER    reduce using rule 164 (timespec -> TIME TIMEOPT TIMEIGN .)
    LESS_LESS       reduce using rule 164 (timespec -> TIME TIMEOPT TIMEIGN .)
    LESS_LESS_MINUS reduce using rule 164 (timespec -> TIME TIMEOPT TIMEIGN .)
    LESS_LESS_LESS  reduce using rule 164 (timespec -> TIME TIMEOPT TIMEIGN .)
    LESS_AND        reduce using rule 164 (timespec -> TIME TIMEOPT TIMEIGN .)
    GREATER_AND     reduce using rule 164 (timespec -> TIME TIMEOPT TIMEIGN .)
    AND_GREATER     reduce using rule 164 (timespec -> TIME TIMEOPT TIMEIGN .)
    AND_GREATER_GREATER reduce using rule 164 (timespec -> TIME TIMEOPT TIMEIGN .)


state 181

    (97) function_def -> FUNCTION WORD newline_list . function_body
    (145) newline_list -> newline_list . NEWLINE
    (98) function_body -> . shell_command
    (99) function_body -> . shell_command redirection_list
    (63) shell_command -> . for_command
    (64) shell_command -> . case_command
    (65) shell_command -> . WHILE compound_list DO compound_list DONE
    (66) shell_command -> . UNTIL compound_list DO compound_list DONE
    (67) shell_command -> . select_command
    (68) shell_command -> . if_command
    (69) shell_command -> . subshell
    (70) shell_command -> . group_command
    (71) shell_command -> . arith_command
    (72) shell_command -> . cond_command
    (73) shell_command -> . arith_for_command
    (74) for_command -> . FOR WORD newline_list DO compound_list DONE
    (75) for_command -> . FOR WORD newline_list { compound_list }
    (76) for_command -> . FOR WORD ; newline_list DO compound_list DONE
    (77) for_command -> . FOR WORD ; newline_list { compound_list }
    (78) for_command -> . FOR WORD newline_list IN word_list list_terminator newline_list DO compound_list DONE
    (79) for_command -> . FOR WORD newline_list IN word_list list_terminator newline_list { compound_list }
    (80) for_command -> . FOR WORD newline_list IN list_terminator newline_list DO compound_list DONE
    (81) for_command -> . FOR WORD newline_list IN list_terminator newline_list { compound_list }
    (92) case_command -> . CASE WORD newline_list IN newline_list ESAC
    (93) case_command -> . CASE WORD newline_list IN case_clause_sequence newline_list ESAC
    (94) case_command -> . CASE WORD newline_list IN case_clause ESAC
    (86) select_command -> . SELECT WORD newline_list DO list DONE
    (87) select_command -> . SELECT WORD newline_list { list }
    (88) select_command -> . SELECT WORD ; newline_list DO list DONE
    (89) select_command -> . SELECT WORD ; newline_list { list }
    (90) select_command -> . SELECT WORD newline_list IN word_list list_terminator newline_list DO list DONE
    (91) select_command -> . SELECT WORD newline_list IN word_list list_terminator newline_list { list }
    (106) if_command -> . IF compound_list THEN compound_list FI
    (107) if_command -> . IF compound_list THEN compound_list ELSE compound_list FI
    (108) if_command -> . IF compound_list THEN compound_list elif_clause FI
    (100) subshell -> . ( compound_list )
    (109) group_command -> . { compound_list }
    (110) arith_command -> . ARITH_CMD
    (111) cond_command -> . COND_START COND_CMD COND_END
    (82) arith_for_command -> . FOR ARITH_FOR_EXPRS list_terminator newline_list DO compound_list DONE
    (83) arith_for_command -> . FOR ARITH_FOR_EXPRS list_terminator newline_list { compound_list }
    (84) arith_for_command -> . FOR ARITH_FOR_EXPRS DO compound_list DONE
    (85) arith_for_command -> . FOR ARITH_FOR_EXPRS { compound_list }

    NEWLINE         shift and go to state 128
    WHILE           shift and go to state 34
    UNTIL           shift and go to state 4
    FOR             shift and go to state 31
    CASE            shift and go to state 51
    SELECT          shift and go to state 39
    IF              shift and go to state 5
    (               shift and go to state 36
    {               shift and go to state 19
    ARITH_CMD       shift and go to state 46
    COND_START      shift and go to state 22

    select_command                 shift and go to state 6
    for_command                    shift and go to state 43
    shell_command                  shift and go to state 211
    arith_command                  shift and go to state 16
    group_command                  shift and go to state 20
    arith_for_command              shift and go to state 15
    cond_command                   shift and go to state 30
    subshell                       shift and go to state 21
    function_body                  shift and go to state 212
    case_command                   shift and go to state 35
    if_command                     shift and go to state 38

state 182

    (96) function_def -> FUNCTION WORD ( . ) newline_list function_body

    )               shift and go to state 213


state 183

    (92) case_command -> CASE WORD newline_list . IN newline_list ESAC
    (93) case_command -> CASE WORD newline_list . IN case_clause_sequence newline_list ESAC
    (94) case_command -> CASE WORD newline_list . IN case_clause ESAC
    (145) newline_list -> newline_list . NEWLINE

    IN              shift and go to state 214
    NEWLINE         shift and go to state 128


state 184

    (159) pipeline -> pipeline | newline_list . pipeline
    (145) newline_list -> newline_list . NEWLINE
    (159) pipeline -> . pipeline | newline_list pipeline
    (160) pipeline -> . pipeline BAR_AND newline_list pipeline
    (161) pipeline -> . command
    (58) command -> . simple_command
    (59) command -> . shell_command
    (60) command -> . shell_command redirection_list
    (61) command -> . function_def
    (62) command -> . coproc
    (56) simple_command -> . simple_command_element
    (57) simple_command -> . simple_command simple_command_element
    (63) shell_command -> . for_command
    (64) shell_command -> . case_command
    (65) shell_command -> . WHILE compound_list DO compound_list DONE
    (66) shell_command -> . UNTIL compound_list DO compound_list DONE
    (67) shell_command -> . select_command
    (68) shell_command -> . if_command
    (69) shell_command -> . subshell
    (70) shell_command -> . group_command
    (71) shell_command -> . arith_command
    (72) shell_command -> . cond_command
    (73) shell_command -> . arith_for_command
    (95) function_def -> . WORD ( ) newline_list function_body
    (96) function_def -> . FUNCTION WORD ( ) newline_list function_body
    (97) function_def -> . FUNCTION WORD newline_list function_body
    (101) coproc -> . COPROC shell_command
    (102) coproc -> . COPROC shell_command redirection_list
    (103) coproc -> . COPROC WORD shell_command
    (104) coproc -> . COPROC WORD shell_command redirection_list
    (105) coproc -> . COPROC simple_command
    (51) simple_command_element -> . WORD
    (52) simple_command_element -> . ASSIGNMENT_WORD
    (53) simple_command_element -> . redirection
    (74) for_command -> . FOR WORD newline_list DO compound_list DONE
    (75) for_command -> . FOR WORD newline_list { compound_list }
    (76) for_command -> . FOR WORD ; newline_list DO compound_list DONE
    (77) for_command -> . FOR WORD ; newline_list { compound_list }
    (78) for_command -> . FOR WORD newline_list IN word_list list_terminator newline_list DO compound_list DONE
    (79) for_command -> . FOR WORD newline_list IN word_list list_terminator newline_list { compound_list }
    (80) for_command -> . FOR WORD newline_list IN list_terminator newline_list DO compound_list DONE
    (81) for_command -> . FOR WORD newline_list IN list_terminator newline_list { compound_list }
    (92) case_command -> . CASE WORD newline_list IN newline_list ESAC
    (93) case_command -> . CASE WORD newline_list IN case_clause_sequence newline_list ESAC
    (94) case_command -> . CASE WORD newline_list IN case_clause ESAC
    (86) select_command -> . SELECT WORD newline_list DO list DONE
    (87) select_command -> . SELECT WORD newline_list { list }
    (88) select_command -> . SELECT WORD ; newline_list DO list DONE
    (89) select_command -> . SELECT WORD ; newline_list { list }
    (90) select_command -> . SELECT WORD newline_list IN word_list list_terminator newline_list DO list DONE
    (91) select_command -> . SELECT WORD newline_list IN word_list list_terminator newline_list { list }
    (106) if_command -> . IF compound_list THEN compound_list FI
    (107) if_command -> . IF compound_list THEN compound_list ELSE compound_list FI
    (108) if_command -> . IF compound_list THEN compound_list elif_clause FI
    (100) subshell -> . ( compound_list )
    (109) group_command -> . { compound_list }
    (110) arith_command -> . ARITH_CMD
    (111) cond_command -> . COND_START COND_CMD COND_END
    (82) arith_for_command -> . FOR ARITH_FOR_EXPRS list_terminator newline_list DO compound_list DONE
    (83) arith_for_command -> . FOR ARITH_FOR_EXPRS list_terminator newline_list { compound_list }
    (84) arith_for_command -> . FOR ARITH_FOR_EXPRS DO compound_list DONE
    (85) arith_for_command -> . FOR ARITH_FOR_EXPRS { compound_list }
    (7) redirection -> . > WORD
    (8) redirection -> . < WORD
    (9) redirection -> . NUMBER > WORD
    (10) redirection -> . NUMBER < WORD
    (11) redirection -> . REDIR_WORD > WORD
    (12) redirection -> . REDIR_WORD < WORD
    (13) redirection -> . GREATER_GREATER WORD
    (14) redirection -> . NUMBER GREATER_GREATER WORD
    (15) redirection -> . REDIR_WORD GREATER_GREATER WORD
    (16) redirection -> . GREATER_BAR WORD
    (17) redirection -> . NUMBER GREATER_BAR WORD
    (18) redirection -> . REDIR_WORD GREATER_BAR WORD
    (19) redirection -> . LESS_GREATER WORD
    (20) redirection -> . NUMBER LESS_GREATER WORD
    (21) redirection -> . REDIR_WORD LESS_GREATER WORD
    (22) redirection -> . LESS_LESS WORD
    (23) redirection -> . NUMBER LESS_LESS WORD
    (24) redirection -> . REDIR_WORD LESS_LESS WORD
    (25) redirection -> . LESS_LESS_MINUS WORD
    (26) redirection -> . NUMBER LESS_LESS_MINUS WORD
    (27) redirection -> . REDIR_WORD LESS_LESS_MINUS WORD
    (28) redirection -> . LESS_LESS_LESS WORD
    (29) redirection -> . NUMBER LESS_LESS_LESS WORD
    (30) redirection -> . REDIR_WORD LESS_LESS_LESS WORD
    (31) redirection -> . LESS_AND NUMBER
    (32) redirection -> . NUMBER LESS_AND NUMBER
    (33) redirection -> . REDIR_WORD LESS_AND NUMBER
    (34) redirection -> . GREATER_AND NUMBER
    (35) redirection -> . NUMBER GREATER_AND NUMBER
    (36) redirection -> . REDIR_WORD GREATER_AND NUMBER
    (37) redirection -> . LESS_AND WORD
    (38) redirection -> . NUMBER LESS_AND WORD
    (39) redirection -> . REDIR_WORD LESS_AND WORD
    (40) redirection -> . GREATER_AND WORD
    (41) redirection -> . NUMBER GREATER_AND WORD
    (42) redirection -> . REDIR_WORD GREATER_AND WORD
    (43) redirection -> . GREATER_AND -
    (44) redirection -> . NUMBER GREATER_AND -
    (45) redirection -> . REDIR_WORD GREATER_AND -
    (46) redirection -> . LESS_AND -
    (47) redirection -> . NUMBER LESS_AND -
    (48) redirection -> . REDIR_WORD LESS_AND -
    (49) redirection -> . AND_GREATER WORD
    (50) redirection -> . AND_GREATER_GREATER WORD

    NEWLINE         shift and go to state 128
    WHILE           shift and go to state 34
    UNTIL           shift and go to state 4
    WORD            shift and go to state 53
    FUNCTION        shift and go to state 49
    COPROC          shift and go to state 44
    ASSIGNMENT_WORD shift and go to state 26
    FOR             shift and go to state 31
    CASE            shift and go to state 51
    SELECT          shift and go to state 39
    IF              shift and go to state 5
    (               shift and go to state 36
    {               shift and go to state 19
    ARITH_CMD       shift and go to state 46
    COND_START      shift and go to state 22
    >               shift and go to state 41
    <               shift and go to state 40
    NUMBER          shift and go to state 9
    REDIR_WORD      shift and go to state 7
    GREATER_GREATER shift and go to state 28
    GREATER_BAR     shift and go to state 11
    LESS_GREATER    shift and go to state 33
    LESS_LESS       shift and go to state 3
    LESS_LESS_MINUS shift and go to state 18
    LESS_LESS_LESS  shift and go to state 14
    LESS_AND        shift and go to state 17
    GREATER_AND     shift and go to state 47
    AND_GREATER     shift and go to state 45
    AND_GREATER_GREATER shift and go to state 37

    command                        shift and go to state 23
    select_command                 shift and go to state 6
    for_command                    shift and go to state 43
    shell_command                  shift and go to state 25
    simple_command_element         shift and go to state 2
    coproc                         shift and go to state 10
    simple_command                 shift and go to state 27
    cond_command                   shift and go to state 30
    arith_for_command              shift and go to state 15
    arith_command                  shift and go to state 16
    case_command                   shift and go to state 35
    group_command                  shift and go to state 20
    redirection                    shift and go to state 50
    subshell                       shift and go to state 21
    pipeline                       shift and go to state 215
    if_command                     shift and go to state 38
    function_def                   shift and go to state 1

state 185

    (160) pipeline -> pipeline BAR_AND newline_list . pipeline
    (145) newline_list -> newline_list . NEWLINE
    (159) pipeline -> . pipeline | newline_list pipeline
    (160) pipeline -> . pipeline BAR_AND newline_list pipeline
    (161) pipeline -> . command
    (58) command -> . simple_command
    (59) command -> . shell_command
    (60) command -> . shell_command redirection_list
    (61) command -> . function_def
    (62) command -> . coproc
    (56) simple_command -> . simple_command_element
    (57) simple_command -> . simple_command simple_command_element
    (63) shell_command -> . for_command
    (64) shell_command -> . case_command
    (65) shell_command -> . WHILE compound_list DO compound_list DONE
    (66) shell_command -> . UNTIL compound_list DO compound_list DONE
    (67) shell_command -> . select_command
    (68) shell_command -> . if_command
    (69) shell_command -> . subshell
    (70) shell_command -> . group_command
    (71) shell_command -> . arith_command
    (72) shell_command -> . cond_command
    (73) shell_command -> . arith_for_command
    (95) function_def -> . WORD ( ) newline_list function_body
    (96) function_def -> . FUNCTION WORD ( ) newline_list function_body
    (97) function_def -> . FUNCTION WORD newline_list function_body
    (101) coproc -> . COPROC shell_command
    (102) coproc -> . COPROC shell_command redirection_list
    (103) coproc -> . COPROC WORD shell_command
    (104) coproc -> . COPROC WORD shell_command redirection_list
    (105) coproc -> . COPROC simple_command
    (51) simple_command_element -> . WORD
    (52) simple_command_element -> . ASSIGNMENT_WORD
    (53) simple_command_element -> . redirection
    (74) for_command -> . FOR WORD newline_list DO compound_list DONE
    (75) for_command -> . FOR WORD newline_list { compound_list }
    (76) for_command -> . FOR WORD ; newline_list DO compound_list DONE
    (77) for_command -> . FOR WORD ; newline_list { compound_list }
    (78) for_command -> . FOR WORD newline_list IN word_list list_terminator newline_list DO compound_list DONE
    (79) for_command -> . FOR WORD newline_list IN word_list list_terminator newline_list { compound_list }
    (80) for_command -> . FOR WORD newline_list IN list_terminator newline_list DO compound_list DONE
    (81) for_command -> . FOR WORD newline_list IN list_terminator newline_list { compound_list }
    (92) case_command -> . CASE WORD newline_list IN newline_list ESAC
    (93) case_command -> . CASE WORD newline_list IN case_clause_sequence newline_list ESAC
    (94) case_command -> . CASE WORD newline_list IN case_clause ESAC
    (86) select_command -> . SELECT WORD newline_list DO list DONE
    (87) select_command -> . SELECT WORD newline_list { list }
    (88) select_command -> . SELECT WORD ; newline_list DO list DONE
    (89) select_command -> . SELECT WORD ; newline_list { list }
    (90) select_command -> . SELECT WORD newline_list IN word_list list_terminator newline_list DO list DONE
    (91) select_command -> . SELECT WORD newline_list IN word_list list_terminator newline_list { list }
    (106) if_command -> . IF compound_list THEN compound_list FI
    (107) if_command -> . IF compound_list THEN compound_list ELSE compound_list FI
    (108) if_command -> . IF compound_list THEN compound_list elif_clause FI
    (100) subshell -> . ( compound_list )
    (109) group_command -> . { compound_list }
    (110) arith_command -> . ARITH_CMD
    (111) cond_command -> . COND_START COND_CMD COND_END
    (82) arith_for_command -> . FOR ARITH_FOR_EXPRS list_terminator newline_list DO compound_list DONE
    (83) arith_for_command -> . FOR ARITH_FOR_EXPRS list_terminator newline_list { compound_list }
    (84) arith_for_command -> . FOR ARITH_FOR_EXPRS DO compound_list DONE
    (85) arith_for_command -> . FOR ARITH_FOR_EXPRS { compound_list }
    (7) redirection -> . > WORD
    (8) redirection -> . < WORD
    (9) redirection -> . NUMBER > WORD
    (10) redirection -> . NUMBER < WORD
    (11) redirection -> . REDIR_WORD > WORD
    (12) redirection -> . REDIR_WORD < WORD
    (13) redirection -> . GREATER_GREATER WORD
    (14) redirection -> . NUMBER GREATER_GREATER WORD
    (15) redirection -> . REDIR_WORD GREATER_GREATER WORD
    (16) redirection -> . GREATER_BAR WORD
    (17) redirection -> . NUMBER GREATER_BAR WORD
    (18) redirection -> . REDIR_WORD GREATER_BAR WORD
    (19) redirection -> . LESS_GREATER WORD
    (20) redirection -> . NUMBER LESS_GREATER WORD
    (21) redirection -> . REDIR_WORD LESS_GREATER WORD
    (22) redirection -> . LESS_LESS WORD
    (23) redirection -> . NUMBER LESS_LESS WORD
    (24) redirection -> . REDIR_WORD LESS_LESS WORD
    (25) redirection -> . LESS_LESS_MINUS WORD
    (26) redirection -> . NUMBER LESS_LESS_MINUS WORD
    (27) redirection -> . REDIR_WORD LESS_LESS_MINUS WORD
    (28) redirection -> . LESS_LESS_LESS WORD
    (29) redirection -> . NUMBER LESS_LESS_LESS WORD
    (30) redirection -> . REDIR_WORD LESS_LESS_LESS WORD
    (31) redirection -> . LESS_AND NUMBER
    (32) redirection -> . NUMBER LESS_AND NUMBER
    (33) redirection -> . REDIR_WORD LESS_AND NUMBER
    (34) redirection -> . GREATER_AND NUMBER
    (35) redirection -> . NUMBER GREATER_AND NUMBER
    (36) redirection -> . REDIR_WORD GREATER_AND NUMBER
    (37) redirection -> . LESS_AND WORD
    (38) redirection -> . NUMBER LESS_AND WORD
    (39) redirection -> . REDIR_WORD LESS_AND WORD
    (40) redirection -> . GREATER_AND WORD
    (41) redirection -> . NUMBER GREATER_AND WORD
    (42) redirection -> . REDIR_WORD GREATER_AND WORD
    (43) redirection -> . GREATER_AND -
    (44) redirection -> . NUMBER GREATER_AND -
    (45) redirection -> . REDIR_WORD GREATER_AND -
    (46) redirection -> . LESS_AND -
    (47) redirection -> . NUMBER LESS_AND -
    (48) redirection -> . REDIR_WORD LESS_AND -
    (49) redirection -> . AND_GREATER WORD
    (50) redirection -> . AND_GREATER_GREATER WORD

    NEWLINE         shift and go to state 128
    WHILE           shift and go to state 34
    UNTIL           shift and go to state 4
    WORD            shift and go to state 53
    FUNCTION        shift and go to state 49
    COPROC          shift and go to state 44
    ASSIGNMENT_WORD shift and go to state 26
    FOR             shift and go to state 31
    CASE            shift and go to state 51
    SELECT          shift and go to state 39
    IF              shift and go to state 5
    (               shift and go to state 36
    {               shift and go to state 19
    ARITH_CMD       shift and go to state 46
    COND_START      shift and go to state 22
    >               shift and go to state 41
    <               shift and go to state 40
    NUMBER          shift and go to state 9
    REDIR_WORD      shift and go to state 7
    GREATER_GREATER shift and go to state 28
    GREATER_BAR     shift and go to state 11
    LESS_GREATER    shift and go to state 33
    LESS_LESS       shift and go to state 3
    LESS_LESS_MINUS shift and go to state 18
    LESS_LESS_LESS  shift and go to state 14
    LESS_AND        shift and go to state 17
    GREATER_AND     shift and go to state 47
    AND_GREATER     shift and go to state 45
    AND_GREATER_GREATER shift and go to state 37

    command                        shift and go to state 23
    select_command                 shift and go to state 6
    for_command                    shift and go to state 43
    shell_command                  shift and go to state 25
    simple_command_element         shift and go to state 2
    coproc                         shift and go to state 10
    simple_command                 shift and go to state 27
    cond_command                   shift and go to state 30
    arith_for_command              shift and go to state 15
    arith_command                  shift and go to state 16
    case_command                   shift and go to state 35
    group_command                  shift and go to state 20
    redirection                    shift and go to state 50
    subshell                       shift and go to state 21
    pipeline                       shift and go to state 216
    if_command                     shift and go to state 38
    function_def                   shift and go to state 1

state 186

    (95) function_def -> WORD ( ) . newline_list function_body
    (144) newline_list -> .
    (145) newline_list -> . newline_list NEWLINE

    NEWLINE         reduce using rule 144 (newline_list -> .)
    WHILE           reduce using rule 144 (newline_list -> .)
    UNTIL           reduce using rule 144 (newline_list -> .)
    FOR             reduce using rule 144 (newline_list -> .)
    CASE            reduce using rule 144 (newline_list -> .)
    SELECT          reduce using rule 144 (newline_list -> .)
    IF              reduce using rule 144 (newline_list -> .)
    (               reduce using rule 144 (newline_list -> .)
    {               reduce using rule 144 (newline_list -> .)
    ARITH_CMD       reduce using rule 144 (newline_list -> .)
    COND_START      reduce using rule 144 (newline_list -> .)

    newline_list                   shift and go to state 217

state 187

    (135) list1 -> list1 AND_AND . newline_list list1
    (144) newline_list -> .
    (145) newline_list -> . newline_list NEWLINE

    NEWLINE         reduce using rule 144 (newline_list -> .)
    BANG            reduce using rule 144 (newline_list -> .)
    TIME            reduce using rule 144 (newline_list -> .)
    WHILE           reduce using rule 144 (newline_list -> .)
    UNTIL           reduce using rule 144 (newline_list -> .)
    WORD            reduce using rule 144 (newline_list -> .)
    FUNCTION        reduce using rule 144 (newline_list -> .)
    COPROC          reduce using rule 144 (newline_list -> .)
    ASSIGNMENT_WORD reduce using rule 144 (newline_list -> .)
    FOR             reduce using rule 144 (newline_list -> .)
    CASE            reduce using rule 144 (newline_list -> .)
    SELECT          reduce using rule 144 (newline_list -> .)
    IF              reduce using rule 144 (newline_list -> .)
    (               reduce using rule 144 (newline_list -> .)
    {               reduce using rule 144 (newline_list -> .)
    ARITH_CMD       reduce using rule 144 (newline_list -> .)
    COND_START      reduce using rule 144 (newline_list -> .)
    >               reduce using rule 144 (newline_list -> .)
    <               reduce using rule 144 (newline_list -> .)
    NUMBER          reduce using rule 144 (newline_list -> .)
    REDIR_WORD      reduce using rule 144 (newline_list -> .)
    GREATER_GREATER reduce using rule 144 (newline_list -> .)
    GREATER_BAR     reduce using rule 144 (newline_list -> .)
    LESS_GREATER    reduce using rule 144 (newline_list -> .)
    LESS_LESS       reduce using rule 144 (newline_list -> .)
    LESS_LESS_MINUS reduce using rule 144 (newline_list -> .)
    LESS_LESS_LESS  reduce using rule 144 (newline_list -> .)
    LESS_AND        reduce using rule 144 (newline_list -> .)
    GREATER_AND     reduce using rule 144 (newline_list -> .)
    AND_GREATER     reduce using rule 144 (newline_list -> .)
    AND_GREATER_GREATER reduce using rule 144 (newline_list -> .)

    newline_list                   shift and go to state 218

state 188

    (137) list1 -> list1 & . newline_list list1
    (133) list0 -> list1 & . newline_list
    (144) newline_list -> .
    (145) newline_list -> . newline_list NEWLINE

    NEWLINE         reduce using rule 144 (newline_list -> .)
    BANG            reduce using rule 144 (newline_list -> .)
    TIME            reduce using rule 144 (newline_list -> .)
    WHILE           reduce using rule 144 (newline_list -> .)
    UNTIL           reduce using rule 144 (newline_list -> .)
    WORD            reduce using rule 144 (newline_list -> .)
    FUNCTION        reduce using rule 144 (newline_list -> .)
    COPROC          reduce using rule 144 (newline_list -> .)
    ASSIGNMENT_WORD reduce using rule 144 (newline_list -> .)
    FOR             reduce using rule 144 (newline_list -> .)
    CASE            reduce using rule 144 (newline_list -> .)
    SELECT          reduce using rule 144 (newline_list -> .)
    IF              reduce using rule 144 (newline_list -> .)
    (               reduce using rule 144 (newline_list -> .)
    {               reduce using rule 144 (newline_list -> .)
    ARITH_CMD       reduce using rule 144 (newline_list -> .)
    COND_START      reduce using rule 144 (newline_list -> .)
    >               reduce using rule 144 (newline_list -> .)
    <               reduce using rule 144 (newline_list -> .)
    NUMBER          reduce using rule 144 (newline_list -> .)
    REDIR_WORD      reduce using rule 144 (newline_list -> .)
    GREATER_GREATER reduce using rule 144 (newline_list -> .)
    GREATER_BAR     reduce using rule 144 (newline_list -> .)
    LESS_GREATER    reduce using rule 144 (newline_list -> .)
    LESS_LESS       reduce using rule 144 (newline_list -> .)
    LESS_LESS_MINUS reduce using rule 144 (newline_list -> .)
    LESS_LESS_LESS  reduce using rule 144 (newline_list -> .)
    LESS_AND        reduce using rule 144 (newline_list -> .)
    GREATER_AND     reduce using rule 144 (newline_list -> .)
    AND_GREATER     reduce using rule 144 (newline_list -> .)
    AND_GREATER_GREATER reduce using rule 144 (newline_list -> .)
    DO              reduce using rule 144 (newline_list -> .)
    THEN            reduce using rule 144 (newline_list -> .)
    }               reduce using rule 144 (newline_list -> .)
    )               reduce using rule 144 (newline_list -> .)
    DONE            reduce using rule 144 (newline_list -> .)
    FI              reduce using rule 144 (newline_list -> .)
    ELSE            reduce using rule 144 (newline_list -> .)
    ELIF            reduce using rule 144 (newline_list -> .)
    SEMI_SEMI       reduce using rule 144 (newline_list -> .)
    SEMI_AND        reduce using rule 144 (newline_list -> .)
    SEMI_SEMI_AND   reduce using rule 144 (newline_list -> .)
    ESAC            reduce using rule 144 (newline_list -> .)

    newline_list                   shift and go to state 219

state 189

    (136) list1 -> list1 OR_OR . newline_list list1
    (144) newline_list -> .
    (145) newline_list -> . newline_list NEWLINE

    NEWLINE         reduce using rule 144 (newline_list -> .)
    BANG            reduce using rule 144 (newline_list -> .)
    TIME            reduce using rule 144 (newline_list -> .)
    WHILE           reduce using rule 144 (newline_list -> .)
    UNTIL           reduce using rule 144 (newline_list -> .)
    WORD            reduce using rule 144 (newline_list -> .)
    FUNCTION        reduce using rule 144 (newline_list -> .)
    COPROC          reduce using rule 144 (newline_list -> .)
    ASSIGNMENT_WORD reduce using rule 144 (newline_list -> .)
    FOR             reduce using rule 144 (newline_list -> .)
    CASE            reduce using rule 144 (newline_list -> .)
    SELECT          reduce using rule 144 (newline_list -> .)
    IF              reduce using rule 144 (newline_list -> .)
    (               reduce using rule 144 (newline_list -> .)
    {               reduce using rule 144 (newline_list -> .)
    ARITH_CMD       reduce using rule 144 (newline_list -> .)
    COND_START      reduce using rule 144 (newline_list -> .)
    >               reduce using rule 144 (newline_list -> .)
    <               reduce using rule 144 (newline_list -> .)
    NUMBER          reduce using rule 144 (newline_list -> .)
    REDIR_WORD      reduce using rule 144 (newline_list -> .)
    GREATER_GREATER reduce using rule 144 (newline_list -> .)
    GREATER_BAR     reduce using rule 144 (newline_list -> .)
    LESS_GREATER    reduce using rule 144 (newline_list -> .)
    LESS_LESS       reduce using rule 144 (newline_list -> .)
    LESS_LESS_MINUS reduce using rule 144 (newline_list -> .)
    LESS_LESS_LESS  reduce using rule 144 (newline_list -> .)
    LESS_AND        reduce using rule 144 (newline_list -> .)
    GREATER_AND     reduce using rule 144 (newline_list -> .)
    AND_GREATER     reduce using rule 144 (newline_list -> .)
    AND_GREATER_GREATER reduce using rule 144 (newline_list -> .)

    newline_list                   shift and go to state 220

state 190

    (138) list1 -> list1 ; . newline_list list1
    (134) list0 -> list1 ; . newline_list
    (144) newline_list -> .
    (145) newline_list -> . newline_list NEWLINE

    NEWLINE         reduce using rule 144 (newline_list -> .)
    BANG            reduce using rule 144 (newline_list -> .)
    TIME            reduce using rule 144 (newline_list -> .)
    WHILE           reduce using rule 144 (newline_list -> .)
    UNTIL           reduce using rule 144 (newline_list -> .)
    WORD            reduce using rule 144 (newline_list -> .)
    FUNCTION        reduce using rule 144 (newline_list -> .)
    COPROC          reduce using rule 144 (newline_list -> .)
    ASSIGNMENT_WORD reduce using rule 144 (newline_list -> .)
    FOR             reduce using rule 144 (newline_list -> .)
    CASE            reduce using rule 144 (newline_list -> .)
    SELECT          reduce using rule 144 (newline_list -> .)
    IF              reduce using rule 144 (newline_list -> .)
    (               reduce using rule 144 (newline_list -> .)
    {               reduce using rule 144 (newline_list -> .)
    ARITH_CMD       reduce using rule 144 (newline_list -> .)
    COND_START      reduce using rule 144 (newline_list -> .)
    >               reduce using rule 144 (newline_list -> .)
    <               reduce using rule 144 (newline_list -> .)
    NUMBER          reduce using rule 144 (newline_list -> .)
    REDIR_WORD      reduce using rule 144 (newline_list -> .)
    GREATER_GREATER reduce using rule 144 (newline_list -> .)
    GREATER_BAR     reduce using rule 144 (newline_list -> .)
    LESS_GREATER    reduce using rule 144 (newline_list -> .)
    LESS_LESS       reduce using rule 144 (newline_list -> .)
    LESS_LESS_MINUS reduce using rule 144 (newline_list -> .)
    LESS_LESS_LESS  reduce using rule 144 (newline_list -> .)
    LESS_AND        reduce using rule 144 (newline_list -> .)
    GREATER_AND     reduce using rule 144 (newline_list -> .)
    AND_GREATER     reduce using rule 144 (newline_list -> .)
    AND_GREATER_GREATER reduce using rule 144 (newline_list -> .)
    DO              reduce using rule 144 (newline_list -> .)
    THEN            reduce using rule 144 (newline_list -> .)
    }               reduce using rule 144 (newline_list -> .)
    )               reduce using rule 144 (newline_list -> .)
    DONE            reduce using rule 144 (newline_list -> .)
    FI              reduce using rule 144 (newline_list -> .)
    ELSE            reduce using rule 144 (newline_list -> .)
    ELIF            reduce using rule 144 (newline_list -> .)
    SEMI_SEMI       reduce using rule 144 (newline_list -> .)
    SEMI_AND        reduce using rule 144 (newline_list -> .)
    SEMI_SEMI_AND   reduce using rule 144 (newline_list -> .)
    ESAC            reduce using rule 144 (newline_list -> .)

    newline_list                   shift and go to state 221

state 191

    (139) list1 -> list1 NEWLINE . newline_list list1
    (132) list0 -> list1 NEWLINE . newline_list
    (144) newline_list -> .
    (145) newline_list -> . newline_list NEWLINE

    NEWLINE         reduce using rule 144 (newline_list -> .)
    BANG            reduce using rule 144 (newline_list -> .)
    TIME            reduce using rule 144 (newline_list -> .)
    WHILE           reduce using rule 144 (newline_list -> .)
    UNTIL           reduce using rule 144 (newline_list -> .)
    WORD            reduce using rule 144 (newline_list -> .)
    FUNCTION        reduce using rule 144 (newline_list -> .)
    COPROC          reduce using rule 144 (newline_list -> .)
    ASSIGNMENT_WORD reduce using rule 144 (newline_list -> .)
    FOR             reduce using rule 144 (newline_list -> .)
    CASE            reduce using rule 144 (newline_list -> .)
    SELECT          reduce using rule 144 (newline_list -> .)
    IF              reduce using rule 144 (newline_list -> .)
    (               reduce using rule 144 (newline_list -> .)
    {               reduce using rule 144 (newline_list -> .)
    ARITH_CMD       reduce using rule 144 (newline_list -> .)
    COND_START      reduce using rule 144 (newline_list -> .)
    >               reduce using rule 144 (newline_list -> .)
    <               reduce using rule 144 (newline_list -> .)
    NUMBER          reduce using rule 144 (newline_list -> .)
    REDIR_WORD      reduce using rule 144 (newline_list -> .)
    GREATER_GREATER reduce using rule 144 (newline_list -> .)
    GREATER_BAR     reduce using rule 144 (newline_list -> .)
    LESS_GREATER    reduce using rule 144 (newline_list -> .)
    LESS_LESS       reduce using rule 144 (newline_list -> .)
    LESS_LESS_MINUS reduce using rule 144 (newline_list -> .)
    LESS_LESS_LESS  reduce using rule 144 (newline_list -> .)
    LESS_AND        reduce using rule 144 (newline_list -> .)
    GREATER_AND     reduce using rule 144 (newline_list -> .)
    AND_GREATER     reduce using rule 144 (newline_list -> .)
    AND_GREATER_GREATER reduce using rule 144 (newline_list -> .)
    DO              reduce using rule 144 (newline_list -> .)
    THEN            reduce using rule 144 (newline_list -> .)
    }               reduce using rule 144 (newline_list -> .)
    )               reduce using rule 144 (newline_list -> .)
    DONE            reduce using rule 144 (newline_list -> .)
    FI              reduce using rule 144 (newline_list -> .)
    ELSE            reduce using rule 144 (newline_list -> .)
    ELIF            reduce using rule 144 (newline_list -> .)
    SEMI_SEMI       reduce using rule 144 (newline_list -> .)
    SEMI_AND        reduce using rule 144 (newline_list -> .)
    SEMI_SEMI_AND   reduce using rule 144 (newline_list -> .)
    ESAC            reduce using rule 144 (newline_list -> .)

    newline_list                   shift and go to state 222

state 192

    (66) shell_command -> UNTIL compound_list DO compound_list . DONE

    DONE            shift and go to state 223


state 193

    (106) if_command -> IF compound_list THEN compound_list . FI
    (107) if_command -> IF compound_list THEN compound_list . ELSE compound_list FI
    (108) if_command -> IF compound_list THEN compound_list . elif_clause FI
    (112) elif_clause -> . ELIF compound_list THEN compound_list
    (113) elif_clause -> . ELIF compound_list THEN compound_list ELSE compound_list
    (114) elif_clause -> . ELIF compound_list THEN compound_list elif_clause

    FI              shift and go to state 224
    ELSE            shift and go to state 226
    ELIF            shift and go to state 225

    elif_clause                    shift and go to state 227

state 194

    (149) simple_list1 -> simple_list1 AND_AND newline_list simple_list1 .
    (149) simple_list1 -> simple_list1 . AND_AND newline_list simple_list1
    (150) simple_list1 -> simple_list1 . OR_OR newline_list simple_list1
    (151) simple_list1 -> simple_list1 . & simple_list1
    (152) simple_list1 -> simple_list1 . ; simple_list1

  ! shift/reduce conflict for AND_AND resolved as shift
  ! shift/reduce conflict for OR_OR resolved as shift
  ! shift/reduce conflict for & resolved as shift
  ! shift/reduce conflict for ; resolved as shift
    NEWLINE         reduce using rule 149 (simple_list1 -> simple_list1 AND_AND newline_list simple_list1 .)
    AND_AND         shift and go to state 70
    OR_OR           shift and go to state 72
    &               shift and go to state 195
    ;               shift and go to state 196

  ! AND_AND         [ reduce using rule 149 (simple_list1 -> simple_list1 AND_AND newline_list simple_list1 .) ]
  ! OR_OR           [ reduce using rule 149 (simple_list1 -> simple_list1 AND_AND newline_list simple_list1 .) ]
  ! &               [ reduce using rule 149 (simple_list1 -> simple_list1 AND_AND newline_list simple_list1 .) ]
  ! ;               [ reduce using rule 149 (simple_list1 -> simple_list1 AND_AND newline_list simple_list1 .) ]


state 195

    (151) simple_list1 -> simple_list1 & . simple_list1
    (149) simple_list1 -> . simple_list1 AND_AND newline_list simple_list1
    (150) simple_list1 -> . simple_list1 OR_OR newline_list simple_list1
    (151) simple_list1 -> . simple_list1 & simple_list1
    (152) simple_list1 -> . simple_list1 ; simple_list1
    (153) simple_list1 -> . pipeline_command
    (154) pipeline_command -> . pipeline
    (155) pipeline_command -> . BANG pipeline_command
    (156) pipeline_command -> . timespec pipeline_command
    (157) pipeline_command -> . timespec list_terminator
    (158) pipeline_command -> . BANG list_terminator
    (159) pipeline -> . pipeline | newline_list pipeline
    (160) pipeline -> . pipeline BAR_AND newline_list pipeline
    (161) pipeline -> . command
    (162) timespec -> . TIME
    (163) timespec -> . TIME TIMEOPT
    (164) timespec -> . TIME TIMEOPT TIMEIGN
    (58) command -> . simple_command
    (59) command -> . shell_command
    (60) command -> . shell_command redirection_list
    (61) command -> . function_def
    (62) command -> . coproc
    (56) simple_command -> . simple_command_element
    (57) simple_command -> . simple_command simple_command_element
    (63) shell_command -> . for_command
    (64) shell_command -> . case_command
    (65) shell_command -> . WHILE compound_list DO compound_list DONE
    (66) shell_command -> . UNTIL compound_list DO compound_list DONE
    (67) shell_command -> . select_command
    (68) shell_command -> . if_command
    (69) shell_command -> . subshell
    (70) shell_command -> . group_command
    (71) shell_command -> . arith_command
    (72) shell_command -> . cond_command
    (73) shell_command -> . arith_for_command
    (95) function_def -> . WORD ( ) newline_list function_body
    (96) function_def -> . FUNCTION WORD ( ) newline_list function_body
    (97) function_def -> . FUNCTION WORD newline_list function_body
    (101) coproc -> . COPROC shell_command
    (102) coproc -> . COPROC shell_command redirection_list
    (103) coproc -> . COPROC WORD shell_command
    (104) coproc -> . COPROC WORD shell_command redirection_list
    (105) coproc -> . COPROC simple_command
    (51) simple_command_element -> . WORD
    (52) simple_command_element -> . ASSIGNMENT_WORD
    (53) simple_command_element -> . redirection
    (74) for_command -> . FOR WORD newline_list DO compound_list DONE
    (75) for_command -> . FOR WORD newline_list { compound_list }
    (76) for_command -> . FOR WORD ; newline_list DO compound_list DONE
    (77) for_command -> . FOR WORD ; newline_list { compound_list }
    (78) for_command -> . FOR WORD newline_list IN word_list list_terminator newline_list DO compound_list DONE
    (79) for_command -> . FOR WORD newline_list IN word_list list_terminator newline_list { compound_list }
    (80) for_command -> . FOR WORD newline_list IN list_terminator newline_list DO compound_list DONE
    (81) for_command -> . FOR WORD newline_list IN list_terminator newline_list { compound_list }
    (92) case_command -> . CASE WORD newline_list IN newline_list ESAC
    (93) case_command -> . CASE WORD newline_list IN case_clause_sequence newline_list ESAC
    (94) case_command -> . CASE WORD newline_list IN case_clause ESAC
    (86) select_command -> . SELECT WORD newline_list DO list DONE
    (87) select_command -> . SELECT WORD newline_list { list }
    (88) select_command -> . SELECT WORD ; newline_list DO list DONE
    (89) select_command -> . SELECT WORD ; newline_list { list }
    (90) select_command -> . SELECT WORD newline_list IN word_list list_terminator newline_list DO list DONE
    (91) select_command -> . SELECT WORD newline_list IN word_list list_terminator newline_list { list }
    (106) if_command -> . IF compound_list THEN compound_list FI
    (107) if_command -> . IF compound_list THEN compound_list ELSE compound_list FI
    (108) if_command -> . IF compound_list THEN compound_list elif_clause FI
    (100) subshell -> . ( compound_list )
    (109) group_command -> . { compound_list }
    (110) arith_command -> . ARITH_CMD
    (111) cond_command -> . COND_START COND_CMD COND_END
    (82) arith_for_command -> . FOR ARITH_FOR_EXPRS list_terminator newline_list DO compound_list DONE
    (83) arith_for_command -> . FOR ARITH_FOR_EXPRS list_terminator newline_list { compound_list }
    (84) arith_for_command -> . FOR ARITH_FOR_EXPRS DO compound_list DONE
    (85) arith_for_command -> . FOR ARITH_FOR_EXPRS { compound_list }
    (7) redirection -> . > WORD
    (8) redirection -> . < WORD
    (9) redirection -> . NUMBER > WORD
    (10) redirection -> . NUMBER < WORD
    (11) redirection -> . REDIR_WORD > WORD
    (12) redirection -> . REDIR_WORD < WORD
    (13) redirection -> . GREATER_GREATER WORD
    (14) redirection -> . NUMBER GREATER_GREATER WORD
    (15) redirection -> . REDIR_WORD GREATER_GREATER WORD
    (16) redirection -> . GREATER_BAR WORD
    (17) redirection -> . NUMBER GREATER_BAR WORD
    (18) redirection -> . REDIR_WORD GREATER_BAR WORD
    (19) redirection -> . LESS_GREATER WORD
    (20) redirection -> . NUMBER LESS_GREATER WORD
    (21) redirection -> . REDIR_WORD LESS_GREATER WORD
    (22) redirection -> . LESS_LESS WORD
    (23) redirection -> . NUMBER LESS_LESS WORD
    (24) redirection -> . REDIR_WORD LESS_LESS WORD
    (25) redirection -> . LESS_LESS_MINUS WORD
    (26) redirection -> . NUMBER LESS_LESS_MINUS WORD
    (27) redirection -> . REDIR_WORD LESS_LESS_MINUS WORD
    (28) redirection -> . LESS_LESS_LESS WORD
    (29) redirection -> . NUMBER LESS_LESS_LESS WORD
    (30) redirection -> . REDIR_WORD LESS_LESS_LESS WORD
    (31) redirection -> . LESS_AND NUMBER
    (32) redirection -> . NUMBER LESS_AND NUMBER
    (33) redirection -> . REDIR_WORD LESS_AND NUMBER
    (34) redirection -> . GREATER_AND NUMBER
    (35) redirection -> . NUMBER GREATER_AND NUMBER
    (36) redirection -> . REDIR_WORD GREATER_AND NUMBER
    (37) redirection -> . LESS_AND WORD
    (38) redirection -> . NUMBER LESS_AND WORD
    (39) redirection -> . REDIR_WORD LESS_AND WORD
    (40) redirection -> . GREATER_AND WORD
    (41) redirection -> . NUMBER GREATER_AND WORD
    (42) redirection -> . REDIR_WORD GREATER_AND WORD
    (43) redirection -> . GREATER_AND -
    (44) redirection -> . NUMBER GREATER_AND -
    (45) redirection -> . REDIR_WORD GREATER_AND -
    (46) redirection -> . LESS_AND -
    (47) redirection -> . NUMBER LESS_AND -
    (48) redirection -> . REDIR_WORD LESS_AND -
    (49) redirection -> . AND_GREATER WORD
    (50) redirection -> . AND_GREATER_GREATER WORD

    BANG            shift and go to state 32
    TIME            shift and go to state 48
    WHILE           shift and go to state 34
    UNTIL           shift and go to state 4
    WORD            shift and go to state 53
    FUNCTION        shift and go to state 49
    COPROC          shift and go to state 44
    ASSIGNMENT_WORD shift and go to state 26
    FOR             shift and go to state 31
    CASE            shift and go to state 51
    SELECT          shift and go to state 39
    IF              shift and go to state 5
    (               shift and go to state 36
    {               shift and go to state 19
    ARITH_CMD       shift and go to state 46
    COND_START      shift and go to state 22
    >               shift and go to state 41
    <               shift and go to state 40
    NUMBER          shift and go to state 9
    REDIR_WORD      shift and go to state 7
    GREATER_GREATER shift and go to state 28
    GREATER_BAR     shift and go to state 11
    LESS_GREATER    shift and go to state 33
    LESS_LESS       shift and go to state 3
    LESS_LESS_MINUS shift and go to state 18
    LESS_LESS_LESS  shift and go to state 14
    LESS_AND        shift and go to state 17
    GREATER_AND     shift and go to state 47
    AND_GREATER     shift and go to state 45
    AND_GREATER_GREATER shift and go to state 37

    command                        shift and go to state 23
    select_command                 shift and go to state 6
    for_command                    shift and go to state 43
    shell_command                  shift and go to state 25
    simple_command_element         shift and go to state 2
    coproc                         shift and go to state 10
    simple_command                 shift and go to state 27
    pipeline_command               shift and go to state 12
    cond_command                   shift and go to state 30
    timespec                       shift and go to state 24
    arith_for_command              shift and go to state 15
    arith_command                  shift and go to state 16
    case_command                   shift and go to state 35
    simple_list1                   shift and go to state 149
    group_command                  shift and go to state 20
    redirection                    shift and go to state 50
    subshell                       shift and go to state 21
    pipeline                       shift and go to state 52
    if_command                     shift and go to state 38
    function_def                   shift and go to state 1

state 196

    (152) simple_list1 -> simple_list1 ; . simple_list1
    (149) simple_list1 -> . simple_list1 AND_AND newline_list simple_list1
    (150) simple_list1 -> . simple_list1 OR_OR newline_list simple_list1
    (151) simple_list1 -> . simple_list1 & simple_list1
    (152) simple_list1 -> . simple_list1 ; simple_list1
    (153) simple_list1 -> . pipeline_command
    (154) pipeline_command -> . pipeline
    (155) pipeline_command -> . BANG pipeline_command
    (156) pipeline_command -> . timespec pipeline_command
    (157) pipeline_command -> . timespec list_terminator
    (158) pipeline_command -> . BANG list_terminator
    (159) pipeline -> . pipeline | newline_list pipeline
    (160) pipeline -> . pipeline BAR_AND newline_list pipeline
    (161) pipeline -> . command
    (162) timespec -> . TIME
    (163) timespec -> . TIME TIMEOPT
    (164) timespec -> . TIME TIMEOPT TIMEIGN
    (58) command -> . simple_command
    (59) command -> . shell_command
    (60) command -> . shell_command redirection_list
    (61) command -> . function_def
    (62) command -> . coproc
    (56) simple_command -> . simple_command_element
    (57) simple_command -> . simple_command simple_command_element
    (63) shell_command -> . for_command
    (64) shell_command -> . case_command
    (65) shell_command -> . WHILE compound_list DO compound_list DONE
    (66) shell_command -> . UNTIL compound_list DO compound_list DONE
    (67) shell_command -> . select_command
    (68) shell_command -> . if_command
    (69) shell_command -> . subshell
    (70) shell_command -> . group_command
    (71) shell_command -> . arith_command
    (72) shell_command -> . cond_command
    (73) shell_command -> . arith_for_command
    (95) function_def -> . WORD ( ) newline_list function_body
    (96) function_def -> . FUNCTION WORD ( ) newline_list function_body
    (97) function_def -> . FUNCTION WORD newline_list function_body
    (101) coproc -> . COPROC shell_command
    (102) coproc -> . COPROC shell_command redirection_list
    (103) coproc -> . COPROC WORD shell_command
    (104) coproc -> . COPROC WORD shell_command redirection_list
    (105) coproc -> . COPROC simple_command
    (51) simple_command_element -> . WORD
    (52) simple_command_element -> . ASSIGNMENT_WORD
    (53) simple_command_element -> . redirection
    (74) for_command -> . FOR WORD newline_list DO compound_list DONE
    (75) for_command -> . FOR WORD newline_list { compound_list }
    (76) for_command -> . FOR WORD ; newline_list DO compound_list DONE
    (77) for_command -> . FOR WORD ; newline_list { compound_list }
    (78) for_command -> . FOR WORD newline_list IN word_list list_terminator newline_list DO compound_list DONE
    (79) for_command -> . FOR WORD newline_list IN word_list list_terminator newline_list { compound_list }
    (80) for_command -> . FOR WORD newline_list IN list_terminator newline_list DO compound_list DONE
    (81) for_command -> . FOR WORD newline_list IN list_terminator newline_list { compound_list }
    (92) case_command -> . CASE WORD newline_list IN newline_list ESAC
    (93) case_command -> . CASE WORD newline_list IN case_clause_sequence newline_list ESAC
    (94) case_command -> . CASE WORD newline_list IN case_clause ESAC
    (86) select_command -> . SELECT WORD newline_list DO list DONE
    (87) select_command -> . SELECT WORD newline_list { list }
    (88) select_command -> . SELECT WORD ; newline_list DO list DONE
    (89) select_command -> . SELECT WORD ; newline_list { list }
    (90) select_command -> . SELECT WORD newline_list IN word_list list_terminator newline_list DO list DONE
    (91) select_command -> . SELECT WORD newline_list IN word_list list_terminator newline_list { list }
    (106) if_command -> . IF compound_list THEN compound_list FI
    (107) if_command -> . IF compound_list THEN compound_list ELSE compound_list FI
    (108) if_command -> . IF compound_list THEN compound_list elif_clause FI
    (100) subshell -> . ( compound_list )
    (109) group_command -> . { compound_list }
    (110) arith_command -> . ARITH_CMD
    (111) cond_command -> . COND_START COND_CMD COND_END
    (82) arith_for_command -> . FOR ARITH_FOR_EXPRS list_terminator newline_list DO compound_list DONE
    (83) arith_for_command -> . FOR ARITH_FOR_EXPRS list_terminator newline_list { compound_list }
    (84) arith_for_command -> . FOR ARITH_FOR_EXPRS DO compound_list DONE
    (85) arith_for_command -> . FOR ARITH_FOR_EXPRS { compound_list }
    (7) redirection -> . > WORD
    (8) redirection -> . < WORD
    (9) redirection -> . NUMBER > WORD
    (10) redirection -> . NUMBER < WORD
    (11) redirection -> . REDIR_WORD > WORD
    (12) redirection -> . REDIR_WORD < WORD
    (13) redirection -> . GREATER_GREATER WORD
    (14) redirection -> . NUMBER GREATER_GREATER WORD
    (15) redirection -> . REDIR_WORD GREATER_GREATER WORD
    (16) redirection -> . GREATER_BAR WORD
    (17) redirection -> . NUMBER GREATER_BAR WORD
    (18) redirection -> . REDIR_WORD GREATER_BAR WORD
    (19) redirection -> . LESS_GREATER WORD
    (20) redirection -> . NUMBER LESS_GREATER WORD
    (21) redirection -> . REDIR_WORD LESS_GREATER WORD
    (22) redirection -> . LESS_LESS WORD
    (23) redirection -> . NUMBER LESS_LESS WORD
    (24) redirection -> . REDIR_WORD LESS_LESS WORD
    (25) redirection -> . LESS_LESS_MINUS WORD
    (26) redirection -> . NUMBER LESS_LESS_MINUS WORD
    (27) redirection -> . REDIR_WORD LESS_LESS_MINUS WORD
    (28) redirection -> . LESS_LESS_LESS WORD
    (29) redirection -> . NUMBER LESS_LESS_LESS WORD
    (30) redirection -> . REDIR_WORD LESS_LESS_LESS WORD
    (31) redirection -> . LESS_AND NUMBER
    (32) redirection -> . NUMBER LESS_AND NUMBER
    (33) redirection -> . REDIR_WORD LESS_AND NUMBER
    (34) redirection -> . GREATER_AND NUMBER
    (35) redirection -> . NUMBER GREATER_AND NUMBER
    (36) redirection -> . REDIR_WORD GREATER_AND NUMBER
    (37) redirection -> . LESS_AND WORD
    (38) redirection -> . NUMBER LESS_AND WORD
    (39) redirection -> . REDIR_WORD LESS_AND WORD
    (40) redirection -> . GREATER_AND WORD
    (41) redirection -> . NUMBER GREATER_AND WORD
    (42) redirection -> . REDIR_WORD GREATER_AND WORD
    (43) redirection -> . GREATER_AND -
    (44) redirection -> . NUMBER GREATER_AND -
    (45) redirection -> . REDIR_WORD GREATER_AND -
    (46) redirection -> . LESS_AND -
    (47) redirection -> . NUMBER LESS_AND -
    (48) redirection -> . REDIR_WORD LESS_AND -
    (49) redirection -> . AND_GREATER WORD
    (50) redirection -> . AND_GREATER_GREATER WORD

    BANG            shift and go to state 32
    TIME            shift and go to state 48
    WHILE           shift and go to state 34
    UNTIL           shift and go to state 4
    WORD            shift and go to state 53
    FUNCTION        shift and go to state 49
    COPROC          shift and go to state 44
    ASSIGNMENT_WORD shift and go to state 26
    FOR             shift and go to state 31
    CASE            shift and go to state 51
    SELECT          shift and go to state 39
    IF              shift and go to state 5
    (               shift and go to state 36
    {               shift and go to state 19
    ARITH_CMD       shift and go to state 46
    COND_START      shift and go to state 22
    >               shift and go to state 41
    <               shift and go to state 40
    NUMBER          shift and go to state 9
    REDIR_WORD      shift and go to state 7
    GREATER_GREATER shift and go to state 28
    GREATER_BAR     shift and go to state 11
    LESS_GREATER    shift and go to state 33
    LESS_LESS       shift and go to state 3
    LESS_LESS_MINUS shift and go to state 18
    LESS_LESS_LESS  shift and go to state 14
    LESS_AND        shift and go to state 17
    GREATER_AND     shift and go to state 47
    AND_GREATER     shift and go to state 45
    AND_GREATER_GREATER shift and go to state 37

    command                        shift and go to state 23
    select_command                 shift and go to state 6
    for_command                    shift and go to state 43
    shell_command                  shift and go to state 25
    simple_command_element         shift and go to state 2
    coproc                         shift and go to state 10
    simple_command                 shift and go to state 27
    pipeline_command               shift and go to state 12
    cond_command                   shift and go to state 30
    timespec                       shift and go to state 24
    arith_for_command              shift and go to state 15
    arith_command                  shift and go to state 16
    case_command                   shift and go to state 35
    simple_list1                   shift and go to state 151
    group_command                  shift and go to state 20
    redirection                    shift and go to state 50
    subshell                       shift and go to state 21
    pipeline                       shift and go to state 52
    if_command                     shift and go to state 38
    function_def                   shift and go to state 1

state 197

    (150) simple_list1 -> simple_list1 OR_OR newline_list simple_list1 .
    (149) simple_list1 -> simple_list1 . AND_AND newline_list simple_list1
    (150) simple_list1 -> simple_list1 . OR_OR newline_list simple_list1
    (151) simple_list1 -> simple_list1 . & simple_list1
    (152) simple_list1 -> simple_list1 . ; simple_list1

  ! shift/reduce conflict for AND_AND resolved as shift
  ! shift/reduce conflict for OR_OR resolved as shift
  ! shift/reduce conflict for & resolved as shift
  ! shift/reduce conflict for ; resolved as shift
    NEWLINE         reduce using rule 150 (simple_list1 -> simple_list1 OR_OR newline_list simple_list1 .)
    AND_AND         shift and go to state 70
    OR_OR           shift and go to state 72
    &               shift and go to state 195
    ;               shift and go to state 196

  ! AND_AND         [ reduce using rule 150 (simple_list1 -> simple_list1 OR_OR newline_list simple_list1 .) ]
  ! OR_OR           [ reduce using rule 150 (simple_list1 -> simple_list1 OR_OR newline_list simple_list1 .) ]
  ! &               [ reduce using rule 150 (simple_list1 -> simple_list1 OR_OR newline_list simple_list1 .) ]
  ! ;               [ reduce using rule 150 (simple_list1 -> simple_list1 OR_OR newline_list simple_list1 .) ]


state 198

    (78) for_command -> FOR WORD newline_list IN . word_list list_terminator newline_list DO compound_list DONE
    (79) for_command -> FOR WORD newline_list IN . word_list list_terminator newline_list { compound_list }
    (80) for_command -> FOR WORD newline_list IN . list_terminator newline_list DO compound_list DONE
    (81) for_command -> FOR WORD newline_list IN . list_terminator newline_list { compound_list }
    (5) word_list -> . WORD
    (6) word_list -> . word_list WORD
    (142) list_terminator -> . NEWLINE
    (143) list_terminator -> . ;

    WORD            shift and go to state 230
    NEWLINE         shift and go to state 94
    ;               shift and go to state 95

    list_terminator                shift and go to state 229
    word_list                      shift and go to state 228

state 199

    (75) for_command -> FOR WORD newline_list { . compound_list }
    (130) compound_list -> . list
    (131) compound_list -> . newline_list list1
    (129) list -> . newline_list list0
    (144) newline_list -> .
    (145) newline_list -> . newline_list NEWLINE

    NEWLINE         reduce using rule 144 (newline_list -> .)
    BANG            reduce using rule 144 (newline_list -> .)
    TIME            reduce using rule 144 (newline_list -> .)
    WHILE           reduce using rule 144 (newline_list -> .)
    UNTIL           reduce using rule 144 (newline_list -> .)
    WORD            reduce using rule 144 (newline_list -> .)
    FUNCTION        reduce using rule 144 (newline_list -> .)
    COPROC          reduce using rule 144 (newline_list -> .)
    ASSIGNMENT_WORD reduce using rule 144 (newline_list -> .)
    FOR             reduce using rule 144 (newline_list -> .)
    CASE            reduce using rule 144 (newline_list -> .)
    SELECT          reduce using rule 144 (newline_list -> .)
    IF              reduce using rule 144 (newline_list -> .)
    (               reduce using rule 144 (newline_list -> .)
    {               reduce using rule 144 (newline_list -> .)
    ARITH_CMD       reduce using rule 144 (newline_list -> .)
    COND_START      reduce using rule 144 (newline_list -> .)
    >               reduce using rule 144 (newline_list -> .)
    <               reduce using rule 144 (newline_list -> .)
    NUMBER          reduce using rule 144 (newline_list -> .)
    REDIR_WORD      reduce using rule 144 (newline_list -> .)
    GREATER_GREATER reduce using rule 144 (newline_list -> .)
    GREATER_BAR     reduce using rule 144 (newline_list -> .)
    LESS_GREATER    reduce using rule 144 (newline_list -> .)
    LESS_LESS       reduce using rule 144 (newline_list -> .)
    LESS_LESS_MINUS reduce using rule 144 (newline_list -> .)
    LESS_LESS_LESS  reduce using rule 144 (newline_list -> .)
    LESS_AND        reduce using rule 144 (newline_list -> .)
    GREATER_AND     reduce using rule 144 (newline_list -> .)
    AND_GREATER     reduce using rule 144 (newline_list -> .)
    AND_GREATER_GREATER reduce using rule 144 (newline_list -> .)

    newline_list                   shift and go to state 56
    compound_list                  shift and go to state 231
    list                           shift and go to state 58

state 200

    (74) for_command -> FOR WORD newline_list DO . compound_list DONE
    (130) compound_list -> . list
    (131) compound_list -> . newline_list list1
    (129) list -> . newline_list list0
    (144) newline_list -> .
    (145) newline_list -> . newline_list NEWLINE

    NEWLINE         reduce using rule 144 (newline_list -> .)
    BANG            reduce using rule 144 (newline_list -> .)
    TIME            reduce using rule 144 (newline_list -> .)
    WHILE           reduce using rule 144 (newline_list -> .)
    UNTIL           reduce using rule 144 (newline_list -> .)
    WORD            reduce using rule 144 (newline_list -> .)
    FUNCTION        reduce using rule 144 (newline_list -> .)
    COPROC          reduce using rule 144 (newline_list -> .)
    ASSIGNMENT_WORD reduce using rule 144 (newline_list -> .)
    FOR             reduce using rule 144 (newline_list -> .)
    CASE            reduce using rule 144 (newline_list -> .)
    SELECT          reduce using rule 144 (newline_list -> .)
    IF              reduce using rule 144 (newline_list -> .)
    (               reduce using rule 144 (newline_list -> .)
    {               reduce using rule 144 (newline_list -> .)
    ARITH_CMD       reduce using rule 144 (newline_list -> .)
    COND_START      reduce using rule 144 (newline_list -> .)
    >               reduce using rule 144 (newline_list -> .)
    <               reduce using rule 144 (newline_list -> .)
    NUMBER          reduce using rule 144 (newline_list -> .)
    REDIR_WORD      reduce using rule 144 (newline_list -> .)
    GREATER_GREATER reduce using rule 144 (newline_list -> .)
    GREATER_BAR     reduce using rule 144 (newline_list -> .)
    LESS_GREATER    reduce using rule 144 (newline_list -> .)
    LESS_LESS       reduce using rule 144 (newline_list -> .)
    LESS_LESS_MINUS reduce using rule 144 (newline_list -> .)
    LESS_LESS_LESS  reduce using rule 144 (newline_list -> .)
    LESS_AND        reduce using rule 144 (newline_list -> .)
    GREATER_AND     reduce using rule 144 (newline_list -> .)
    AND_GREATER     reduce using rule 144 (newline_list -> .)
    AND_GREATER_GREATER reduce using rule 144 (newline_list -> .)

    newline_list                   shift and go to state 56
    compound_list                  shift and go to state 232
    list                           shift and go to state 58

state 201

    (76) for_command -> FOR WORD ; newline_list . DO compound_list DONE
    (77) for_command -> FOR WORD ; newline_list . { compound_list }
    (145) newline_list -> newline_list . NEWLINE

    DO              shift and go to state 234
    {               shift and go to state 233
    NEWLINE         shift and go to state 128


state 202

    (82) arith_for_command -> FOR ARITH_FOR_EXPRS list_terminator newline_list . DO compound_list DONE
    (83) arith_for_command -> FOR ARITH_FOR_EXPRS list_terminator newline_list . { compound_list }
    (145) newline_list -> newline_list . NEWLINE

    DO              shift and go to state 236
    {               shift and go to state 235
    NEWLINE         shift and go to state 128


state 203

    (85) arith_for_command -> FOR ARITH_FOR_EXPRS { compound_list . }

    }               shift and go to state 237


state 204

    (84) arith_for_command -> FOR ARITH_FOR_EXPRS DO compound_list . DONE

    DONE            shift and go to state 238


state 205

    (65) shell_command -> WHILE compound_list DO compound_list . DONE

    DONE            shift and go to state 239


state 206

    (90) select_command -> SELECT WORD newline_list IN . word_list list_terminator newline_list DO list DONE
    (91) select_command -> SELECT WORD newline_list IN . word_list list_terminator newline_list { list }
    (5) word_list -> . WORD
    (6) word_list -> . word_list WORD

    WORD            shift and go to state 230

    word_list                      shift and go to state 240

state 207

    (87) select_command -> SELECT WORD newline_list { . list }
    (129) list -> . newline_list list0
    (144) newline_list -> .
    (145) newline_list -> . newline_list NEWLINE

    NEWLINE         reduce using rule 144 (newline_list -> .)
    BANG            reduce using rule 144 (newline_list -> .)
    TIME            reduce using rule 144 (newline_list -> .)
    WHILE           reduce using rule 144 (newline_list -> .)
    UNTIL           reduce using rule 144 (newline_list -> .)
    WORD            reduce using rule 144 (newline_list -> .)
    FUNCTION        reduce using rule 144 (newline_list -> .)
    COPROC          reduce using rule 144 (newline_list -> .)
    ASSIGNMENT_WORD reduce using rule 144 (newline_list -> .)
    FOR             reduce using rule 144 (newline_list -> .)
    CASE            reduce using rule 144 (newline_list -> .)
    SELECT          reduce using rule 144 (newline_list -> .)
    IF              reduce using rule 144 (newline_list -> .)
    (               reduce using rule 144 (newline_list -> .)
    {               reduce using rule 144 (newline_list -> .)
    ARITH_CMD       reduce using rule 144 (newline_list -> .)
    COND_START      reduce using rule 144 (newline_list -> .)
    >               reduce using rule 144 (newline_list -> .)
    <               reduce using rule 144 (newline_list -> .)
    NUMBER          reduce using rule 144 (newline_list -> .)
    REDIR_WORD      reduce using rule 144 (newline_list -> .)
    GREATER_GREATER reduce using rule 144 (newline_list -> .)
    GREATER_BAR     reduce using rule 144 (newline_list -> .)
    LESS_GREATER    reduce using rule 144 (newline_list -> .)
    LESS_LESS       reduce using rule 144 (newline_list -> .)
    LESS_LESS_MINUS reduce using rule 144 (newline_list -> .)
    LESS_LESS_LESS  reduce using rule 144 (newline_list -> .)
    LESS_AND        reduce using rule 144 (newline_list -> .)
    GREATER_AND     reduce using rule 144 (newline_list -> .)
    AND_GREATER     reduce using rule 144 (newline_list -> .)
    AND_GREATER_GREATER reduce using rule 144 (newline_list -> .)

    newline_list                   shift and go to state 241
    list                           shift and go to state 242

state 208

    (86) select_command -> SELECT WORD newline_list DO . list DONE
    (129) list -> . newline_list list0
    (144) newline_list -> .
    (145) newline_list -> . newline_list NEWLINE

    NEWLINE         reduce using rule 144 (newline_list -> .)
    BANG            reduce using rule 144 (newline_list -> .)
    TIME            reduce using rule 144 (newline_list -> .)
    WHILE           reduce using rule 144 (newline_list -> .)
    UNTIL           reduce using rule 144 (newline_list -> .)
    WORD            reduce using rule 144 (newline_list -> .)
    FUNCTION        reduce using rule 144 (newline_list -> .)
    COPROC          reduce using rule 144 (newline_list -> .)
    ASSIGNMENT_WORD reduce using rule 144 (newline_list -> .)
    FOR             reduce using rule 144 (newline_list -> .)
    CASE            reduce using rule 144 (newline_list -> .)
    SELECT          reduce using rule 144 (newline_list -> .)
    IF              reduce using rule 144 (newline_list -> .)
    (               reduce using rule 144 (newline_list -> .)
    {               reduce using rule 144 (newline_list -> .)
    ARITH_CMD       reduce using rule 144 (newline_list -> .)
    COND_START      reduce using rule 144 (newline_list -> .)
    >               reduce using rule 144 (newline_list -> .)
    <               reduce using rule 144 (newline_list -> .)
    NUMBER          reduce using rule 144 (newline_list -> .)
    REDIR_WORD      reduce using rule 144 (newline_list -> .)
    GREATER_GREATER reduce using rule 144 (newline_list -> .)
    GREATER_BAR     reduce using rule 144 (newline_list -> .)
    LESS_GREATER    reduce using rule 144 (newline_list -> .)
    LESS_LESS       reduce using rule 144 (newline_list -> .)
    LESS_LESS_MINUS reduce using rule 144 (newline_list -> .)
    LESS_LESS_LESS  reduce using rule 144 (newline_list -> .)
    LESS_AND        reduce using rule 144 (newline_list -> .)
    GREATER_AND     reduce using rule 144 (newline_list -> .)
    AND_GREATER     reduce using rule 144 (newline_list -> .)
    AND_GREATER_GREATER reduce using rule 144 (newline_list -> .)

    newline_list                   shift and go to state 241
    list                           shift and go to state 243

state 209

    (88) select_command -> SELECT WORD ; newline_list . DO list DONE
    (89) select_command -> SELECT WORD ; newline_list . { list }
    (145) newline_list -> newline_list . NEWLINE

    DO              shift and go to state 245
    {               shift and go to state 244
    NEWLINE         shift and go to state 128


state 210

    (104) coproc -> COPROC WORD shell_command redirection_list .
    (55) redirection_list -> redirection_list . redirection
    (7) redirection -> . > WORD
    (8) redirection -> . < WORD
    (9) redirection -> . NUMBER > WORD
    (10) redirection -> . NUMBER < WORD
    (11) redirection -> . REDIR_WORD > WORD
    (12) redirection -> . REDIR_WORD < WORD
    (13) redirection -> . GREATER_GREATER WORD
    (14) redirection -> . NUMBER GREATER_GREATER WORD
    (15) redirection -> . REDIR_WORD GREATER_GREATER WORD
    (16) redirection -> . GREATER_BAR WORD
    (17) redirection -> . NUMBER GREATER_BAR WORD
    (18) redirection -> . REDIR_WORD GREATER_BAR WORD
    (19) redirection -> . LESS_GREATER WORD
    (20) redirection -> . NUMBER LESS_GREATER WORD
    (21) redirection -> . REDIR_WORD LESS_GREATER WORD
    (22) redirection -> . LESS_LESS WORD
    (23) redirection -> . NUMBER LESS_LESS WORD
    (24) redirection -> . REDIR_WORD LESS_LESS WORD
    (25) redirection -> . LESS_LESS_MINUS WORD
    (26) redirection -> . NUMBER LESS_LESS_MINUS WORD
    (27) redirection -> . REDIR_WORD LESS_LESS_MINUS WORD
    (28) redirection -> . LESS_LESS_LESS WORD
    (29) redirection -> . NUMBER LESS_LESS_LESS WORD
    (30) redirection -> . REDIR_WORD LESS_LESS_LESS WORD
    (31) redirection -> . LESS_AND NUMBER
    (32) redirection -> . NUMBER LESS_AND NUMBER
    (33) redirection -> . REDIR_WORD LESS_AND NUMBER
    (34) redirection -> . GREATER_AND NUMBER
    (35) redirection -> . NUMBER GREATER_AND NUMBER
    (36) redirection -> . REDIR_WORD GREATER_AND NUMBER
    (37) redirection -> . LESS_AND WORD
    (38) redirection -> . NUMBER LESS_AND WORD
    (39) redirection -> . REDIR_WORD LESS_AND WORD
    (40) redirection -> . GREATER_AND WORD
    (41) redirection -> . NUMBER GREATER_AND WORD
    (42) redirection -> . REDIR_WORD GREATER_AND WORD
    (43) redirection -> . GREATER_AND -
    (44) redirection -> . NUMBER GREATER_AND -
    (45) redirection -> . REDIR_WORD GREATER_AND -
    (46) redirection -> . LESS_AND -
    (47) redirection -> . NUMBER LESS_AND -
    (48) redirection -> . REDIR_WORD LESS_AND -
    (49) redirection -> . AND_GREATER WORD
    (50) redirection -> . AND_GREATER_GREATER WORD

    |               reduce using rule 104 (coproc -> COPROC WORD shell_command redirection_list .)
    BAR_AND         reduce using rule 104 (coproc -> COPROC WORD shell_command redirection_list .)
    &               reduce using rule 104 (coproc -> COPROC WORD shell_command redirection_list .)
    ;               reduce using rule 104 (coproc -> COPROC WORD shell_command redirection_list .)
    AND_AND         reduce using rule 104 (coproc -> COPROC WORD shell_command redirection_list .)
    OR_OR           reduce using rule 104 (coproc -> COPROC WORD shell_command redirection_list .)
    NEWLINE         reduce using rule 104 (coproc -> COPROC WORD shell_command redirection_list .)
    DO              reduce using rule 104 (coproc -> COPROC WORD shell_command redirection_list .)
    THEN            reduce using rule 104 (coproc -> COPROC WORD shell_command redirection_list .)
    }               reduce using rule 104 (coproc -> COPROC WORD shell_command redirection_list .)
    )               reduce using rule 104 (coproc -> COPROC WORD shell_command redirection_list .)
    DONE            reduce using rule 104 (coproc -> COPROC WORD shell_command redirection_list .)
    FI              reduce using rule 104 (coproc -> COPROC WORD shell_command redirection_list .)
    ELSE            reduce using rule 104 (coproc -> COPROC WORD shell_command redirection_list .)
    ELIF            reduce using rule 104 (coproc -> COPROC WORD shell_command redirection_list .)
    SEMI_SEMI       reduce using rule 104 (coproc -> COPROC WORD shell_command redirection_list .)
    SEMI_AND        reduce using rule 104 (coproc -> COPROC WORD shell_command redirection_list .)
    SEMI_SEMI_AND   reduce using rule 104 (coproc -> COPROC WORD shell_command redirection_list .)
    ESAC            reduce using rule 104 (coproc -> COPROC WORD shell_command redirection_list .)
    >               shift and go to state 41
    <               shift and go to state 40
    NUMBER          shift and go to state 9
    REDIR_WORD      shift and go to state 7
    GREATER_GREATER shift and go to state 28
    GREATER_BAR     shift and go to state 11
    LESS_GREATER    shift and go to state 33
    LESS_LESS       shift and go to state 3
    LESS_LESS_MINUS shift and go to state 18
    LESS_LESS_LESS  shift and go to state 14
    LESS_AND        shift and go to state 17
    GREATER_AND     shift and go to state 47
    AND_GREATER     shift and go to state 45
    AND_GREATER_GREATER shift and go to state 37

    redirection                    shift and go to state 168

state 211

    (98) function_body -> shell_command .
    (99) function_body -> shell_command . redirection_list
    (54) redirection_list -> . redirection
    (55) redirection_list -> . redirection_list redirection
    (7) redirection -> . > WORD
    (8) redirection -> . < WORD
    (9) redirection -> . NUMBER > WORD
    (10) redirection -> . NUMBER < WORD
    (11) redirection -> . REDIR_WORD > WORD
    (12) redirection -> . REDIR_WORD < WORD
    (13) redirection -> . GREATER_GREATER WORD
    (14) redirection -> . NUMBER GREATER_GREATER WORD
    (15) redirection -> . REDIR_WORD GREATER_GREATER WORD
    (16) redirection -> . GREATER_BAR WORD
    (17) redirection -> . NUMBER GREATER_BAR WORD
    (18) redirection -> . REDIR_WORD GREATER_BAR WORD
    (19) redirection -> . LESS_GREATER WORD
    (20) redirection -> . NUMBER LESS_GREATER WORD
    (21) redirection -> . REDIR_WORD LESS_GREATER WORD
    (22) redirection -> . LESS_LESS WORD
    (23) redirection -> . NUMBER LESS_LESS WORD
    (24) redirection -> . REDIR_WORD LESS_LESS WORD
    (25) redirection -> . LESS_LESS_MINUS WORD
    (26) redirection -> . NUMBER LESS_LESS_MINUS WORD
    (27) redirection -> . REDIR_WORD LESS_LESS_MINUS WORD
    (28) redirection -> . LESS_LESS_LESS WORD
    (29) redirection -> . NUMBER LESS_LESS_LESS WORD
    (30) redirection -> . REDIR_WORD LESS_LESS_LESS WORD
    (31) redirection -> . LESS_AND NUMBER
    (32) redirection -> . NUMBER LESS_AND NUMBER
    (33) redirection -> . REDIR_WORD LESS_AND NUMBER
    (34) redirection -> . GREATER_AND NUMBER
    (35) redirection -> . NUMBER GREATER_AND NUMBER
    (36) redirection -> . REDIR_WORD GREATER_AND NUMBER
    (37) redirection -> . LESS_AND WORD
    (38) redirection -> . NUMBER LESS_AND WORD
    (39) redirection -> . REDIR_WORD LESS_AND WORD
    (40) redirection -> . GREATER_AND WORD
    (41) redirection -> . NUMBER GREATER_AND WORD
    (42) redirection -> . REDIR_WORD GREATER_AND WORD
    (43) redirection -> . GREATER_AND -
    (44) redirection -> . NUMBER GREATER_AND -
    (45) redirection -> . REDIR_WORD GREATER_AND -
    (46) redirection -> . LESS_AND -
    (47) redirection -> . NUMBER LESS_AND -
    (48) redirection -> . REDIR_WORD LESS_AND -
    (49) redirection -> . AND_GREATER WORD
    (50) redirection -> . AND_GREATER_GREATER WORD

    |               reduce using rule 98 (function_body -> shell_command .)
    BAR_AND         reduce using rule 98 (function_body -> shell_command .)
    &               reduce using rule 98 (function_body -> shell_command .)
    ;               reduce using rule 98 (function_body -> shell_command .)
    AND_AND         reduce using rule 98 (function_body -> shell_command .)
    OR_OR           reduce using rule 98 (function_body -> shell_command .)
    NEWLINE         reduce using rule 98 (function_body -> shell_command .)
    DO              reduce using rule 98 (function_body -> shell_command .)
    THEN            reduce using rule 98 (function_body -> shell_command .)
    }               reduce using rule 98 (function_body -> shell_command .)
    )               reduce using rule 98 (function_body -> shell_command .)
    DONE            reduce using rule 98 (function_body -> shell_command .)
    FI              reduce using rule 98 (function_body -> shell_command .)
    ELSE            reduce using rule 98 (function_body -> shell_command .)
    ELIF            reduce using rule 98 (function_body -> shell_command .)
    SEMI_SEMI       reduce using rule 98 (function_body -> shell_command .)
    SEMI_AND        reduce using rule 98 (function_body -> shell_command .)
    SEMI_SEMI_AND   reduce using rule 98 (function_body -> shell_command .)
    ESAC            reduce using rule 98 (function_body -> shell_command .)
    >               shift and go to state 41
    <               shift and go to state 40
    NUMBER          shift and go to state 9
    REDIR_WORD      shift and go to state 7
    GREATER_GREATER shift and go to state 28
    GREATER_BAR     shift and go to state 11
    LESS_GREATER    shift and go to state 33
    LESS_LESS       shift and go to state 3
    LESS_LESS_MINUS shift and go to state 18
    LESS_LESS_LESS  shift and go to state 14
    LESS_AND        shift and go to state 17
    GREATER_AND     shift and go to state 47
    AND_GREATER     shift and go to state 45
    AND_GREATER_GREATER shift and go to state 37

    redirection                    shift and go to state 98
    redirection_list               shift and go to state 246

state 212

    (97) function_def -> FUNCTION WORD newline_list function_body .

    |               reduce using rule 97 (function_def -> FUNCTION WORD newline_list function_body .)
    BAR_AND         reduce using rule 97 (function_def -> FUNCTION WORD newline_list function_body .)
    &               reduce using rule 97 (function_def -> FUNCTION WORD newline_list function_body .)
    ;               reduce using rule 97 (function_def -> FUNCTION WORD newline_list function_body .)
    AND_AND         reduce using rule 97 (function_def -> FUNCTION WORD newline_list function_body .)
    OR_OR           reduce using rule 97 (function_def -> FUNCTION WORD newline_list function_body .)
    NEWLINE         reduce using rule 97 (function_def -> FUNCTION WORD newline_list function_body .)
    DO              reduce using rule 97 (function_def -> FUNCTION WORD newline_list function_body .)
    THEN            reduce using rule 97 (function_def -> FUNCTION WORD newline_list function_body .)
    }               reduce using rule 97 (function_def -> FUNCTION WORD newline_list function_body .)
    )               reduce using rule 97 (function_def -> FUNCTION WORD newline_list function_body .)
    DONE            reduce using rule 97 (function_def -> FUNCTION WORD newline_list function_body .)
    FI              reduce using rule 97 (function_def -> FUNCTION WORD newline_list function_body .)
    ELSE            reduce using rule 97 (function_def -> FUNCTION WORD newline_list function_body .)
    ELIF            reduce using rule 97 (function_def -> FUNCTION WORD newline_list function_body .)
    SEMI_SEMI       reduce using rule 97 (function_def -> FUNCTION WORD newline_list function_body .)
    SEMI_AND        reduce using rule 97 (function_def -> FUNCTION WORD newline_list function_body .)
    SEMI_SEMI_AND   reduce using rule 97 (function_def -> FUNCTION WORD newline_list function_body .)
    ESAC            reduce using rule 97 (function_def -> FUNCTION WORD newline_list function_body .)


state 213

    (96) function_def -> FUNCTION WORD ( ) . newline_list function_body
    (144) newline_list -> .
    (145) newline_list -> . newline_list NEWLINE

    NEWLINE         reduce using rule 144 (newline_list -> .)
    WHILE           reduce using rule 144 (newline_list -> .)
    UNTIL           reduce using rule 144 (newline_list -> .)
    FOR             reduce using rule 144 (newline_list -> .)
    CASE            reduce using rule 144 (newline_list -> .)
    SELECT          reduce using rule 144 (newline_list -> .)
    IF              reduce using rule 144 (newline_list -> .)
    (               reduce using rule 144 (newline_list -> .)
    {               reduce using rule 144 (newline_list -> .)
    ARITH_CMD       reduce using rule 144 (newline_list -> .)
    COND_START      reduce using rule 144 (newline_list -> .)

    newline_list                   shift and go to state 247

state 214

    (92) case_command -> CASE WORD newline_list IN . newline_list ESAC
    (93) case_command -> CASE WORD newline_list IN . case_clause_sequence newline_list ESAC
    (94) case_command -> CASE WORD newline_list IN . case_clause ESAC
    (144) newline_list -> .
    (145) newline_list -> . newline_list NEWLINE
    (121) case_clause_sequence -> . pattern_list SEMI_SEMI
    (122) case_clause_sequence -> . case_clause_sequence pattern_list SEMI_SEMI
    (123) case_clause_sequence -> . pattern_list SEMI_AND
    (124) case_clause_sequence -> . case_clause_sequence pattern_list SEMI_AND
    (125) case_clause_sequence -> . pattern_list SEMI_SEMI_AND
    (126) case_clause_sequence -> . case_clause_sequence pattern_list SEMI_SEMI_AND
    (115) case_clause -> . pattern_list
    (116) case_clause -> . case_clause_sequence pattern_list
    (117) pattern_list -> . newline_list pattern ) compound_list
    (118) pattern_list -> . newline_list pattern ) newline_list
    (119) pattern_list -> . newline_list ( pattern ) compound_list
    (120) pattern_list -> . newline_list ( pattern ) newline_list

    ESAC            reduce using rule 144 (newline_list -> .)
    NEWLINE         reduce using rule 144 (newline_list -> .)
    (               reduce using rule 144 (newline_list -> .)
    WORD            reduce using rule 144 (newline_list -> .)

    newline_list                   shift and go to state 248
    case_clause_sequence           shift and go to state 250
    pattern_list                   shift and go to state 249
    case_clause                    shift and go to state 251

state 215

    (159) pipeline -> pipeline | newline_list pipeline .
    (159) pipeline -> pipeline . | newline_list pipeline
    (160) pipeline -> pipeline . BAR_AND newline_list pipeline

  ! shift/reduce conflict for | resolved as shift
  ! shift/reduce conflict for BAR_AND resolved as shift
    AND_AND         reduce using rule 159 (pipeline -> pipeline | newline_list pipeline .)
    OR_OR           reduce using rule 159 (pipeline -> pipeline | newline_list pipeline .)
    &               reduce using rule 159 (pipeline -> pipeline | newline_list pipeline .)
    ;               reduce using rule 159 (pipeline -> pipeline | newline_list pipeline .)
    NEWLINE         reduce using rule 159 (pipeline -> pipeline | newline_list pipeline .)
    DO              reduce using rule 159 (pipeline -> pipeline | newline_list pipeline .)
    THEN            reduce using rule 159 (pipeline -> pipeline | newline_list pipeline .)
    }               reduce using rule 159 (pipeline -> pipeline | newline_list pipeline .)
    )               reduce using rule 159 (pipeline -> pipeline | newline_list pipeline .)
    DONE            reduce using rule 159 (pipeline -> pipeline | newline_list pipeline .)
    FI              reduce using rule 159 (pipeline -> pipeline | newline_list pipeline .)
    ELSE            reduce using rule 159 (pipeline -> pipeline | newline_list pipeline .)
    ELIF            reduce using rule 159 (pipeline -> pipeline | newline_list pipeline .)
    SEMI_SEMI       reduce using rule 159 (pipeline -> pipeline | newline_list pipeline .)
    SEMI_AND        reduce using rule 159 (pipeline -> pipeline | newline_list pipeline .)
    SEMI_SEMI_AND   reduce using rule 159 (pipeline -> pipeline | newline_list pipeline .)
    ESAC            reduce using rule 159 (pipeline -> pipeline | newline_list pipeline .)
    |               shift and go to state 124
    BAR_AND         shift and go to state 125

  ! |               [ reduce using rule 159 (pipeline -> pipeline | newline_list pipeline .) ]
  ! BAR_AND         [ reduce using rule 159 (pipeline -> pipeline | newline_list pipeline .) ]


state 216

    (160) pipeline -> pipeline BAR_AND newline_list pipeline .
    (159) pipeline -> pipeline . | newline_list pipeline
    (160) pipeline -> pipeline . BAR_AND newline_list pipeline

  ! shift/reduce conflict for | resolved as shift
  ! shift/reduce conflict for BAR_AND resolved as shift
    AND_AND         reduce using rule 160 (pipeline -> pipeline BAR_AND newline_list pipeline .)
    OR_OR           reduce using rule 160 (pipeline -> pipeline BAR_AND newline_list pipeline .)
    &               reduce using rule 160 (pipeline -> pipeline BAR_AND newline_list pipeline .)
    ;               reduce using rule 160 (pipeline -> pipeline BAR_AND newline_list pipeline .)
    NEWLINE         reduce using rule 160 (pipeline -> pipeline BAR_AND newline_list pipeline .)
    DO              reduce using rule 160 (pipeline -> pipeline BAR_AND newline_list pipeline .)
    THEN            reduce using rule 160 (pipeline -> pipeline BAR_AND newline_list pipeline .)
    }               reduce using rule 160 (pipeline -> pipeline BAR_AND newline_list pipeline .)
    )               reduce using rule 160 (pipeline -> pipeline BAR_AND newline_list pipeline .)
    DONE            reduce using rule 160 (pipeline -> pipeline BAR_AND newline_list pipeline .)
    FI              reduce using rule 160 (pipeline -> pipeline BAR_AND newline_list pipeline .)
    ELSE            reduce using rule 160 (pipeline -> pipeline BAR_AND newline_list pipeline .)
    ELIF            reduce using rule 160 (pipeline -> pipeline BAR_AND newline_list pipeline .)
    SEMI_SEMI       reduce using rule 160 (pipeline -> pipeline BAR_AND newline_list pipeline .)
    SEMI_AND        reduce using rule 160 (pipeline -> pipeline BAR_AND newline_list pipeline .)
    SEMI_SEMI_AND   reduce using rule 160 (pipeline -> pipeline BAR_AND newline_list pipeline .)
    ESAC            reduce using rule 160 (pipeline -> pipeline BAR_AND newline_list pipeline .)
    |               shift and go to state 124
    BAR_AND         shift and go to state 125

  ! |               [ reduce using rule 160 (pipeline -> pipeline BAR_AND newline_list pipeline .) ]
  ! BAR_AND         [ reduce using rule 160 (pipeline -> pipeline BAR_AND newline_list pipeline .) ]


state 217

    (95) function_def -> WORD ( ) newline_list . function_body
    (145) newline_list -> newline_list . NEWLINE
    (98) function_body -> . shell_command
    (99) function_body -> . shell_command redirection_list
    (63) shell_command -> . for_command
    (64) shell_command -> . case_command
    (65) shell_command -> . WHILE compound_list DO compound_list DONE
    (66) shell_command -> . UNTIL compound_list DO compound_list DONE
    (67) shell_command -> . select_command
    (68) shell_command -> . if_command
    (69) shell_command -> . subshell
    (70) shell_command -> . group_command
    (71) shell_command -> . arith_command
    (72) shell_command -> . cond_command
    (73) shell_command -> . arith_for_command
    (74) for_command -> . FOR WORD newline_list DO compound_list DONE
    (75) for_command -> . FOR WORD newline_list { compound_list }
    (76) for_command -> . FOR WORD ; newline_list DO compound_list DONE
    (77) for_command -> . FOR WORD ; newline_list { compound_list }
    (78) for_command -> . FOR WORD newline_list IN word_list list_terminator newline_list DO compound_list DONE
    (79) for_command -> . FOR WORD newline_list IN word_list list_terminator newline_list { compound_list }
    (80) for_command -> . FOR WORD newline_list IN list_terminator newline_list DO compound_list DONE
    (81) for_command -> . FOR WORD newline_list IN list_terminator newline_list { compound_list }
    (92) case_command -> . CASE WORD newline_list IN newline_list ESAC
    (93) case_command -> . CASE WORD newline_list IN case_clause_sequence newline_list ESAC
    (94) case_command -> . CASE WORD newline_list IN case_clause ESAC
    (86) select_command -> . SELECT WORD newline_list DO list DONE
    (87) select_command -> . SELECT WORD newline_list { list }
    (88) select_command -> . SELECT WORD ; newline_list DO list DONE
    (89) select_command -> . SELECT WORD ; newline_list { list }
    (90) select_command -> . SELECT WORD newline_list IN word_list list_terminator newline_list DO list DONE
    (91) select_command -> . SELECT WORD newline_list IN word_list list_terminator newline_list { list }
    (106) if_command -> . IF compound_list THEN compound_list FI
    (107) if_command -> . IF compound_list THEN compound_list ELSE compound_list FI
    (108) if_command -> . IF compound_list THEN compound_list elif_clause FI
    (100) subshell -> . ( compound_list )
    (109) group_command -> . { compound_list }
    (110) arith_command -> . ARITH_CMD
    (111) cond_command -> . COND_START COND_CMD COND_END
    (82) arith_for_command -> . FOR ARITH_FOR_EXPRS list_terminator newline_list DO compound_list DONE
    (83) arith_for_command -> . FOR ARITH_FOR_EXPRS list_terminator newline_list { compound_list }
    (84) arith_for_command -> . FOR ARITH_FOR_EXPRS DO compound_list DONE
    (85) arith_for_command -> . FOR ARITH_FOR_EXPRS { compound_list }

    NEWLINE         shift and go to state 128
    WHILE           shift and go to state 34
    UNTIL           shift and go to state 4
    FOR             shift and go to state 31
    CASE            shift and go to state 51
    SELECT          shift and go to state 39
    IF              shift and go to state 5
    (               shift and go to state 36
    {               shift and go to state 19
    ARITH_CMD       shift and go to state 46
    COND_START      shift and go to state 22

    select_command                 shift and go to state 6
    for_command                    shift and go to state 43
    shell_command                  shift and go to state 211
    arith_command                  shift and go to state 16
    group_command                  shift and go to state 20
    arith_for_command              shift and go to state 15
    cond_command                   shift and go to state 30
    subshell                       shift and go to state 21
    function_body                  shift and go to state 252
    case_command                   shift and go to state 35
    if_command                     shift and go to state 38

state 218

    (135) list1 -> list1 AND_AND newline_list . list1
    (145) newline_list -> newline_list . NEWLINE
    (135) list1 -> . list1 AND_AND newline_list list1
    (136) list1 -> . list1 OR_OR newline_list list1
    (137) list1 -> . list1 & newline_list list1
    (138) list1 -> . list1 ; newline_list list1
    (139) list1 -> . list1 NEWLINE newline_list list1
    (140) list1 -> . pipeline_command
    (154) pipeline_command -> . pipeline
    (155) pipeline_command -> . BANG pipeline_command
    (156) pipeline_command -> . timespec pipeline_command
    (157) pipeline_command -> . timespec list_terminator
    (158) pipeline_command -> . BANG list_terminator
    (159) pipeline -> . pipeline | newline_list pipeline
    (160) pipeline -> . pipeline BAR_AND newline_list pipeline
    (161) pipeline -> . command
    (162) timespec -> . TIME
    (163) timespec -> . TIME TIMEOPT
    (164) timespec -> . TIME TIMEOPT TIMEIGN
    (58) command -> . simple_command
    (59) command -> . shell_command
    (60) command -> . shell_command redirection_list
    (61) command -> . function_def
    (62) command -> . coproc
    (56) simple_command -> . simple_command_element
    (57) simple_command -> . simple_command simple_command_element
    (63) shell_command -> . for_command
    (64) shell_command -> . case_command
    (65) shell_command -> . WHILE compound_list DO compound_list DONE
    (66) shell_command -> . UNTIL compound_list DO compound_list DONE
    (67) shell_command -> . select_command
    (68) shell_command -> . if_command
    (69) shell_command -> . subshell
    (70) shell_command -> . group_command
    (71) shell_command -> . arith_command
    (72) shell_command -> . cond_command
    (73) shell_command -> . arith_for_command
    (95) function_def -> . WORD ( ) newline_list function_body
    (96) function_def -> . FUNCTION WORD ( ) newline_list function_body
    (97) function_def -> . FUNCTION WORD newline_list function_body
    (101) coproc -> . COPROC shell_command
    (102) coproc -> . COPROC shell_command redirection_list
    (103) coproc -> . COPROC WORD shell_command
    (104) coproc -> . COPROC WORD shell_command redirection_list
    (105) coproc -> . COPROC simple_command
    (51) simple_command_element -> . WORD
    (52) simple_command_element -> . ASSIGNMENT_WORD
    (53) simple_command_element -> . redirection
    (74) for_command -> . FOR WORD newline_list DO compound_list DONE
    (75) for_command -> . FOR WORD newline_list { compound_list }
    (76) for_command -> . FOR WORD ; newline_list DO compound_list DONE
    (77) for_command -> . FOR WORD ; newline_list { compound_list }
    (78) for_command -> . FOR WORD newline_list IN word_list list_terminator newline_list DO compound_list DONE
    (79) for_command -> . FOR WORD newline_list IN word_list list_terminator newline_list { compound_list }
    (80) for_command -> . FOR WORD newline_list IN list_terminator newline_list DO compound_list DONE
    (81) for_command -> . FOR WORD newline_list IN list_terminator newline_list { compound_list }
    (92) case_command -> . CASE WORD newline_list IN newline_list ESAC
    (93) case_command -> . CASE WORD newline_list IN case_clause_sequence newline_list ESAC
    (94) case_command -> . CASE WORD newline_list IN case_clause ESAC
    (86) select_command -> . SELECT WORD newline_list DO list DONE
    (87) select_command -> . SELECT WORD newline_list { list }
    (88) select_command -> . SELECT WORD ; newline_list DO list DONE
    (89) select_command -> . SELECT WORD ; newline_list { list }
    (90) select_command -> . SELECT WORD newline_list IN word_list list_terminator newline_list DO list DONE
    (91) select_command -> . SELECT WORD newline_list IN word_list list_terminator newline_list { list }
    (106) if_command -> . IF compound_list THEN compound_list FI
    (107) if_command -> . IF compound_list THEN compound_list ELSE compound_list FI
    (108) if_command -> . IF compound_list THEN compound_list elif_clause FI
    (100) subshell -> . ( compound_list )
    (109) group_command -> . { compound_list }
    (110) arith_command -> . ARITH_CMD
    (111) cond_command -> . COND_START COND_CMD COND_END
    (82) arith_for_command -> . FOR ARITH_FOR_EXPRS list_terminator newline_list DO compound_list DONE
    (83) arith_for_command -> . FOR ARITH_FOR_EXPRS list_terminator newline_list { compound_list }
    (84) arith_for_command -> . FOR ARITH_FOR_EXPRS DO compound_list DONE
    (85) arith_for_command -> . FOR ARITH_FOR_EXPRS { compound_list }
    (7) redirection -> . > WORD
    (8) redirection -> . < WORD
    (9) redirection -> . NUMBER > WORD
    (10) redirection -> . NUMBER < WORD
    (11) redirection -> . REDIR_WORD > WORD
    (12) redirection -> . REDIR_WORD < WORD
    (13) redirection -> . GREATER_GREATER WORD
    (14) redirection -> . NUMBER GREATER_GREATER WORD
    (15) redirection -> . REDIR_WORD GREATER_GREATER WORD
    (16) redirection -> . GREATER_BAR WORD
    (17) redirection -> . NUMBER GREATER_BAR WORD
    (18) redirection -> . REDIR_WORD GREATER_BAR WORD
    (19) redirection -> . LESS_GREATER WORD
    (20) redirection -> . NUMBER LESS_GREATER WORD
    (21) redirection -> . REDIR_WORD LESS_GREATER WORD
    (22) redirection -> . LESS_LESS WORD
    (23) redirection -> . NUMBER LESS_LESS WORD
    (24) redirection -> . REDIR_WORD LESS_LESS WORD
    (25) redirection -> . LESS_LESS_MINUS WORD
    (26) redirection -> . NUMBER LESS_LESS_MINUS WORD
    (27) redirection -> . REDIR_WORD LESS_LESS_MINUS WORD
    (28) redirection -> . LESS_LESS_LESS WORD
    (29) redirection -> . NUMBER LESS_LESS_LESS WORD
    (30) redirection -> . REDIR_WORD LESS_LESS_LESS WORD
    (31) redirection -> . LESS_AND NUMBER
    (32) redirection -> . NUMBER LESS_AND NUMBER
    (33) redirection -> . REDIR_WORD LESS_AND NUMBER
    (34) redirection -> . GREATER_AND NUMBER
    (35) redirection -> . NUMBER GREATER_AND NUMBER
    (36) redirection -> . REDIR_WORD GREATER_AND NUMBER
    (37) redirection -> . LESS_AND WORD
    (38) redirection -> . NUMBER LESS_AND WORD
    (39) redirection -> . REDIR_WORD LESS_AND WORD
    (40) redirection -> . GREATER_AND WORD
    (41) redirection -> . NUMBER GREATER_AND WORD
    (42) redirection -> . REDIR_WORD GREATER_AND WORD
    (43) redirection -> . GREATER_AND -
    (44) redirection -> . NUMBER GREATER_AND -
    (45) redirection -> . REDIR_WORD GREATER_AND -
    (46) redirection -> . LESS_AND -
    (47) redirection -> . NUMBER LESS_AND -
    (48) redirection -> . REDIR_WORD LESS_AND -
    (49) redirection -> . AND_GREATER WORD
    (50) redirection -> . AND_GREATER_GREATER WORD

    NEWLINE         shift and go to state 128
    BANG            shift and go to state 32
    TIME            shift and go to state 48
    WHILE           shift and go to state 34
    UNTIL           shift and go to state 4
    WORD            shift and go to state 53
    FUNCTION        shift and go to state 49
    COPROC          shift and go to state 44
    ASSIGNMENT_WORD shift and go to state 26
    FOR             shift and go to state 31
    CASE            shift and go to state 51
    SELECT          shift and go to state 39
    IF              shift and go to state 5
    (               shift and go to state 36
    {               shift and go to state 19
    ARITH_CMD       shift and go to state 46
    COND_START      shift and go to state 22
    >               shift and go to state 41
    <               shift and go to state 40
    NUMBER          shift and go to state 9
    REDIR_WORD      shift and go to state 7
    GREATER_GREATER shift and go to state 28
    GREATER_BAR     shift and go to state 11
    LESS_GREATER    shift and go to state 33
    LESS_LESS       shift and go to state 3
    LESS_LESS_MINUS shift and go to state 18
    LESS_LESS_LESS  shift and go to state 14
    LESS_AND        shift and go to state 17
    GREATER_AND     shift and go to state 47
    AND_GREATER     shift and go to state 45
    AND_GREATER_GREATER shift and go to state 37

    command                        shift and go to state 23
    select_command                 shift and go to state 6
    for_command                    shift and go to state 43
    shell_command                  shift and go to state 25
    simple_command_element         shift and go to state 2
    coproc                         shift and go to state 10
    simple_command                 shift and go to state 27
    pipeline_command               shift and go to state 131
    cond_command                   shift and go to state 30
    timespec                       shift and go to state 24
    arith_for_command              shift and go to state 15
    arith_command                  shift and go to state 16
    list1                          shift and go to state 253
    group_command                  shift and go to state 20
    redirection                    shift and go to state 50
    subshell                       shift and go to state 21
    pipeline                       shift and go to state 52
    case_command                   shift and go to state 35
    if_command                     shift and go to state 38
    function_def                   shift and go to state 1

state 219

    (137) list1 -> list1 & newline_list . list1
    (133) list0 -> list1 & newline_list .
    (145) newline_list -> newline_list . NEWLINE
    (135) list1 -> . list1 AND_AND newline_list list1
    (136) list1 -> . list1 OR_OR newline_list list1
    (137) list1 -> . list1 & newline_list list1
    (138) list1 -> . list1 ; newline_list list1
    (139) list1 -> . list1 NEWLINE newline_list list1
    (140) list1 -> . pipeline_command
    (154) pipeline_command -> . pipeline
    (155) pipeline_command -> . BANG pipeline_command
    (156) pipeline_command -> . timespec pipeline_command
    (157) pipeline_command -> . timespec list_terminator
    (158) pipeline_command -> . BANG list_terminator
    (159) pipeline -> . pipeline | newline_list pipeline
    (160) pipeline -> . pipeline BAR_AND newline_list pipeline
    (161) pipeline -> . command
    (162) timespec -> . TIME
    (163) timespec -> . TIME TIMEOPT
    (164) timespec -> . TIME TIMEOPT TIMEIGN
    (58) command -> . simple_command
    (59) command -> . shell_command
    (60) command -> . shell_command redirection_list
    (61) command -> . function_def
    (62) command -> . coproc
    (56) simple_command -> . simple_command_element
    (57) simple_command -> . simple_command simple_command_element
    (63) shell_command -> . for_command
    (64) shell_command -> . case_command
    (65) shell_command -> . WHILE compound_list DO compound_list DONE
    (66) shell_command -> . UNTIL compound_list DO compound_list DONE
    (67) shell_command -> . select_command
    (68) shell_command -> . if_command
    (69) shell_command -> . subshell
    (70) shell_command -> . group_command
    (71) shell_command -> . arith_command
    (72) shell_command -> . cond_command
    (73) shell_command -> . arith_for_command
    (95) function_def -> . WORD ( ) newline_list function_body
    (96) function_def -> . FUNCTION WORD ( ) newline_list function_body
    (97) function_def -> . FUNCTION WORD newline_list function_body
    (101) coproc -> . COPROC shell_command
    (102) coproc -> . COPROC shell_command redirection_list
    (103) coproc -> . COPROC WORD shell_command
    (104) coproc -> . COPROC WORD shell_command redirection_list
    (105) coproc -> . COPROC simple_command
    (51) simple_command_element -> . WORD
    (52) simple_command_element -> . ASSIGNMENT_WORD
    (53) simple_command_element -> . redirection
    (74) for_command -> . FOR WORD newline_list DO compound_list DONE
    (75) for_command -> . FOR WORD newline_list { compound_list }
    (76) for_command -> . FOR WORD ; newline_list DO compound_list DONE
    (77) for_command -> . FOR WORD ; newline_list { compound_list }
    (78) for_command -> . FOR WORD newline_list IN word_list list_terminator newline_list DO compound_list DONE
    (79) for_command -> . FOR WORD newline_list IN word_list list_terminator newline_list { compound_list }
    (80) for_command -> . FOR WORD newline_list IN list_terminator newline_list DO compound_list DONE
    (81) for_command -> . FOR WORD newline_list IN list_terminator newline_list { compound_list }
    (92) case_command -> . CASE WORD newline_list IN newline_list ESAC
    (93) case_command -> . CASE WORD newline_list IN case_clause_sequence newline_list ESAC
    (94) case_command -> . CASE WORD newline_list IN case_clause ESAC
    (86) select_command -> . SELECT WORD newline_list DO list DONE
    (87) select_command -> . SELECT WORD newline_list { list }
    (88) select_command -> . SELECT WORD ; newline_list DO list DONE
    (89) select_command -> . SELECT WORD ; newline_list { list }
    (90) select_command -> . SELECT WORD newline_list IN word_list list_terminator newline_list DO list DONE
    (91) select_command -> . SELECT WORD newline_list IN word_list list_terminator newline_list { list }
    (106) if_command -> . IF compound_list THEN compound_list FI
    (107) if_command -> . IF compound_list THEN compound_list ELSE compound_list FI
    (108) if_command -> . IF compound_list THEN compound_list elif_clause FI
    (100) subshell -> . ( compound_list )
    (109) group_command -> . { compound_list }
    (110) arith_command -> . ARITH_CMD
    (111) cond_command -> . COND_START COND_CMD COND_END
    (82) arith_for_command -> . FOR ARITH_FOR_EXPRS list_terminator newline_list DO compound_list DONE
    (83) arith_for_command -> . FOR ARITH_FOR_EXPRS list_terminator newline_list { compound_list }
    (84) arith_for_command -> . FOR ARITH_FOR_EXPRS DO compound_list DONE
    (85) arith_for_command -> . FOR ARITH_FOR_EXPRS { compound_list }
    (7) redirection -> . > WORD
    (8) redirection -> . < WORD
    (9) redirection -> . NUMBER > WORD
    (10) redirection -> . NUMBER < WORD
    (11) redirection -> . REDIR_WORD > WORD
    (12) redirection -> . REDIR_WORD < WORD
    (13) redirection -> . GREATER_GREATER WORD
    (14) redirection -> . NUMBER GREATER_GREATER WORD
    (15) redirection -> . REDIR_WORD GREATER_GREATER WORD
    (16) redirection -> . GREATER_BAR WORD
    (17) redirection -> . NUMBER GREATER_BAR WORD
    (18) redirection -> . REDIR_WORD GREATER_BAR WORD
    (19) redirection -> . LESS_GREATER WORD
    (20) redirection -> . NUMBER LESS_GREATER WORD
    (21) redirection -> . REDIR_WORD LESS_GREATER WORD
    (22) redirection -> . LESS_LESS WORD
    (23) redirection -> . NUMBER LESS_LESS WORD
    (24) redirection -> . REDIR_WORD LESS_LESS WORD
    (25) redirection -> . LESS_LESS_MINUS WORD
    (26) redirection -> . NUMBER LESS_LESS_MINUS WORD
    (27) redirection -> . REDIR_WORD LESS_LESS_MINUS WORD
    (28) redirection -> . LESS_LESS_LESS WORD
    (29) redirection -> . NUMBER LESS_LESS_LESS WORD
    (30) redirection -> . REDIR_WORD LESS_LESS_LESS WORD
    (31) redirection -> . LESS_AND NUMBER
    (32) redirection -> . NUMBER LESS_AND NUMBER
    (33) redirection -> . REDIR_WORD LESS_AND NUMBER
    (34) redirection -> . GREATER_AND NUMBER
    (35) redirection -> . NUMBER GREATER_AND NUMBER
    (36) redirection -> . REDIR_WORD GREATER_AND NUMBER
    (37) redirection -> . LESS_AND WORD
    (38) redirection -> . NUMBER LESS_AND WORD
    (39) redirection -> . REDIR_WORD LESS_AND WORD
    (40) redirection -> . GREATER_AND WORD
    (41) redirection -> . NUMBER GREATER_AND WORD
    (42) redirection -> . REDIR_WORD GREATER_AND WORD
    (43) redirection -> . GREATER_AND -
    (44) redirection -> . NUMBER GREATER_AND -
    (45) redirection -> . REDIR_WORD GREATER_AND -
    (46) redirection -> . LESS_AND -
    (47) redirection -> . NUMBER LESS_AND -
    (48) redirection -> . REDIR_WORD LESS_AND -
    (49) redirection -> . AND_GREATER WORD
    (50) redirection -> . AND_GREATER_GREATER WORD

    DO              reduce using rule 133 (list0 -> list1 & newline_list .)
    THEN            reduce using rule 133 (list0 -> list1 & newline_list .)
    }               reduce using rule 133 (list0 -> list1 & newline_list .)
    )               reduce using rule 133 (list0 -> list1 & newline_list .)
    DONE            reduce using rule 133 (list0 -> list1 & newline_list .)
    FI              reduce using rule 133 (list0 -> list1 & newline_list .)
    ELSE            reduce using rule 133 (list0 -> list1 & newline_list .)
    ELIF            reduce using rule 133 (list0 -> list1 & newline_list .)
    SEMI_SEMI       reduce using rule 133 (list0 -> list1 & newline_list .)
    SEMI_AND        reduce using rule 133 (list0 -> list1 & newline_list .)
    SEMI_SEMI_AND   reduce using rule 133 (list0 -> list1 & newline_list .)
    ESAC            reduce using rule 133 (list0 -> list1 & newline_list .)
    NEWLINE         shift and go to state 128
    BANG            shift and go to state 32
    TIME            shift and go to state 48
    WHILE           shift and go to state 34
    UNTIL           shift and go to state 4
    WORD            shift and go to state 53
    FUNCTION        shift and go to state 49
    COPROC          shift and go to state 44
    ASSIGNMENT_WORD shift and go to state 26
    FOR             shift and go to state 31
    CASE            shift and go to state 51
    SELECT          shift and go to state 39
    IF              shift and go to state 5
    (               shift and go to state 36
    {               shift and go to state 19
    ARITH_CMD       shift and go to state 46
    COND_START      shift and go to state 22
    >               shift and go to state 41
    <               shift and go to state 40
    NUMBER          shift and go to state 9
    REDIR_WORD      shift and go to state 7
    GREATER_GREATER shift and go to state 28
    GREATER_BAR     shift and go to state 11
    LESS_GREATER    shift and go to state 33
    LESS_LESS       shift and go to state 3
    LESS_LESS_MINUS shift and go to state 18
    LESS_LESS_LESS  shift and go to state 14
    LESS_AND        shift and go to state 17
    GREATER_AND     shift and go to state 47
    AND_GREATER     shift and go to state 45
    AND_GREATER_GREATER shift and go to state 37

    command                        shift and go to state 23
    select_command                 shift and go to state 6
    for_command                    shift and go to state 43
    shell_command                  shift and go to state 25
    simple_command_element         shift and go to state 2
    coproc                         shift and go to state 10
    simple_command                 shift and go to state 27
    pipeline_command               shift and go to state 131
    cond_command                   shift and go to state 30
    timespec                       shift and go to state 24
    arith_for_command              shift and go to state 15
    arith_command                  shift and go to state 16
    list1                          shift and go to state 254
    group_command                  shift and go to state 20
    redirection                    shift and go to state 50
    subshell                       shift and go to state 21
    pipeline                       shift and go to state 52
    case_command                   shift and go to state 35
    if_command                     shift and go to state 38
    function_def                   shift and go to state 1

state 220

    (136) list1 -> list1 OR_OR newline_list . list1
    (145) newline_list -> newline_list . NEWLINE
    (135) list1 -> . list1 AND_AND newline_list list1
    (136) list1 -> . list1 OR_OR newline_list list1
    (137) list1 -> . list1 & newline_list list1
    (138) list1 -> . list1 ; newline_list list1
    (139) list1 -> . list1 NEWLINE newline_list list1
    (140) list1 -> . pipeline_command
    (154) pipeline_command -> . pipeline
    (155) pipeline_command -> . BANG pipeline_command
    (156) pipeline_command -> . timespec pipeline_command
    (157) pipeline_command -> . timespec list_terminator
    (158) pipeline_command -> . BANG list_terminator
    (159) pipeline -> . pipeline | newline_list pipeline
    (160) pipeline -> . pipeline BAR_AND newline_list pipeline
    (161) pipeline -> . command
    (162) timespec -> . TIME
    (163) timespec -> . TIME TIMEOPT
    (164) timespec -> . TIME TIMEOPT TIMEIGN
    (58) command -> . simple_command
    (59) command -> . shell_command
    (60) command -> . shell_command redirection_list
    (61) command -> . function_def
    (62) command -> . coproc
    (56) simple_command -> . simple_command_element
    (57) simple_command -> . simple_command simple_command_element
    (63) shell_command -> . for_command
    (64) shell_command -> . case_command
    (65) shell_command -> . WHILE compound_list DO compound_list DONE
    (66) shell_command -> . UNTIL compound_list DO compound_list DONE
    (67) shell_command -> . select_command
    (68) shell_command -> . if_command
    (69) shell_command -> . subshell
    (70) shell_command -> . group_command
    (71) shell_command -> . arith_command
    (72) shell_command -> . cond_command
    (73) shell_command -> . arith_for_command
    (95) function_def -> . WORD ( ) newline_list function_body
    (96) function_def -> . FUNCTION WORD ( ) newline_list function_body
    (97) function_def -> . FUNCTION WORD newline_list function_body
    (101) coproc -> . COPROC shell_command
    (102) coproc -> . COPROC shell_command redirection_list
    (103) coproc -> . COPROC WORD shell_command
    (104) coproc -> . COPROC WORD shell_command redirection_list
    (105) coproc -> . COPROC simple_command
    (51) simple_command_element -> . WORD
    (52) simple_command_element -> . ASSIGNMENT_WORD
    (53) simple_command_element -> . redirection
    (74) for_command -> . FOR WORD newline_list DO compound_list DONE
    (75) for_command -> . FOR WORD newline_list { compound_list }
    (76) for_command -> . FOR WORD ; newline_list DO compound_list DONE
    (77) for_command -> . FOR WORD ; newline_list { compound_list }
    (78) for_command -> . FOR WORD newline_list IN word_list list_terminator newline_list DO compound_list DONE
    (79) for_command -> . FOR WORD newline_list IN word_list list_terminator newline_list { compound_list }
    (80) for_command -> . FOR WORD newline_list IN list_terminator newline_list DO compound_list DONE
    (81) for_command -> . FOR WORD newline_list IN list_terminator newline_list { compound_list }
    (92) case_command -> . CASE WORD newline_list IN newline_list ESAC
    (93) case_command -> . CASE WORD newline_list IN case_clause_sequence newline_list ESAC
    (94) case_command -> . CASE WORD newline_list IN case_clause ESAC
    (86) select_command -> . SELECT WORD newline_list DO list DONE
    (87) select_command -> . SELECT WORD newline_list { list }
    (88) select_command -> . SELECT WORD ; newline_list DO list DONE
    (89) select_command -> . SELECT WORD ; newline_list { list }
    (90) select_command -> . SELECT WORD newline_list IN word_list list_terminator newline_list DO list DONE
    (91) select_command -> . SELECT WORD newline_list IN word_list list_terminator newline_list { list }
    (106) if_command -> . IF compound_list THEN compound_list FI
    (107) if_command -> . IF compound_list THEN compound_list ELSE compound_list FI
    (108) if_command -> . IF compound_list THEN compound_list elif_clause FI
    (100) subshell -> . ( compound_list )
    (109) group_command -> . { compound_list }
    (110) arith_command -> . ARITH_CMD
    (111) cond_command -> . COND_START COND_CMD COND_END
    (82) arith_for_command -> . FOR ARITH_FOR_EXPRS list_terminator newline_list DO compound_list DONE
    (83) arith_for_command -> . FOR ARITH_FOR_EXPRS list_terminator newline_list { compound_list }
    (84) arith_for_command -> . FOR ARITH_FOR_EXPRS DO compound_list DONE
    (85) arith_for_command -> . FOR ARITH_FOR_EXPRS { compound_list }
    (7) redirection -> . > WORD
    (8) redirection -> . < WORD
    (9) redirection -> . NUMBER > WORD
    (10) redirection -> . NUMBER < WORD
    (11) redirection -> . REDIR_WORD > WORD
    (12) redirection -> . REDIR_WORD < WORD
    (13) redirection -> . GREATER_GREATER WORD
    (14) redirection -> . NUMBER GREATER_GREATER WORD
    (15) redirection -> . REDIR_WORD GREATER_GREATER WORD
    (16) redirection -> . GREATER_BAR WORD
    (17) redirection -> . NUMBER GREATER_BAR WORD
    (18) redirection -> . REDIR_WORD GREATER_BAR WORD
    (19) redirection -> . LESS_GREATER WORD
    (20) redirection -> . NUMBER LESS_GREATER WORD
    (21) redirection -> . REDIR_WORD LESS_GREATER WORD
    (22) redirection -> . LESS_LESS WORD
    (23) redirection -> . NUMBER LESS_LESS WORD
    (24) redirection -> . REDIR_WORD LESS_LESS WORD
    (25) redirection -> . LESS_LESS_MINUS WORD
    (26) redirection -> . NUMBER LESS_LESS_MINUS WORD
    (27) redirection -> . REDIR_WORD LESS_LESS_MINUS WORD
    (28) redirection -> . LESS_LESS_LESS WORD
    (29) redirection -> . NUMBER LESS_LESS_LESS WORD
    (30) redirection -> . REDIR_WORD LESS_LESS_LESS WORD
    (31) redirection -> . LESS_AND NUMBER
    (32) redirection -> . NUMBER LESS_AND NUMBER
    (33) redirection -> . REDIR_WORD LESS_AND NUMBER
    (34) redirection -> . GREATER_AND NUMBER
    (35) redirection -> . NUMBER GREATER_AND NUMBER
    (36) redirection -> . REDIR_WORD GREATER_AND NUMBER
    (37) redirection -> . LESS_AND WORD
    (38) redirection -> . NUMBER LESS_AND WORD
    (39) redirection -> . REDIR_WORD LESS_AND WORD
    (40) redirection -> . GREATER_AND WORD
    (41) redirection -> . NUMBER GREATER_AND WORD
    (42) redirection -> . REDIR_WORD GREATER_AND WORD
    (43) redirection -> . GREATER_AND -
    (44) redirection -> . NUMBER GREATER_AND -
    (45) redirection -> . REDIR_WORD GREATER_AND -
    (46) redirection -> . LESS_AND -
    (47) redirection -> . NUMBER LESS_AND -
    (48) redirection -> . REDIR_WORD LESS_AND -
    (49) redirection -> . AND_GREATER WORD
    (50) redirection -> . AND_GREATER_GREATER WORD

    NEWLINE         shift and go to state 128
    BANG            shift and go to state 32
    TIME            shift and go to state 48
    WHILE           shift and go to state 34
    UNTIL           shift and go to state 4
    WORD            shift and go to state 53
    FUNCTION        shift and go to state 49
    COPROC          shift and go to state 44
    ASSIGNMENT_WORD shift and go to state 26
    FOR             shift and go to state 31
    CASE            shift and go to state 51
    SELECT          shift and go to state 39
    IF              shift and go to state 5
    (               shift and go to state 36
    {               shift and go to state 19
    ARITH_CMD       shift and go to state 46
    COND_START      shift and go to state 22
    >               shift and go to state 41
    <               shift and go to state 40
    NUMBER          shift and go to state 9
    REDIR_WORD      shift and go to state 7
    GREATER_GREATER shift and go to state 28
    GREATER_BAR     shift and go to state 11
    LESS_GREATER    shift and go to state 33
    LESS_LESS       shift and go to state 3
    LESS_LESS_MINUS shift and go to state 18
    LESS_LESS_LESS  shift and go to state 14
    LESS_AND        shift and go to state 17
    GREATER_AND     shift and go to state 47
    AND_GREATER     shift and go to state 45
    AND_GREATER_GREATER shift and go to state 37

    command                        shift and go to state 23
    select_command                 shift and go to state 6
    for_command                    shift and go to state 43
    shell_command                  shift and go to state 25
    simple_command_element         shift and go to state 2
    coproc                         shift and go to state 10
    simple_command                 shift and go to state 27
    pipeline_command               shift and go to state 131
    cond_command                   shift and go to state 30
    timespec                       shift and go to state 24
    arith_for_command              shift and go to state 15
    arith_command                  shift and go to state 16
    list1                          shift and go to state 255
    group_command                  shift and go to state 20
    redirection                    shift and go to state 50
    subshell                       shift and go to state 21
    pipeline                       shift and go to state 52
    case_command                   shift and go to state 35
    if_command                     shift and go to state 38
    function_def                   shift and go to state 1

state 221

    (138) list1 -> list1 ; newline_list . list1
    (134) list0 -> list1 ; newline_list .
    (145) newline_list -> newline_list . NEWLINE
    (135) list1 -> . list1 AND_AND newline_list list1
    (136) list1 -> . list1 OR_OR newline_list list1
    (137) list1 -> . list1 & newline_list list1
    (138) list1 -> . list1 ; newline_list list1
    (139) list1 -> . list1 NEWLINE newline_list list1
    (140) list1 -> . pipeline_command
    (154) pipeline_command -> . pipeline
    (155) pipeline_command -> . BANG pipeline_command
    (156) pipeline_command -> . timespec pipeline_command
    (157) pipeline_command -> . timespec list_terminator
    (158) pipeline_command -> . BANG list_terminator
    (159) pipeline -> . pipeline | newline_list pipeline
    (160) pipeline -> . pipeline BAR_AND newline_list pipeline
    (161) pipeline -> . command
    (162) timespec -> . TIME
    (163) timespec -> . TIME TIMEOPT
    (164) timespec -> . TIME TIMEOPT TIMEIGN
    (58) command -> . simple_command
    (59) command -> . shell_command
    (60) command -> . shell_command redirection_list
    (61) command -> . function_def
    (62) command -> . coproc
    (56) simple_command -> . simple_command_element
    (57) simple_command -> . simple_command simple_command_element
    (63) shell_command -> . for_command
    (64) shell_command -> . case_command
    (65) shell_command -> . WHILE compound_list DO compound_list DONE
    (66) shell_command -> . UNTIL compound_list DO compound_list DONE
    (67) shell_command -> . select_command
    (68) shell_command -> . if_command
    (69) shell_command -> . subshell
    (70) shell_command -> . group_command
    (71) shell_command -> . arith_command
    (72) shell_command -> . cond_command
    (73) shell_command -> . arith_for_command
    (95) function_def -> . WORD ( ) newline_list function_body
    (96) function_def -> . FUNCTION WORD ( ) newline_list function_body
    (97) function_def -> . FUNCTION WORD newline_list function_body
    (101) coproc -> . COPROC shell_command
    (102) coproc -> . COPROC shell_command redirection_list
    (103) coproc -> . COPROC WORD shell_command
    (104) coproc -> . COPROC WORD shell_command redirection_list
    (105) coproc -> . COPROC simple_command
    (51) simple_command_element -> . WORD
    (52) simple_command_element -> . ASSIGNMENT_WORD
    (53) simple_command_element -> . redirection
    (74) for_command -> . FOR WORD newline_list DO compound_list DONE
    (75) for_command -> . FOR WORD newline_list { compound_list }
    (76) for_command -> . FOR WORD ; newline_list DO compound_list DONE
    (77) for_command -> . FOR WORD ; newline_list { compound_list }
    (78) for_command -> . FOR WORD newline_list IN word_list list_terminator newline_list DO compound_list DONE
    (79) for_command -> . FOR WORD newline_list IN word_list list_terminator newline_list { compound_list }
    (80) for_command -> . FOR WORD newline_list IN list_terminator newline_list DO compound_list DONE
    (81) for_command -> . FOR WORD newline_list IN list_terminator newline_list { compound_list }
    (92) case_command -> . CASE WORD newline_list IN newline_list ESAC
    (93) case_command -> . CASE WORD newline_list IN case_clause_sequence newline_list ESAC
    (94) case_command -> . CASE WORD newline_list IN case_clause ESAC
    (86) select_command -> . SELECT WORD newline_list DO list DONE
    (87) select_command -> . SELECT WORD newline_list { list }
    (88) select_command -> . SELECT WORD ; newline_list DO list DONE
    (89) select_command -> . SELECT WORD ; newline_list { list }
    (90) select_command -> . SELECT WORD newline_list IN word_list list_terminator newline_list DO list DONE
    (91) select_command -> . SELECT WORD newline_list IN word_list list_terminator newline_list { list }
    (106) if_command -> . IF compound_list THEN compound_list FI
    (107) if_command -> . IF compound_list THEN compound_list ELSE compound_list FI
    (108) if_command -> . IF compound_list THEN compound_list elif_clause FI
    (100) subshell -> . ( compound_list )
    (109) group_command -> . { compound_list }
    (110) arith_command -> . ARITH_CMD
    (111) cond_command -> . COND_START COND_CMD COND_END
    (82) arith_for_command -> . FOR ARITH_FOR_EXPRS list_terminator newline_list DO compound_list DONE
    (83) arith_for_command -> . FOR ARITH_FOR_EXPRS list_terminator newline_list { compound_list }
    (84) arith_for_command -> . FOR ARITH_FOR_EXPRS DO compound_list DONE
    (85) arith_for_command -> . FOR ARITH_FOR_EXPRS { compound_list }
    (7) redirection -> . > WORD
    (8) redirection -> . < WORD
    (9) redirection -> . NUMBER > WORD
    (10) redirection -> . NUMBER < WORD
    (11) redirection -> . REDIR_WORD > WORD
    (12) redirection -> . REDIR_WORD < WORD
    (13) redirection -> . GREATER_GREATER WORD
    (14) redirection -> . NUMBER GREATER_GREATER WORD
    (15) redirection -> . REDIR_WORD GREATER_GREATER WORD
    (16) redirection -> . GREATER_BAR WORD
    (17) redirection -> . NUMBER GREATER_BAR WORD
    (18) redirection -> . REDIR_WORD GREATER_BAR WORD
    (19) redirection -> . LESS_GREATER WORD
    (20) redirection -> . NUMBER LESS_GREATER WORD
    (21) redirection -> . REDIR_WORD LESS_GREATER WORD
    (22) redirection -> . LESS_LESS WORD
    (23) redirection -> . NUMBER LESS_LESS WORD
    (24) redirection -> . REDIR_WORD LESS_LESS WORD
    (25) redirection -> . LESS_LESS_MINUS WORD
    (26) redirection -> . NUMBER LESS_LESS_MINUS WORD
    (27) redirection -> . REDIR_WORD LESS_LESS_MINUS WORD
    (28) redirection -> . LESS_LESS_LESS WORD
    (29) redirection -> . NUMBER LESS_LESS_LESS WORD
    (30) redirection -> . REDIR_WORD LESS_LESS_LESS WORD
    (31) redirection -> . LESS_AND NUMBER
    (32) redirection -> . NUMBER LESS_AND NUMBER
    (33) redirection -> . REDIR_WORD LESS_AND NUMBER
    (34) redirection -> . GREATER_AND NUMBER
    (35) redirection -> . NUMBER GREATER_AND NUMBER
    (36) redirection -> . REDIR_WORD GREATER_AND NUMBER
    (37) redirection -> . LESS_AND WORD
    (38) redirection -> . NUMBER LESS_AND WORD
    (39) redirection -> . REDIR_WORD LESS_AND WORD
    (40) redirection -> . GREATER_AND WORD
    (41) redirection -> . NUMBER GREATER_AND WORD
    (42) redirection -> . REDIR_WORD GREATER_AND WORD
    (43) redirection -> . GREATER_AND -
    (44) redirection -> . NUMBER GREATER_AND -
    (45) redirection -> . REDIR_WORD GREATER_AND -
    (46) redirection -> . LESS_AND -
    (47) redirection -> . NUMBER LESS_AND -
    (48) redirection -> . REDIR_WORD LESS_AND -
    (49) redirection -> . AND_GREATER WORD
    (50) redirection -> . AND_GREATER_GREATER WORD

    DO              reduce using rule 134 (list0 -> list1 ; newline_list .)
    THEN            reduce using rule 134 (list0 -> list1 ; newline_list .)
    }               reduce using rule 134 (list0 -> list1 ; newline_list .)
    )               reduce using rule 134 (list0 -> list1 ; newline_list .)
    DONE            reduce using rule 134 (list0 -> list1 ; newline_list .)
    FI              reduce using rule 134 (list0 -> list1 ; newline_list .)
    ELSE            reduce using rule 134 (list0 -> list1 ; newline_list .)
    ELIF            reduce using rule 134 (list0 -> list1 ; newline_list .)
    SEMI_SEMI       reduce using rule 134 (list0 -> list1 ; newline_list .)
    SEMI_AND        reduce using rule 134 (list0 -> list1 ; newline_list .)
    SEMI_SEMI_AND   reduce using rule 134 (list0 -> list1 ; newline_list .)
    ESAC            reduce using rule 134 (list0 -> list1 ; newline_list .)
    NEWLINE         shift and go to state 128
    BANG            shift and go to state 32
    TIME            shift and go to state 48
    WHILE           shift and go to state 34
    UNTIL           shift and go to state 4
    WORD            shift and go to state 53
    FUNCTION        shift and go to state 49
    COPROC          shift and go to state 44
    ASSIGNMENT_WORD shift and go to state 26
    FOR             shift and go to state 31
    CASE            shift and go to state 51
    SELECT          shift and go to state 39
    IF              shift and go to state 5
    (               shift and go to state 36
    {               shift and go to state 19
    ARITH_CMD       shift and go to state 46
    COND_START      shift and go to state 22
    >               shift and go to state 41
    <               shift and go to state 40
    NUMBER          shift and go to state 9
    REDIR_WORD      shift and go to state 7
    GREATER_GREATER shift and go to state 28
    GREATER_BAR     shift and go to state 11
    LESS_GREATER    shift and go to state 33
    LESS_LESS       shift and go to state 3
    LESS_LESS_MINUS shift and go to state 18
    LESS_LESS_LESS  shift and go to state 14
    LESS_AND        shift and go to state 17
    GREATER_AND     shift and go to state 47
    AND_GREATER     shift and go to state 45
    AND_GREATER_GREATER shift and go to state 37

    command                        shift and go to state 23
    select_command                 shift and go to state 6
    for_command                    shift and go to state 43
    shell_command                  shift and go to state 25
    simple_command_element         shift and go to state 2
    coproc                         shift and go to state 10
    simple_command                 shift and go to state 27
    pipeline_command               shift and go to state 131
    cond_command                   shift and go to state 30
    timespec                       shift and go to state 24
    arith_for_command              shift and go to state 15
    arith_command                  shift and go to state 16
    list1                          shift and go to state 256
    group_command                  shift and go to state 20
    redirection                    shift and go to state 50
    subshell                       shift and go to state 21
    pipeline                       shift and go to state 52
    case_command                   shift and go to state 35
    if_command                     shift and go to state 38
    function_def                   shift and go to state 1

state 222

    (139) list1 -> list1 NEWLINE newline_list . list1
    (132) list0 -> list1 NEWLINE newline_list .
    (145) newline_list -> newline_list . NEWLINE
    (135) list1 -> . list1 AND_AND newline_list list1
    (136) list1 -> . list1 OR_OR newline_list list1
    (137) list1 -> . list1 & newline_list list1
    (138) list1 -> . list1 ; newline_list list1
    (139) list1 -> . list1 NEWLINE newline_list list1
    (140) list1 -> . pipeline_command
    (154) pipeline_command -> . pipeline
    (155) pipeline_command -> . BANG pipeline_command
    (156) pipeline_command -> . timespec pipeline_command
    (157) pipeline_command -> . timespec list_terminator
    (158) pipeline_command -> . BANG list_terminator
    (159) pipeline -> . pipeline | newline_list pipeline
    (160) pipeline -> . pipeline BAR_AND newline_list pipeline
    (161) pipeline -> . command
    (162) timespec -> . TIME
    (163) timespec -> . TIME TIMEOPT
    (164) timespec -> . TIME TIMEOPT TIMEIGN
    (58) command -> . simple_command
    (59) command -> . shell_command
    (60) command -> . shell_command redirection_list
    (61) command -> . function_def
    (62) command -> . coproc
    (56) simple_command -> . simple_command_element
    (57) simple_command -> . simple_command simple_command_element
    (63) shell_command -> . for_command
    (64) shell_command -> . case_command
    (65) shell_command -> . WHILE compound_list DO compound_list DONE
    (66) shell_command -> . UNTIL compound_list DO compound_list DONE
    (67) shell_command -> . select_command
    (68) shell_command -> . if_command
    (69) shell_command -> . subshell
    (70) shell_command -> . group_command
    (71) shell_command -> . arith_command
    (72) shell_command -> . cond_command
    (73) shell_command -> . arith_for_command
    (95) function_def -> . WORD ( ) newline_list function_body
    (96) function_def -> . FUNCTION WORD ( ) newline_list function_body
    (97) function_def -> . FUNCTION WORD newline_list function_body
    (101) coproc -> . COPROC shell_command
    (102) coproc -> . COPROC shell_command redirection_list
    (103) coproc -> . COPROC WORD shell_command
    (104) coproc -> . COPROC WORD shell_command redirection_list
    (105) coproc -> . COPROC simple_command
    (51) simple_command_element -> . WORD
    (52) simple_command_element -> . ASSIGNMENT_WORD
    (53) simple_command_element -> . redirection
    (74) for_command -> . FOR WORD newline_list DO compound_list DONE
    (75) for_command -> . FOR WORD newline_list { compound_list }
    (76) for_command -> . FOR WORD ; newline_list DO compound_list DONE
    (77) for_command -> . FOR WORD ; newline_list { compound_list }
    (78) for_command -> . FOR WORD newline_list IN word_list list_terminator newline_list DO compound_list DONE
    (79) for_command -> . FOR WORD newline_list IN word_list list_terminator newline_list { compound_list }
    (80) for_command -> . FOR WORD newline_list IN list_terminator newline_list DO compound_list DONE
    (81) for_command -> . FOR WORD newline_list IN list_terminator newline_list { compound_list }
    (92) case_command -> . CASE WORD newline_list IN newline_list ESAC
    (93) case_command -> . CASE WORD newline_list IN case_clause_sequence newline_list ESAC
    (94) case_command -> . CASE WORD newline_list IN case_clause ESAC
    (86) select_command -> . SELECT WORD newline_list DO list DONE
    (87) select_command -> . SELECT WORD newline_list { list }
    (88) select_command -> . SELECT WORD ; newline_list DO list DONE
    (89) select_command -> . SELECT WORD ; newline_list { list }
    (90) select_command -> . SELECT WORD newline_list IN word_list list_terminator newline_list DO list DONE
    (91) select_command -> . SELECT WORD newline_list IN word_list list_terminator newline_list { list }
    (106) if_command -> . IF compound_list THEN compound_list FI
    (107) if_command -> . IF compound_list THEN compound_list ELSE compound_list FI
    (108) if_command -> . IF compound_list THEN compound_list elif_clause FI
    (100) subshell -> . ( compound_list )
    (109) group_command -> . { compound_list }
    (110) arith_command -> . ARITH_CMD
    (111) cond_command -> . COND_START COND_CMD COND_END
    (82) arith_for_command -> . FOR ARITH_FOR_EXPRS list_terminator newline_list DO compound_list DONE
    (83) arith_for_command -> . FOR ARITH_FOR_EXPRS list_terminator newline_list { compound_list }
    (84) arith_for_command -> . FOR ARITH_FOR_EXPRS DO compound_list DONE
    (85) arith_for_command -> . FOR ARITH_FOR_EXPRS { compound_list }
    (7) redirection -> . > WORD
    (8) redirection -> . < WORD
    (9) redirection -> . NUMBER > WORD
    (10) redirection -> . NUMBER < WORD
    (11) redirection -> . REDIR_WORD > WORD
    (12) redirection -> . REDIR_WORD < WORD
    (13) redirection -> . GREATER_GREATER WORD
    (14) redirection -> . NUMBER GREATER_GREATER WORD
    (15) redirection -> . REDIR_WORD GREATER_GREATER WORD
    (16) redirection -> . GREATER_BAR WORD
    (17) redirection -> . NUMBER GREATER_BAR WORD
    (18) redirection -> . REDIR_WORD GREATER_BAR WORD
    (19) redirection -> . LESS_GREATER WORD
    (20) redirection -> . NUMBER LESS_GREATER WORD
    (21) redirection -> . REDIR_WORD LESS_GREATER WORD
    (22) redirection -> . LESS_LESS WORD
    (23) redirection -> . NUMBER LESS_LESS WORD
    (24) redirection -> . REDIR_WORD LESS_LESS WORD
    (25) redirection -> . LESS_LESS_MINUS WORD
    (26) redirection -> . NUMBER LESS_LESS_MINUS WORD
    (27) redirection -> . REDIR_WORD LESS_LESS_MINUS WORD
    (28) redirection -> . LESS_LESS_LESS WORD
    (29) redirection -> . NUMBER LESS_LESS_LESS WORD
    (30) redirection -> . REDIR_WORD LESS_LESS_LESS WORD
    (31) redirection -> . LESS_AND NUMBER
    (32) redirection -> . NUMBER LESS_AND NUMBER
    (33) redirection -> . REDIR_WORD LESS_AND NUMBER
    (34) redirection -> . GREATER_AND NUMBER
    (35) redirection -> . NUMBER GREATER_AND NUMBER
    (36) redirection -> . REDIR_WORD GREATER_AND NUMBER
    (37) redirection -> . LESS_AND WORD
    (38) redirection -> . NUMBER LESS_AND WORD
    (39) redirection -> . REDIR_WORD LESS_AND WORD
    (40) redirection -> . GREATER_AND WORD
    (41) redirection -> . NUMBER GREATER_AND WORD
    (42) redirection -> . REDIR_WORD GREATER_AND WORD
    (43) redirection -> . GREATER_AND -
    (44) redirection -> . NUMBER GREATER_AND -
    (45) redirection -> . REDIR_WORD GREATER_AND -
    (46) redirection -> . LESS_AND -
    (47) redirection -> . NUMBER LESS_AND -
    (48) redirection -> . REDIR_WORD LESS_AND -
    (49) redirection -> . AND_GREATER WORD
    (50) redirection -> . AND_GREATER_GREATER WORD

    DO              reduce using rule 132 (list0 -> list1 NEWLINE newline_list .)
    THEN            reduce using rule 132 (list0 -> list1 NEWLINE newline_list .)
    }               reduce using rule 132 (list0 -> list1 NEWLINE newline_list .)
    )               reduce using rule 132 (list0 -> list1 NEWLINE newline_list .)
    DONE            reduce using rule 132 (list0 -> list1 NEWLINE newline_list .)
    FI              reduce using rule 132 (list0 -> list1 NEWLINE newline_list .)
    ELSE            reduce using rule 132 (list0 -> list1 NEWLINE newline_list .)
    ELIF            reduce using rule 132 (list0 -> list1 NEWLINE newline_list .)
    SEMI_SEMI       reduce using rule 132 (list0 -> list1 NEWLINE newline_list .)
    SEMI_AND        reduce using rule 132 (list0 -> list1 NEWLINE newline_list .)
    SEMI_SEMI_AND   reduce using rule 132 (list0 -> list1 NEWLINE newline_list .)
    ESAC            reduce using rule 132 (list0 -> list1 NEWLINE newline_list .)
    NEWLINE         shift and go to state 128
    BANG            shift and go to state 32
    TIME            shift and go to state 48
    WHILE           shift and go to state 34
    UNTIL           shift and go to state 4
    WORD            shift and go to state 53
    FUNCTION        shift and go to state 49
    COPROC          shift and go to state 44
    ASSIGNMENT_WORD shift and go to state 26
    FOR             shift and go to state 31
    CASE            shift and go to state 51
    SELECT          shift and go to state 39
    IF              shift and go to state 5
    (               shift and go to state 36
    {               shift and go to state 19
    ARITH_CMD       shift and go to state 46
    COND_START      shift and go to state 22
    >               shift and go to state 41
    <               shift and go to state 40
    NUMBER          shift and go to state 9
    REDIR_WORD      shift and go to state 7
    GREATER_GREATER shift and go to state 28
    GREATER_BAR     shift and go to state 11
    LESS_GREATER    shift and go to state 33
    LESS_LESS       shift and go to state 3
    LESS_LESS_MINUS shift and go to state 18
    LESS_LESS_LESS  shift and go to state 14
    LESS_AND        shift and go to state 17
    GREATER_AND     shift and go to state 47
    AND_GREATER     shift and go to state 45
    AND_GREATER_GREATER shift and go to state 37

    command                        shift and go to state 23
    select_command                 shift and go to state 6
    for_command                    shift and go to state 43
    shell_command                  shift and go to state 25
    simple_command_element         shift and go to state 2
    coproc                         shift and go to state 10
    simple_command                 shift and go to state 27
    pipeline_command               shift and go to state 131
    cond_command                   shift and go to state 30
    timespec                       shift and go to state 24
    arith_for_command              shift and go to state 15
    arith_command                  shift and go to state 16
    list1                          shift and go to state 257
    group_command                  shift and go to state 20
    redirection                    shift and go to state 50
    subshell                       shift and go to state 21
    pipeline                       shift and go to state 52
    case_command                   shift and go to state 35
    if_command                     shift and go to state 38
    function_def                   shift and go to state 1

state 223

    (66) shell_command -> UNTIL compound_list DO compound_list DONE .

    >               reduce using rule 66 (shell_command -> UNTIL compound_list DO compound_list DONE .)
    <               reduce using rule 66 (shell_command -> UNTIL compound_list DO compound_list DONE .)
    NUMBER          reduce using rule 66 (shell_command -> UNTIL compound_list DO compound_list DONE .)
    REDIR_WORD      reduce using rule 66 (shell_command -> UNTIL compound_list DO compound_list DONE .)
    GREATER_GREATER reduce using rule 66 (shell_command -> UNTIL compound_list DO compound_list DONE .)
    GREATER_BAR     reduce using rule 66 (shell_command -> UNTIL compound_list DO compound_list DONE .)
    LESS_GREATER    reduce using rule 66 (shell_command -> UNTIL compound_list DO compound_list DONE .)
    LESS_LESS       reduce using rule 66 (shell_command -> UNTIL compound_list DO compound_list DONE .)
    LESS_LESS_MINUS reduce using rule 66 (shell_command -> UNTIL compound_list DO compound_list DONE .)
    LESS_LESS_LESS  reduce using rule 66 (shell_command -> UNTIL compound_list DO compound_list DONE .)
    LESS_AND        reduce using rule 66 (shell_command -> UNTIL compound_list DO compound_list DONE .)
    GREATER_AND     reduce using rule 66 (shell_command -> UNTIL compound_list DO compound_list DONE .)
    AND_GREATER     reduce using rule 66 (shell_command -> UNTIL compound_list DO compound_list DONE .)
    AND_GREATER_GREATER reduce using rule 66 (shell_command -> UNTIL compound_list DO compound_list DONE .)
    |               reduce using rule 66 (shell_command -> UNTIL compound_list DO compound_list DONE .)
    BAR_AND         reduce using rule 66 (shell_command -> UNTIL compound_list DO compound_list DONE .)
    AND_AND         reduce using rule 66 (shell_command -> UNTIL compound_list DO compound_list DONE .)
    OR_OR           reduce using rule 66 (shell_command -> UNTIL compound_list DO compound_list DONE .)
    &               reduce using rule 66 (shell_command -> UNTIL compound_list DO compound_list DONE .)
    ;               reduce using rule 66 (shell_command -> UNTIL compound_list DO compound_list DONE .)
    NEWLINE         reduce using rule 66 (shell_command -> UNTIL compound_list DO compound_list DONE .)
    DO              reduce using rule 66 (shell_command -> UNTIL compound_list DO compound_list DONE .)
    THEN            reduce using rule 66 (shell_command -> UNTIL compound_list DO compound_list DONE .)
    }               reduce using rule 66 (shell_command -> UNTIL compound_list DO compound_list DONE .)
    )               reduce using rule 66 (shell_command -> UNTIL compound_list DO compound_list DONE .)
    DONE            reduce using rule 66 (shell_command -> UNTIL compound_list DO compound_list DONE .)
    FI              reduce using rule 66 (shell_command -> UNTIL compound_list DO compound_list DONE .)
    ELSE            reduce using rule 66 (shell_command -> UNTIL compound_list DO compound_list DONE .)
    ELIF            reduce using rule 66 (shell_command -> UNTIL compound_list DO compound_list DONE .)
    SEMI_SEMI       reduce using rule 66 (shell_command -> UNTIL compound_list DO compound_list DONE .)
    SEMI_AND        reduce using rule 66 (shell_command -> UNTIL compound_list DO compound_list DONE .)
    SEMI_SEMI_AND   reduce using rule 66 (shell_command -> UNTIL compound_list DO compound_list DONE .)
    ESAC            reduce using rule 66 (shell_command -> UNTIL compound_list DO compound_list DONE .)


state 224

    (106) if_command -> IF compound_list THEN compound_list FI .

    >               reduce using rule 106 (if_command -> IF compound_list THEN compound_list FI .)
    <               reduce using rule 106 (if_command -> IF compound_list THEN compound_list FI .)
    NUMBER          reduce using rule 106 (if_command -> IF compound_list THEN compound_list FI .)
    REDIR_WORD      reduce using rule 106 (if_command -> IF compound_list THEN compound_list FI .)
    GREATER_GREATER reduce using rule 106 (if_command -> IF compound_list THEN compound_list FI .)
    GREATER_BAR     reduce using rule 106 (if_command -> IF compound_list THEN compound_list FI .)
    LESS_GREATER    reduce using rule 106 (if_command -> IF compound_list THEN compound_list FI .)
    LESS_LESS       reduce using rule 106 (if_command -> IF compound_list THEN compound_list FI .)
    LESS_LESS_MINUS reduce using rule 106 (if_command -> IF compound_list THEN compound_list FI .)
    LESS_LESS_LESS  reduce using rule 106 (if_command -> IF compound_list THEN compound_list FI .)
    LESS_AND        reduce using rule 106 (if_command -> IF compound_list THEN compound_list FI .)
    GREATER_AND     reduce using rule 106 (if_command -> IF compound_list THEN compound_list FI .)
    AND_GREATER     reduce using rule 106 (if_command -> IF compound_list THEN compound_list FI .)
    AND_GREATER_GREATER reduce using rule 106 (if_command -> IF compound_list THEN compound_list FI .)
    |               reduce using rule 106 (if_command -> IF compound_list THEN compound_list FI .)
    BAR_AND         reduce using rule 106 (if_command -> IF compound_list THEN compound_list FI .)
    AND_AND         reduce using rule 106 (if_command -> IF compound_list THEN compound_list FI .)
    OR_OR           reduce using rule 106 (if_command -> IF compound_list THEN compound_list FI .)
    &               reduce using rule 106 (if_command -> IF compound_list THEN compound_list FI .)
    ;               reduce using rule 106 (if_command -> IF compound_list THEN compound_list FI .)
    NEWLINE         reduce using rule 106 (if_command -> IF compound_list THEN compound_list FI .)
    DO              reduce using rule 106 (if_command -> IF compound_list THEN compound_list FI .)
    THEN            reduce using rule 106 (if_command -> IF compound_list THEN compound_list FI .)
    }               reduce using rule 106 (if_command -> IF compound_list THEN compound_list FI .)
    )               reduce using rule 106 (if_command -> IF compound_list THEN compound_list FI .)
    DONE            reduce using rule 106 (if_command -> IF compound_list THEN compound_list FI .)
    FI              reduce using rule 106 (if_command -> IF compound_list THEN compound_list FI .)
    ELSE            reduce using rule 106 (if_command -> IF compound_list THEN compound_list FI .)
    ELIF            reduce using rule 106 (if_command -> IF compound_list THEN compound_list FI .)
    SEMI_SEMI       reduce using rule 106 (if_command -> IF compound_list THEN compound_list FI .)
    SEMI_AND        reduce using rule 106 (if_command -> IF compound_list THEN compound_list FI .)
    SEMI_SEMI_AND   reduce using rule 106 (if_command -> IF compound_list THEN compound_list FI .)
    ESAC            reduce using rule 106 (if_command -> IF compound_list THEN compound_list FI .)


state 225

    (112) elif_clause -> ELIF . compound_list THEN compound_list
    (113) elif_clause -> ELIF . compound_list THEN compound_list ELSE compound_list
    (114) elif_clause -> ELIF . compound_list THEN compound_list elif_clause
    (130) compound_list -> . list
    (131) compound_list -> . newline_list list1
    (129) list -> . newline_list list0
    (144) newline_list -> .
    (145) newline_list -> . newline_list NEWLINE

    NEWLINE         reduce using rule 144 (newline_list -> .)
    BANG            reduce using rule 144 (newline_list -> .)
    TIME            reduce using rule 144 (newline_list -> .)
    WHILE           reduce using rule 144 (newline_list -> .)
    UNTIL           reduce using rule 144 (newline_list -> .)
    WORD            reduce using rule 144 (newline_list -> .)
    FUNCTION        reduce using rule 144 (newline_list -> .)
    COPROC          reduce using rule 144 (newline_list -> .)
    ASSIGNMENT_WORD reduce using rule 144 (newline_list -> .)
    FOR             reduce using rule 144 (newline_list -> .)
    CASE            reduce using rule 144 (newline_list -> .)
    SELECT          reduce using rule 144 (newline_list -> .)
    IF              reduce using rule 144 (newline_list -> .)
    (               reduce using rule 144 (newline_list -> .)
    {               reduce using rule 144 (newline_list -> .)
    ARITH_CMD       reduce using rule 144 (newline_list -> .)
    COND_START      reduce using rule 144 (newline_list -> .)
    >               reduce using rule 144 (newline_list -> .)
    <               reduce using rule 144 (newline_list -> .)
    NUMBER          reduce using rule 144 (newline_list -> .)
    REDIR_WORD      reduce using rule 144 (newline_list -> .)
    GREATER_GREATER reduce using rule 144 (newline_list -> .)
    GREATER_BAR     reduce using rule 144 (newline_list -> .)
    LESS_GREATER    reduce using rule 144 (newline_list -> .)
    LESS_LESS       reduce using rule 144 (newline_list -> .)
    LESS_LESS_MINUS reduce using rule 144 (newline_list -> .)
    LESS_LESS_LESS  reduce using rule 144 (newline_list -> .)
    LESS_AND        reduce using rule 144 (newline_list -> .)
    GREATER_AND     reduce using rule 144 (newline_list -> .)
    AND_GREATER     reduce using rule 144 (newline_list -> .)
    AND_GREATER_GREATER reduce using rule 144 (newline_list -> .)

    newline_list                   shift and go to state 56
    compound_list                  shift and go to state 258
    list                           shift and go to state 58

state 226

    (107) if_command -> IF compound_list THEN compound_list ELSE . compound_list FI
    (130) compound_list -> . list
    (131) compound_list -> . newline_list list1
    (129) list -> . newline_list list0
    (144) newline_list -> .
    (145) newline_list -> . newline_list NEWLINE

    NEWLINE         reduce using rule 144 (newline_list -> .)
    BANG            reduce using rule 144 (newline_list -> .)
    TIME            reduce using rule 144 (newline_list -> .)
    WHILE           reduce using rule 144 (newline_list -> .)
    UNTIL           reduce using rule 144 (newline_list -> .)
    WORD            reduce using rule 144 (newline_list -> .)
    FUNCTION        reduce using rule 144 (newline_list -> .)
    COPROC          reduce using rule 144 (newline_list -> .)
    ASSIGNMENT_WORD reduce using rule 144 (newline_list -> .)
    FOR             reduce using rule 144 (newline_list -> .)
    CASE            reduce using rule 144 (newline_list -> .)
    SELECT          reduce using rule 144 (newline_list -> .)
    IF              reduce using rule 144 (newline_list -> .)
    (               reduce using rule 144 (newline_list -> .)
    {               reduce using rule 144 (newline_list -> .)
    ARITH_CMD       reduce using rule 144 (newline_list -> .)
    COND_START      reduce using rule 144 (newline_list -> .)
    >               reduce using rule 144 (newline_list -> .)
    <               reduce using rule 144 (newline_list -> .)
    NUMBER          reduce using rule 144 (newline_list -> .)
    REDIR_WORD      reduce using rule 144 (newline_list -> .)
    GREATER_GREATER reduce using rule 144 (newline_list -> .)
    GREATER_BAR     reduce using rule 144 (newline_list -> .)
    LESS_GREATER    reduce using rule 144 (newline_list -> .)
    LESS_LESS       reduce using rule 144 (newline_list -> .)
    LESS_LESS_MINUS reduce using rule 144 (newline_list -> .)
    LESS_LESS_LESS  reduce using rule 144 (newline_list -> .)
    LESS_AND        reduce using rule 144 (newline_list -> .)
    GREATER_AND     reduce using rule 144 (newline_list -> .)
    AND_GREATER     reduce using rule 144 (newline_list -> .)
    AND_GREATER_GREATER reduce using rule 144 (newline_list -> .)

    newline_list                   shift and go to state 56
    compound_list                  shift and go to state 259
    list                           shift and go to state 58

state 227

    (108) if_command -> IF compound_list THEN compound_list elif_clause . FI

    FI              shift and go to state 260


state 228

    (78) for_command -> FOR WORD newline_list IN word_list . list_terminator newline_list DO compound_list DONE
    (79) for_command -> FOR WORD newline_list IN word_list . list_terminator newline_list { compound_list }
    (6) word_list -> word_list . WORD
    (142) list_terminator -> . NEWLINE
    (143) list_terminator -> . ;

    WORD            shift and go to state 262
    NEWLINE         shift and go to state 94
    ;               shift and go to state 95

    list_terminator                shift and go to state 261

state 229

    (80) for_command -> FOR WORD newline_list IN list_terminator . newline_list DO compound_list DONE
    (81) for_command -> FOR WORD newline_list IN list_terminator . newline_list { compound_list }
    (144) newline_list -> .
    (145) newline_list -> . newline_list NEWLINE

    DO              reduce using rule 144 (newline_list -> .)
    {               reduce using rule 144 (newline_list -> .)
    NEWLINE         reduce using rule 144 (newline_list -> .)

    newline_list                   shift and go to state 263

state 230

    (5) word_list -> WORD .

    WORD            reduce using rule 5 (word_list -> WORD .)
    NEWLINE         reduce using rule 5 (word_list -> WORD .)
    ;               reduce using rule 5 (word_list -> WORD .)


state 231

    (75) for_command -> FOR WORD newline_list { compound_list . }

    }               shift and go to state 264


state 232

    (74) for_command -> FOR WORD newline_list DO compound_list . DONE

    DONE            shift and go to state 265


state 233

    (77) for_command -> FOR WORD ; newline_list { . compound_list }
    (130) compound_list -> . list
    (131) compound_list -> . newline_list list1
    (129) list -> . newline_list list0
    (144) newline_list -> .
    (145) newline_list -> . newline_list NEWLINE

    NEWLINE         reduce using rule 144 (newline_list -> .)
    BANG            reduce using rule 144 (newline_list -> .)
    TIME            reduce using rule 144 (newline_list -> .)
    WHILE           reduce using rule 144 (newline_list -> .)
    UNTIL           reduce using rule 144 (newline_list -> .)
    WORD            reduce using rule 144 (newline_list -> .)
    FUNCTION        reduce using rule 144 (newline_list -> .)
    COPROC          reduce using rule 144 (newline_list -> .)
    ASSIGNMENT_WORD reduce using rule 144 (newline_list -> .)
    FOR             reduce using rule 144 (newline_list -> .)
    CASE            reduce using rule 144 (newline_list -> .)
    SELECT          reduce using rule 144 (newline_list -> .)
    IF              reduce using rule 144 (newline_list -> .)
    (               reduce using rule 144 (newline_list -> .)
    {               reduce using rule 144 (newline_list -> .)
    ARITH_CMD       reduce using rule 144 (newline_list -> .)
    COND_START      reduce using rule 144 (newline_list -> .)
    >               reduce using rule 144 (newline_list -> .)
    <               reduce using rule 144 (newline_list -> .)
    NUMBER          reduce using rule 144 (newline_list -> .)
    REDIR_WORD      reduce using rule 144 (newline_list -> .)
    GREATER_GREATER reduce using rule 144 (newline_list -> .)
    GREATER_BAR     reduce using rule 144 (newline_list -> .)
    LESS_GREATER    reduce using rule 144 (newline_list -> .)
    LESS_LESS       reduce using rule 144 (newline_list -> .)
    LESS_LESS_MINUS reduce using rule 144 (newline_list -> .)
    LESS_LESS_LESS  reduce using rule 144 (newline_list -> .)
    LESS_AND        reduce using rule 144 (newline_list -> .)
    GREATER_AND     reduce using rule 144 (newline_list -> .)
    AND_GREATER     reduce using rule 144 (newline_list -> .)
    AND_GREATER_GREATER reduce using rule 144 (newline_list -> .)

    newline_list                   shift and go to state 56
    compound_list                  shift and go to state 266
    list                           shift and go to state 58

state 234

    (76) for_command -> FOR WORD ; newline_list DO . compound_list DONE
    (130) compound_list -> . list
    (131) compound_list -> . newline_list list1
    (129) list -> . newline_list list0
    (144) newline_list -> .
    (145) newline_list -> . newline_list NEWLINE

    NEWLINE         reduce using rule 144 (newline_list -> .)
    BANG            reduce using rule 144 (newline_list -> .)
    TIME            reduce using rule 144 (newline_list -> .)
    WHILE           reduce using rule 144 (newline_list -> .)
    UNTIL           reduce using rule 144 (newline_list -> .)
    WORD            reduce using rule 144 (newline_list -> .)
    FUNCTION        reduce using rule 144 (newline_list -> .)
    COPROC          reduce using rule 144 (newline_list -> .)
    ASSIGNMENT_WORD reduce using rule 144 (newline_list -> .)
    FOR             reduce using rule 144 (newline_list -> .)
    CASE            reduce using rule 144 (newline_list -> .)
    SELECT          reduce using rule 144 (newline_list -> .)
    IF              reduce using rule 144 (newline_list -> .)
    (               reduce using rule 144 (newline_list -> .)
    {               reduce using rule 144 (newline_list -> .)
    ARITH_CMD       reduce using rule 144 (newline_list -> .)
    COND_START      reduce using rule 144 (newline_list -> .)
    >               reduce using rule 144 (newline_list -> .)
    <               reduce using rule 144 (newline_list -> .)
    NUMBER          reduce using rule 144 (newline_list -> .)
    REDIR_WORD      reduce using rule 144 (newline_list -> .)
    GREATER_GREATER reduce using rule 144 (newline_list -> .)
    GREATER_BAR     reduce using rule 144 (newline_list -> .)
    LESS_GREATER    reduce using rule 144 (newline_list -> .)
    LESS_LESS       reduce using rule 144 (newline_list -> .)
    LESS_LESS_MINUS reduce using rule 144 (newline_list -> .)
    LESS_LESS_LESS  reduce using rule 144 (newline_list -> .)
    LESS_AND        reduce using rule 144 (newline_list -> .)
    GREATER_AND     reduce using rule 144 (newline_list -> .)
    AND_GREATER     reduce using rule 144 (newline_list -> .)
    AND_GREATER_GREATER reduce using rule 144 (newline_list -> .)

    newline_list                   shift and go to state 56
    compound_list                  shift and go to state 267
    list                           shift and go to state 58

state 235

    (83) arith_for_command -> FOR ARITH_FOR_EXPRS list_terminator newline_list { . compound_list }
    (130) compound_list -> . list
    (131) compound_list -> . newline_list list1
    (129) list -> . newline_list list0
    (144) newline_list -> .
    (145) newline_list -> . newline_list NEWLINE

    NEWLINE         reduce using rule 144 (newline_list -> .)
    BANG            reduce using rule 144 (newline_list -> .)
    TIME            reduce using rule 144 (newline_list -> .)
    WHILE           reduce using rule 144 (newline_list -> .)
    UNTIL           reduce using rule 144 (newline_list -> .)
    WORD            reduce using rule 144 (newline_list -> .)
    FUNCTION        reduce using rule 144 (newline_list -> .)
    COPROC          reduce using rule 144 (newline_list -> .)
    ASSIGNMENT_WORD reduce using rule 144 (newline_list -> .)
    FOR             reduce using rule 144 (newline_list -> .)
    CASE            reduce using rule 144 (newline_list -> .)
    SELECT          reduce using rule 144 (newline_list -> .)
    IF              reduce using rule 144 (newline_list -> .)
    (               reduce using rule 144 (newline_list -> .)
    {               reduce using rule 144 (newline_list -> .)
    ARITH_CMD       reduce using rule 144 (newline_list -> .)
    COND_START      reduce using rule 144 (newline_list -> .)
    >               reduce using rule 144 (newline_list -> .)
    <               reduce using rule 144 (newline_list -> .)
    NUMBER          reduce using rule 144 (newline_list -> .)
    REDIR_WORD      reduce using rule 144 (newline_list -> .)
    GREATER_GREATER reduce using rule 144 (newline_list -> .)
    GREATER_BAR     reduce using rule 144 (newline_list -> .)
    LESS_GREATER    reduce using rule 144 (newline_list -> .)
    LESS_LESS       reduce using rule 144 (newline_list -> .)
    LESS_LESS_MINUS reduce using rule 144 (newline_list -> .)
    LESS_LESS_LESS  reduce using rule 144 (newline_list -> .)
    LESS_AND        reduce using rule 144 (newline_list -> .)
    GREATER_AND     reduce using rule 144 (newline_list -> .)
    AND_GREATER     reduce using rule 144 (newline_list -> .)
    AND_GREATER_GREATER reduce using rule 144 (newline_list -> .)

    newline_list                   shift and go to state 56
    compound_list                  shift and go to state 268
    list                           shift and go to state 58

state 236

    (82) arith_for_command -> FOR ARITH_FOR_EXPRS list_terminator newline_list DO . compound_list DONE
    (130) compound_list -> . list
    (131) compound_list -> . newline_list list1
    (129) list -> . newline_list list0
    (144) newline_list -> .
    (145) newline_list -> . newline_list NEWLINE

    NEWLINE         reduce using rule 144 (newline_list -> .)
    BANG            reduce using rule 144 (newline_list -> .)
    TIME            reduce using rule 144 (newline_list -> .)
    WHILE           reduce using rule 144 (newline_list -> .)
    UNTIL           reduce using rule 144 (newline_list -> .)
    WORD            reduce using rule 144 (newline_list -> .)
    FUNCTION        reduce using rule 144 (newline_list -> .)
    COPROC          reduce using rule 144 (newline_list -> .)
    ASSIGNMENT_WORD reduce using rule 144 (newline_list -> .)
    FOR             reduce using rule 144 (newline_list -> .)
    CASE            reduce using rule 144 (newline_list -> .)
    SELECT          reduce using rule 144 (newline_list -> .)
    IF              reduce using rule 144 (newline_list -> .)
    (               reduce using rule 144 (newline_list -> .)
    {               reduce using rule 144 (newline_list -> .)
    ARITH_CMD       reduce using rule 144 (newline_list -> .)
    COND_START      reduce using rule 144 (newline_list -> .)
    >               reduce using rule 144 (newline_list -> .)
    <               reduce using rule 144 (newline_list -> .)
    NUMBER          reduce using rule 144 (newline_list -> .)
    REDIR_WORD      reduce using rule 144 (newline_list -> .)
    GREATER_GREATER reduce using rule 144 (newline_list -> .)
    GREATER_BAR     reduce using rule 144 (newline_list -> .)
    LESS_GREATER    reduce using rule 144 (newline_list -> .)
    LESS_LESS       reduce using rule 144 (newline_list -> .)
    LESS_LESS_MINUS reduce using rule 144 (newline_list -> .)
    LESS_LESS_LESS  reduce using rule 144 (newline_list -> .)
    LESS_AND        reduce using rule 144 (newline_list -> .)
    GREATER_AND     reduce using rule 144 (newline_list -> .)
    AND_GREATER     reduce using rule 144 (newline_list -> .)
    AND_GREATER_GREATER reduce using rule 144 (newline_list -> .)

    newline_list                   shift and go to state 56
    compound_list                  shift and go to state 269
    list                           shift and go to state 58

state 237

    (85) arith_for_command -> FOR ARITH_FOR_EXPRS { compound_list } .

    >               reduce using rule 85 (arith_for_command -> FOR ARITH_FOR_EXPRS { compound_list } .)
    <               reduce using rule 85 (arith_for_command -> FOR ARITH_FOR_EXPRS { compound_list } .)
    NUMBER          reduce using rule 85 (arith_for_command -> FOR ARITH_FOR_EXPRS { compound_list } .)
    REDIR_WORD      reduce using rule 85 (arith_for_command -> FOR ARITH_FOR_EXPRS { compound_list } .)
    GREATER_GREATER reduce using rule 85 (arith_for_command -> FOR ARITH_FOR_EXPRS { compound_list } .)
    GREATER_BAR     reduce using rule 85 (arith_for_command -> FOR ARITH_FOR_EXPRS { compound_list } .)
    LESS_GREATER    reduce using rule 85 (arith_for_command -> FOR ARITH_FOR_EXPRS { compound_list } .)
    LESS_LESS       reduce using rule 85 (arith_for_command -> FOR ARITH_FOR_EXPRS { compound_list } .)
    LESS_LESS_MINUS reduce using rule 85 (arith_for_command -> FOR ARITH_FOR_EXPRS { compound_list } .)
    LESS_LESS_LESS  reduce using rule 85 (arith_for_command -> FOR ARITH_FOR_EXPRS { compound_list } .)
    LESS_AND        reduce using rule 85 (arith_for_command -> FOR ARITH_FOR_EXPRS { compound_list } .)
    GREATER_AND     reduce using rule 85 (arith_for_command -> FOR ARITH_FOR_EXPRS { compound_list } .)
    AND_GREATER     reduce using rule 85 (arith_for_command -> FOR ARITH_FOR_EXPRS { compound_list } .)
    AND_GREATER_GREATER reduce using rule 85 (arith_for_command -> FOR ARITH_FOR_EXPRS { compound_list } .)
    |               reduce using rule 85 (arith_for_command -> FOR ARITH_FOR_EXPRS { compound_list } .)
    BAR_AND         reduce using rule 85 (arith_for_command -> FOR ARITH_FOR_EXPRS { compound_list } .)
    AND_AND         reduce using rule 85 (arith_for_command -> FOR ARITH_FOR_EXPRS { compound_list } .)
    OR_OR           reduce using rule 85 (arith_for_command -> FOR ARITH_FOR_EXPRS { compound_list } .)
    &               reduce using rule 85 (arith_for_command -> FOR ARITH_FOR_EXPRS { compound_list } .)
    ;               reduce using rule 85 (arith_for_command -> FOR ARITH_FOR_EXPRS { compound_list } .)
    NEWLINE         reduce using rule 85 (arith_for_command -> FOR ARITH_FOR_EXPRS { compound_list } .)
    DO              reduce using rule 85 (arith_for_command -> FOR ARITH_FOR_EXPRS { compound_list } .)
    THEN            reduce using rule 85 (arith_for_command -> FOR ARITH_FOR_EXPRS { compound_list } .)
    }               reduce using rule 85 (arith_for_command -> FOR ARITH_FOR_EXPRS { compound_list } .)
    )               reduce using rule 85 (arith_for_command -> FOR ARITH_FOR_EXPRS { compound_list } .)
    DONE            reduce using rule 85 (arith_for_command -> FOR ARITH_FOR_EXPRS { compound_list } .)
    FI              reduce using rule 85 (arith_for_command -> FOR ARITH_FOR_EXPRS { compound_list } .)
    ELSE            reduce using rule 85 (arith_for_command -> FOR ARITH_FOR_EXPRS { compound_list } .)
    ELIF            reduce using rule 85 (arith_for_command -> FOR ARITH_FOR_EXPRS { compound_list } .)
    SEMI_SEMI       reduce using rule 85 (arith_for_command -> FOR ARITH_FOR_EXPRS { compound_list } .)
    SEMI_AND        reduce using rule 85 (arith_for_command -> FOR ARITH_FOR_EXPRS { compound_list } .)
    SEMI_SEMI_AND   reduce using rule 85 (arith_for_command -> FOR ARITH_FOR_EXPRS { compound_list } .)
    ESAC            reduce using rule 85 (arith_for_command -> FOR ARITH_FOR_EXPRS { compound_list } .)


state 238

    (84) arith_for_command -> FOR ARITH_FOR_EXPRS DO compound_list DONE .

    >               reduce using rule 84 (arith_for_command -> FOR ARITH_FOR_EXPRS DO compound_list DONE .)
    <               reduce using rule 84 (arith_for_command -> FOR ARITH_FOR_EXPRS DO compound_list DONE .)
    NUMBER          reduce using rule 84 (arith_for_command -> FOR ARITH_FOR_EXPRS DO compound_list DONE .)
    REDIR_WORD      reduce using rule 84 (arith_for_command -> FOR ARITH_FOR_EXPRS DO compound_list DONE .)
    GREATER_GREATER reduce using rule 84 (arith_for_command -> FOR ARITH_FOR_EXPRS DO compound_list DONE .)
    GREATER_BAR     reduce using rule 84 (arith_for_command -> FOR ARITH_FOR_EXPRS DO compound_list DONE .)
    LESS_GREATER    reduce using rule 84 (arith_for_command -> FOR ARITH_FOR_EXPRS DO compound_list DONE .)
    LESS_LESS       reduce using rule 84 (arith_for_command -> FOR ARITH_FOR_EXPRS DO compound_list DONE .)
    LESS_LESS_MINUS reduce using rule 84 (arith_for_command -> FOR ARITH_FOR_EXPRS DO compound_list DONE .)
    LESS_LESS_LESS  reduce using rule 84 (arith_for_command -> FOR ARITH_FOR_EXPRS DO compound_list DONE .)
    LESS_AND        reduce using rule 84 (arith_for_command -> FOR ARITH_FOR_EXPRS DO compound_list DONE .)
    GREATER_AND     reduce using rule 84 (arith_for_command -> FOR ARITH_FOR_EXPRS DO compound_list DONE .)
    AND_GREATER     reduce using rule 84 (arith_for_command -> FOR ARITH_FOR_EXPRS DO compound_list DONE .)
    AND_GREATER_GREATER reduce using rule 84 (arith_for_command -> FOR ARITH_FOR_EXPRS DO compound_list DONE .)
    |               reduce using rule 84 (arith_for_command -> FOR ARITH_FOR_EXPRS DO compound_list DONE .)
    BAR_AND         reduce using rule 84 (arith_for_command -> FOR ARITH_FOR_EXPRS DO compound_list DONE .)
    AND_AND         reduce using rule 84 (arith_for_command -> FOR ARITH_FOR_EXPRS DO compound_list DONE .)
    OR_OR           reduce using rule 84 (arith_for_command -> FOR ARITH_FOR_EXPRS DO compound_list DONE .)
    &               reduce using rule 84 (arith_for_command -> FOR ARITH_FOR_EXPRS DO compound_list DONE .)
    ;               reduce using rule 84 (arith_for_command -> FOR ARITH_FOR_EXPRS DO compound_list DONE .)
    NEWLINE         reduce using rule 84 (arith_for_command -> FOR ARITH_FOR_EXPRS DO compound_list DONE .)
    DO              reduce using rule 84 (arith_for_command -> FOR ARITH_FOR_EXPRS DO compound_list DONE .)
    THEN            reduce using rule 84 (arith_for_command -> FOR ARITH_FOR_EXPRS DO compound_list DONE .)
    }               reduce using rule 84 (arith_for_command -> FOR ARITH_FOR_EXPRS DO compound_list DONE .)
    )               reduce using rule 84 (arith_for_command -> FOR ARITH_FOR_EXPRS DO compound_list DONE .)
    DONE            reduce using rule 84 (arith_for_command -> FOR ARITH_FOR_EXPRS DO compound_list DONE .)
    FI              reduce using rule 84 (arith_for_command -> FOR ARITH_FOR_EXPRS DO compound_list DONE .)
    ELSE            reduce using rule 84 (arith_for_command -> FOR ARITH_FOR_EXPRS DO compound_list DONE .)
    ELIF            reduce using rule 84 (arith_for_command -> FOR ARITH_FOR_EXPRS DO compound_list DONE .)
    SEMI_SEMI       reduce using rule 84 (arith_for_command -> FOR ARITH_FOR_EXPRS DO compound_list DONE .)
    SEMI_AND        reduce using rule 84 (arith_for_command -> FOR ARITH_FOR_EXPRS DO compound_list DONE .)
    SEMI_SEMI_AND   reduce using rule 84 (arith_for_command -> FOR ARITH_FOR_EXPRS DO compound_list DONE .)
    ESAC            reduce using rule 84 (arith_for_command -> FOR ARITH_FOR_EXPRS DO compound_list DONE .)


state 239

    (65) shell_command -> WHILE compound_list DO compound_list DONE .

    >               reduce using rule 65 (shell_command -> WHILE compound_list DO compound_list DONE .)
    <               reduce using rule 65 (shell_command -> WHILE compound_list DO compound_list DONE .)
    NUMBER          reduce using rule 65 (shell_command -> WHILE compound_list DO compound_list DONE .)
    REDIR_WORD      reduce using rule 65 (shell_command -> WHILE compound_list DO compound_list DONE .)
    GREATER_GREATER reduce using rule 65 (shell_command -> WHILE compound_list DO compound_list DONE .)
    GREATER_BAR     reduce using rule 65 (shell_command -> WHILE compound_list DO compound_list DONE .)
    LESS_GREATER    reduce using rule 65 (shell_command -> WHILE compound_list DO compound_list DONE .)
    LESS_LESS       reduce using rule 65 (shell_command -> WHILE compound_list DO compound_list DONE .)
    LESS_LESS_MINUS reduce using rule 65 (shell_command -> WHILE compound_list DO compound_list DONE .)
    LESS_LESS_LESS  reduce using rule 65 (shell_command -> WHILE compound_list DO compound_list DONE .)
    LESS_AND        reduce using rule 65 (shell_command -> WHILE compound_list DO compound_list DONE .)
    GREATER_AND     reduce using rule 65 (shell_command -> WHILE compound_list DO compound_list DONE .)
    AND_GREATER     reduce using rule 65 (shell_command -> WHILE compound_list DO compound_list DONE .)
    AND_GREATER_GREATER reduce using rule 65 (shell_command -> WHILE compound_list DO compound_list DONE .)
    |               reduce using rule 65 (shell_command -> WHILE compound_list DO compound_list DONE .)
    BAR_AND         reduce using rule 65 (shell_command -> WHILE compound_list DO compound_list DONE .)
    AND_AND         reduce using rule 65 (shell_command -> WHILE compound_list DO compound_list DONE .)
    OR_OR           reduce using rule 65 (shell_command -> WHILE compound_list DO compound_list DONE .)
    &               reduce using rule 65 (shell_command -> WHILE compound_list DO compound_list DONE .)
    ;               reduce using rule 65 (shell_command -> WHILE compound_list DO compound_list DONE .)
    NEWLINE         reduce using rule 65 (shell_command -> WHILE compound_list DO compound_list DONE .)
    DO              reduce using rule 65 (shell_command -> WHILE compound_list DO compound_list DONE .)
    THEN            reduce using rule 65 (shell_command -> WHILE compound_list DO compound_list DONE .)
    }               reduce using rule 65 (shell_command -> WHILE compound_list DO compound_list DONE .)
    )               reduce using rule 65 (shell_command -> WHILE compound_list DO compound_list DONE .)
    DONE            reduce using rule 65 (shell_command -> WHILE compound_list DO compound_list DONE .)
    FI              reduce using rule 65 (shell_command -> WHILE compound_list DO compound_list DONE .)
    ELSE            reduce using rule 65 (shell_command -> WHILE compound_list DO compound_list DONE .)
    ELIF            reduce using rule 65 (shell_command -> WHILE compound_list DO compound_list DONE .)
    SEMI_SEMI       reduce using rule 65 (shell_command -> WHILE compound_list DO compound_list DONE .)
    SEMI_AND        reduce using rule 65 (shell_command -> WHILE compound_list DO compound_list DONE .)
    SEMI_SEMI_AND   reduce using rule 65 (shell_command -> WHILE compound_list DO compound_list DONE .)
    ESAC            reduce using rule 65 (shell_command -> WHILE compound_list DO compound_list DONE .)


state 240

    (90) select_command -> SELECT WORD newline_list IN word_list . list_terminator newline_list DO list DONE
    (91) select_command -> SELECT WORD newline_list IN word_list . list_terminator newline_list { list }
    (6) word_list -> word_list . WORD
    (142) list_terminator -> . NEWLINE
    (143) list_terminator -> . ;

    WORD            shift and go to state 262
    NEWLINE         shift and go to state 94
    ;               shift and go to state 95

    list_terminator                shift and go to state 270

state 241

    (129) list -> newline_list . list0
    (145) newline_list -> newline_list . NEWLINE
    (132) list0 -> . list1 NEWLINE newline_list
    (133) list0 -> . list1 & newline_list
    (134) list0 -> . list1 ; newline_list
    (135) list1 -> . list1 AND_AND newline_list list1
    (136) list1 -> . list1 OR_OR newline_list list1
    (137) list1 -> . list1 & newline_list list1
    (138) list1 -> . list1 ; newline_list list1
    (139) list1 -> . list1 NEWLINE newline_list list1
    (140) list1 -> . pipeline_command
    (154) pipeline_command -> . pipeline
    (155) pipeline_command -> . BANG pipeline_command
    (156) pipeline_command -> . timespec pipeline_command
    (157) pipeline_command -> . timespec list_terminator
    (158) pipeline_command -> . BANG list_terminator
    (159) pipeline -> . pipeline | newline_list pipeline
    (160) pipeline -> . pipeline BAR_AND newline_list pipeline
    (161) pipeline -> . command
    (162) timespec -> . TIME
    (163) timespec -> . TIME TIMEOPT
    (164) timespec -> . TIME TIMEOPT TIMEIGN
    (58) command -> . simple_command
    (59) command -> . shell_command
    (60) command -> . shell_command redirection_list
    (61) command -> . function_def
    (62) command -> . coproc
    (56) simple_command -> . simple_command_element
    (57) simple_command -> . simple_command simple_command_element
    (63) shell_command -> . for_command
    (64) shell_command -> . case_command
    (65) shell_command -> . WHILE compound_list DO compound_list DONE
    (66) shell_command -> . UNTIL compound_list DO compound_list DONE
    (67) shell_command -> . select_command
    (68) shell_command -> . if_command
    (69) shell_command -> . subshell
    (70) shell_command -> . group_command
    (71) shell_command -> . arith_command
    (72) shell_command -> . cond_command
    (73) shell_command -> . arith_for_command
    (95) function_def -> . WORD ( ) newline_list function_body
    (96) function_def -> . FUNCTION WORD ( ) newline_list function_body
    (97) function_def -> . FUNCTION WORD newline_list function_body
    (101) coproc -> . COPROC shell_command
    (102) coproc -> . COPROC shell_command redirection_list
    (103) coproc -> . COPROC WORD shell_command
    (104) coproc -> . COPROC WORD shell_command redirection_list
    (105) coproc -> . COPROC simple_command
    (51) simple_command_element -> . WORD
    (52) simple_command_element -> . ASSIGNMENT_WORD
    (53) simple_command_element -> . redirection
    (74) for_command -> . FOR WORD newline_list DO compound_list DONE
    (75) for_command -> . FOR WORD newline_list { compound_list }
    (76) for_command -> . FOR WORD ; newline_list DO compound_list DONE
    (77) for_command -> . FOR WORD ; newline_list { compound_list }
    (78) for_command -> . FOR WORD newline_list IN word_list list_terminator newline_list DO compound_list DONE
    (79) for_command -> . FOR WORD newline_list IN word_list list_terminator newline_list { compound_list }
    (80) for_command -> . FOR WORD newline_list IN list_terminator newline_list DO compound_list DONE
    (81) for_command -> . FOR WORD newline_list IN list_terminator newline_list { compound_list }
    (92) case_command -> . CASE WORD newline_list IN newline_list ESAC
    (93) case_command -> . CASE WORD newline_list IN case_clause_sequence newline_list ESAC
    (94) case_command -> . CASE WORD newline_list IN case_clause ESAC
    (86) select_command -> . SELECT WORD newline_list DO list DONE
    (87) select_command -> . SELECT WORD newline_list { list }
    (88) select_command -> . SELECT WORD ; newline_list DO list DONE
    (89) select_command -> . SELECT WORD ; newline_list { list }
    (90) select_command -> . SELECT WORD newline_list IN word_list list_terminator newline_list DO list DONE
    (91) select_command -> . SELECT WORD newline_list IN word_list list_terminator newline_list { list }
    (106) if_command -> . IF compound_list THEN compound_list FI
    (107) if_command -> . IF compound_list THEN compound_list ELSE compound_list FI
    (108) if_command -> . IF compound_list THEN compound_list elif_clause FI
    (100) subshell -> . ( compound_list )
    (109) group_command -> . { compound_list }
    (110) arith_command -> . ARITH_CMD
    (111) cond_command -> . COND_START COND_CMD COND_END
    (82) arith_for_command -> . FOR ARITH_FOR_EXPRS list_terminator newline_list DO compound_list DONE
    (83) arith_for_command -> . FOR ARITH_FOR_EXPRS list_terminator newline_list { compound_list }
    (84) arith_for_command -> . FOR ARITH_FOR_EXPRS DO compound_list DONE
    (85) arith_for_command -> . FOR ARITH_FOR_EXPRS { compound_list }
    (7) redirection -> . > WORD
    (8) redirection -> . < WORD
    (9) redirection -> . NUMBER > WORD
    (10) redirection -> . NUMBER < WORD
    (11) redirection -> . REDIR_WORD > WORD
    (12) redirection -> . REDIR_WORD < WORD
    (13) redirection -> . GREATER_GREATER WORD
    (14) redirection -> . NUMBER GREATER_GREATER WORD
    (15) redirection -> . REDIR_WORD GREATER_GREATER WORD
    (16) redirection -> . GREATER_BAR WORD
    (17) redirection -> . NUMBER GREATER_BAR WORD
    (18) redirection -> . REDIR_WORD GREATER_BAR WORD
    (19) redirection -> . LESS_GREATER WORD
    (20) redirection -> . NUMBER LESS_GREATER WORD
    (21) redirection -> . REDIR_WORD LESS_GREATER WORD
    (22) redirection -> . LESS_LESS WORD
    (23) redirection -> . NUMBER LESS_LESS WORD
    (24) redirection -> . REDIR_WORD LESS_LESS WORD
    (25) redirection -> . LESS_LESS_MINUS WORD
    (26) redirection -> . NUMBER LESS_LESS_MINUS WORD
    (27) redirection -> . REDIR_WORD LESS_LESS_MINUS WORD
    (28) redirection -> . LESS_LESS_LESS WORD
    (29) redirection -> . NUMBER LESS_LESS_LESS WORD
    (30) redirection -> . REDIR_WORD LESS_LESS_LESS WORD
    (31) redirection -> . LESS_AND NUMBER
    (32) redirection -> . NUMBER LESS_AND NUMBER
    (33) redirection -> . REDIR_WORD LESS_AND NUMBER
    (34) redirection -> . GREATER_AND NUMBER
    (35) redirection -> . NUMBER GREATER_AND NUMBER
    (36) redirection -> . REDIR_WORD GREATER_AND NUMBER
    (37) redirection -> . LESS_AND WORD
    (38) redirection -> . NUMBER LESS_AND WORD
    (39) redirection -> . REDIR_WORD LESS_AND WORD
    (40) redirection -> . GREATER_AND WORD
    (41) redirection -> . NUMBER GREATER_AND WORD
    (42) redirection -> . REDIR_WORD GREATER_AND WORD
    (43) redirection -> . GREATER_AND -
    (44) redirection -> . NUMBER GREATER_AND -
    (45) redirection -> . REDIR_WORD GREATER_AND -
    (46) redirection -> . LESS_AND -
    (47) redirection -> . NUMBER LESS_AND -
    (48) redirection -> . REDIR_WORD LESS_AND -
    (49) redirection -> . AND_GREATER WORD
    (50) redirection -> . AND_GREATER_GREATER WORD

    NEWLINE         shift and go to state 128
    BANG            shift and go to state 32
    TIME            shift and go to state 48
    WHILE           shift and go to state 34
    UNTIL           shift and go to state 4
    WORD            shift and go to state 53
    FUNCTION        shift and go to state 49
    COPROC          shift and go to state 44
    ASSIGNMENT_WORD shift and go to state 26
    FOR             shift and go to state 31
    CASE            shift and go to state 51
    SELECT          shift and go to state 39
    IF              shift and go to state 5
    (               shift and go to state 36
    {               shift and go to state 19
    ARITH_CMD       shift and go to state 46
    COND_START      shift and go to state 22
    >               shift and go to state 41
    <               shift and go to state 40
    NUMBER          shift and go to state 9
    REDIR_WORD      shift and go to state 7
    GREATER_GREATER shift and go to state 28
    GREATER_BAR     shift and go to state 11
    LESS_GREATER    shift and go to state 33
    LESS_LESS       shift and go to state 3
    LESS_LESS_MINUS shift and go to state 18
    LESS_LESS_LESS  shift and go to state 14
    LESS_AND        shift and go to state 17
    GREATER_AND     shift and go to state 47
    AND_GREATER     shift and go to state 45
    AND_GREATER_GREATER shift and go to state 37

    command                        shift and go to state 23
    select_command                 shift and go to state 6
    for_command                    shift and go to state 43
    shell_command                  shift and go to state 25
    simple_command_element         shift and go to state 2
    coproc                         shift and go to state 10
    simple_command                 shift and go to state 27
    pipeline_command               shift and go to state 131
    cond_command                   shift and go to state 30
    timespec                       shift and go to state 24
    arith_for_command              shift and go to state 15
    arith_command                  shift and go to state 16
    list1                          shift and go to state 271
    list0                          shift and go to state 130
    group_command                  shift and go to state 20
    redirection                    shift and go to state 50
    subshell                       shift and go to state 21
    pipeline                       shift and go to state 52
    case_command                   shift and go to state 35
    if_command                     shift and go to state 38
    function_def                   shift and go to state 1

state 242

    (87) select_command -> SELECT WORD newline_list { list . }

    }               shift and go to state 272


state 243

    (86) select_command -> SELECT WORD newline_list DO list . DONE

    DONE            shift and go to state 273


state 244

    (89) select_command -> SELECT WORD ; newline_list { . list }
    (129) list -> . newline_list list0
    (144) newline_list -> .
    (145) newline_list -> . newline_list NEWLINE

    NEWLINE         reduce using rule 144 (newline_list -> .)
    BANG            reduce using rule 144 (newline_list -> .)
    TIME            reduce using rule 144 (newline_list -> .)
    WHILE           reduce using rule 144 (newline_list -> .)
    UNTIL           reduce using rule 144 (newline_list -> .)
    WORD            reduce using rule 144 (newline_list -> .)
    FUNCTION        reduce using rule 144 (newline_list -> .)
    COPROC          reduce using rule 144 (newline_list -> .)
    ASSIGNMENT_WORD reduce using rule 144 (newline_list -> .)
    FOR             reduce using rule 144 (newline_list -> .)
    CASE            reduce using rule 144 (newline_list -> .)
    SELECT          reduce using rule 144 (newline_list -> .)
    IF              reduce using rule 144 (newline_list -> .)
    (               reduce using rule 144 (newline_list -> .)
    {               reduce using rule 144 (newline_list -> .)
    ARITH_CMD       reduce using rule 144 (newline_list -> .)
    COND_START      reduce using rule 144 (newline_list -> .)
    >               reduce using rule 144 (newline_list -> .)
    <               reduce using rule 144 (newline_list -> .)
    NUMBER          reduce using rule 144 (newline_list -> .)
    REDIR_WORD      reduce using rule 144 (newline_list -> .)
    GREATER_GREATER reduce using rule 144 (newline_list -> .)
    GREATER_BAR     reduce using rule 144 (newline_list -> .)
    LESS_GREATER    reduce using rule 144 (newline_list -> .)
    LESS_LESS       reduce using rule 144 (newline_list -> .)
    LESS_LESS_MINUS reduce using rule 144 (newline_list -> .)
    LESS_LESS_LESS  reduce using rule 144 (newline_list -> .)
    LESS_AND        reduce using rule 144 (newline_list -> .)
    GREATER_AND     reduce using rule 144 (newline_list -> .)
    AND_GREATER     reduce using rule 144 (newline_list -> .)
    AND_GREATER_GREATER reduce using rule 144 (newline_list -> .)

    newline_list                   shift and go to state 241
    list                           shift and go to state 274

state 245

    (88) select_command -> SELECT WORD ; newline_list DO . list DONE
    (129) list -> . newline_list list0
    (144) newline_list -> .
    (145) newline_list -> . newline_list NEWLINE

    NEWLINE         reduce using rule 144 (newline_list -> .)
    BANG            reduce using rule 144 (newline_list -> .)
    TIME            reduce using rule 144 (newline_list -> .)
    WHILE           reduce using rule 144 (newline_list -> .)
    UNTIL           reduce using rule 144 (newline_list -> .)
    WORD            reduce using rule 144 (newline_list -> .)
    FUNCTION        reduce using rule 144 (newline_list -> .)
    COPROC          reduce using rule 144 (newline_list -> .)
    ASSIGNMENT_WORD reduce using rule 144 (newline_list -> .)
    FOR             reduce using rule 144 (newline_list -> .)
    CASE            reduce using rule 144 (newline_list -> .)
    SELECT          reduce using rule 144 (newline_list -> .)
    IF              reduce using rule 144 (newline_list -> .)
    (               reduce using rule 144 (newline_list -> .)
    {               reduce using rule 144 (newline_list -> .)
    ARITH_CMD       reduce using rule 144 (newline_list -> .)
    COND_START      reduce using rule 144 (newline_list -> .)
    >               reduce using rule 144 (newline_list -> .)
    <               reduce using rule 144 (newline_list -> .)
    NUMBER          reduce using rule 144 (newline_list -> .)
    REDIR_WORD      reduce using rule 144 (newline_list -> .)
    GREATER_GREATER reduce using rule 144 (newline_list -> .)
    GREATER_BAR     reduce using rule 144 (newline_list -> .)
    LESS_GREATER    reduce using rule 144 (newline_list -> .)
    LESS_LESS       reduce using rule 144 (newline_list -> .)
    LESS_LESS_MINUS reduce using rule 144 (newline_list -> .)
    LESS_LESS_LESS  reduce using rule 144 (newline_list -> .)
    LESS_AND        reduce using rule 144 (newline_list -> .)
    GREATER_AND     reduce using rule 144 (newline_list -> .)
    AND_GREATER     reduce using rule 144 (newline_list -> .)
    AND_GREATER_GREATER reduce using rule 144 (newline_list -> .)

    newline_list                   shift and go to state 241
    list                           shift and go to state 275

state 246

    (99) function_body -> shell_command redirection_list .
    (55) redirection_list -> redirection_list . redirection
    (7) redirection -> . > WORD
    (8) redirection -> . < WORD
    (9) redirection -> . NUMBER > WORD
    (10) redirection -> . NUMBER < WORD
    (11) redirection -> . REDIR_WORD > WORD
    (12) redirection -> . REDIR_WORD < WORD
    (13) redirection -> . GREATER_GREATER WORD
    (14) redirection -> . NUMBER GREATER_GREATER WORD
    (15) redirection -> . REDIR_WORD GREATER_GREATER WORD
    (16) redirection -> . GREATER_BAR WORD
    (17) redirection -> . NUMBER GREATER_BAR WORD
    (18) redirection -> . REDIR_WORD GREATER_BAR WORD
    (19) redirection -> . LESS_GREATER WORD
    (20) redirection -> . NUMBER LESS_GREATER WORD
    (21) redirection -> . REDIR_WORD LESS_GREATER WORD
    (22) redirection -> . LESS_LESS WORD
    (23) redirection -> . NUMBER LESS_LESS WORD
    (24) redirection -> . REDIR_WORD LESS_LESS WORD
    (25) redirection -> . LESS_LESS_MINUS WORD
    (26) redirection -> . NUMBER LESS_LESS_MINUS WORD
    (27) redirection -> . REDIR_WORD LESS_LESS_MINUS WORD
    (28) redirection -> . LESS_LESS_LESS WORD
    (29) redirection -> . NUMBER LESS_LESS_LESS WORD
    (30) redirection -> . REDIR_WORD LESS_LESS_LESS WORD
    (31) redirection -> . LESS_AND NUMBER
    (32) redirection -> . NUMBER LESS_AND NUMBER
    (33) redirection -> . REDIR_WORD LESS_AND NUMBER
    (34) redirection -> . GREATER_AND NUMBER
    (35) redirection -> . NUMBER GREATER_AND NUMBER
    (36) redirection -> . REDIR_WORD GREATER_AND NUMBER
    (37) redirection -> . LESS_AND WORD
    (38) redirection -> . NUMBER LESS_AND WORD
    (39) redirection -> . REDIR_WORD LESS_AND WORD
    (40) redirection -> . GREATER_AND WORD
    (41) redirection -> . NUMBER GREATER_AND WORD
    (42) redirection -> . REDIR_WORD GREATER_AND WORD
    (43) redirection -> . GREATER_AND -
    (44) redirection -> . NUMBER GREATER_AND -
    (45) redirection -> . REDIR_WORD GREATER_AND -
    (46) redirection -> . LESS_AND -
    (47) redirection -> . NUMBER LESS_AND -
    (48) redirection -> . REDIR_WORD LESS_AND -
    (49) redirection -> . AND_GREATER WORD
    (50) redirection -> . AND_GREATER_GREATER WORD

    |               reduce using rule 99 (function_body -> shell_command redirection_list .)
    BAR_AND         reduce using rule 99 (function_body -> shell_command redirection_list .)
    &               reduce using rule 99 (function_body -> shell_command redirection_list .)
    ;               reduce using rule 99 (function_body -> shell_command redirection_list .)
    AND_AND         reduce using rule 99 (function_body -> shell_command redirection_list .)
    OR_OR           reduce using rule 99 (function_body -> shell_command redirection_list .)
    NEWLINE         reduce using rule 99 (function_body -> shell_command redirection_list .)
    DO              reduce using rule 99 (function_body -> shell_command redirection_list .)
    THEN            reduce using rule 99 (function_body -> shell_command redirection_list .)
    }               reduce using rule 99 (function_body -> shell_command redirection_list .)
    )               reduce using rule 99 (function_body -> shell_command redirection_list .)
    DONE            reduce using rule 99 (function_body -> shell_command redirection_list .)
    FI              reduce using rule 99 (function_body -> shell_command redirection_list .)
    ELSE            reduce using rule 99 (function_body -> shell_command redirection_list .)
    ELIF            reduce using rule 99 (function_body -> shell_command redirection_list .)
    SEMI_SEMI       reduce using rule 99 (function_body -> shell_command redirection_list .)
    SEMI_AND        reduce using rule 99 (function_body -> shell_command redirection_list .)
    SEMI_SEMI_AND   reduce using rule 99 (function_body -> shell_command redirection_list .)
    ESAC            reduce using rule 99 (function_body -> shell_command redirection_list .)
    >               shift and go to state 41
    <               shift and go to state 40
    NUMBER          shift and go to state 9
    REDIR_WORD      shift and go to state 7
    GREATER_GREATER shift and go to state 28
    GREATER_BAR     shift and go to state 11
    LESS_GREATER    shift and go to state 33
    LESS_LESS       shift and go to state 3
    LESS_LESS_MINUS shift and go to state 18
    LESS_LESS_LESS  shift and go to state 14
    LESS_AND        shift and go to state 17
    GREATER_AND     shift and go to state 47
    AND_GREATER     shift and go to state 45
    AND_GREATER_GREATER shift and go to state 37

    redirection                    shift and go to state 168

state 247

    (96) function_def -> FUNCTION WORD ( ) newline_list . function_body
    (145) newline_list -> newline_list . NEWLINE
    (98) function_body -> . shell_command
    (99) function_body -> . shell_command redirection_list
    (63) shell_command -> . for_command
    (64) shell_command -> . case_command
    (65) shell_command -> . WHILE compound_list DO compound_list DONE
    (66) shell_command -> . UNTIL compound_list DO compound_list DONE
    (67) shell_command -> . select_command
    (68) shell_command -> . if_command
    (69) shell_command -> . subshell
    (70) shell_command -> . group_command
    (71) shell_command -> . arith_command
    (72) shell_command -> . cond_command
    (73) shell_command -> . arith_for_command
    (74) for_command -> . FOR WORD newline_list DO compound_list DONE
    (75) for_command -> . FOR WORD newline_list { compound_list }
    (76) for_command -> . FOR WORD ; newline_list DO compound_list DONE
    (77) for_command -> . FOR WORD ; newline_list { compound_list }
    (78) for_command -> . FOR WORD newline_list IN word_list list_terminator newline_list DO compound_list DONE
    (79) for_command -> . FOR WORD newline_list IN word_list list_terminator newline_list { compound_list }
    (80) for_command -> . FOR WORD newline_list IN list_terminator newline_list DO compound_list DONE
    (81) for_command -> . FOR WORD newline_list IN list_terminator newline_list { compound_list }
    (92) case_command -> . CASE WORD newline_list IN newline_list ESAC
    (93) case_command -> . CASE WORD newline_list IN case_clause_sequence newline_list ESAC
    (94) case_command -> . CASE WORD newline_list IN case_clause ESAC
    (86) select_command -> . SELECT WORD newline_list DO list DONE
    (87) select_command -> . SELECT WORD newline_list { list }
    (88) select_command -> . SELECT WORD ; newline_list DO list DONE
    (89) select_command -> . SELECT WORD ; newline_list { list }
    (90) select_command -> . SELECT WORD newline_list IN word_list list_terminator newline_list DO list DONE
    (91) select_command -> . SELECT WORD newline_list IN word_list list_terminator newline_list { list }
    (106) if_command -> . IF compound_list THEN compound_list FI
    (107) if_command -> . IF compound_list THEN compound_list ELSE compound_list FI
    (108) if_command -> . IF compound_list THEN compound_list elif_clause FI
    (100) subshell -> . ( compound_list )
    (109) group_command -> . { compound_list }
    (110) arith_command -> . ARITH_CMD
    (111) cond_command -> . COND_START COND_CMD COND_END
    (82) arith_for_command -> . FOR ARITH_FOR_EXPRS list_terminator newline_list DO compound_list DONE
    (83) arith_for_command -> . FOR ARITH_FOR_EXPRS list_terminator newline_list { compound_list }
    (84) arith_for_command -> . FOR ARITH_FOR_EXPRS DO compound_list DONE
    (85) arith_for_command -> . FOR ARITH_FOR_EXPRS { compound_list }

    NEWLINE         shift and go to state 128
    WHILE           shift and go to state 34
    UNTIL           shift and go to state 4
    FOR             shift and go to state 31
    CASE            shift and go to state 51
    SELECT          shift and go to state 39
    IF              shift and go to state 5
    (               shift and go to state 36
    {               shift and go to state 19
    ARITH_CMD       shift and go to state 46
    COND_START      shift and go to state 22

    select_command                 shift and go to state 6
    for_command                    shift and go to state 43
    shell_command                  shift and go to state 211
    arith_command                  shift and go to state 16
    group_command                  shift and go to state 20
    arith_for_command              shift and go to state 15
    cond_command                   shift and go to state 30
    subshell                       shift and go to state 21
    function_body                  shift and go to state 276
    case_command                   shift and go to state 35
    if_command                     shift and go to state 38

state 248

    (92) case_command -> CASE WORD newline_list IN newline_list . ESAC
    (145) newline_list -> newline_list . NEWLINE
    (117) pattern_list -> newline_list . pattern ) compound_list
    (118) pattern_list -> newline_list . pattern ) newline_list
    (119) pattern_list -> newline_list . ( pattern ) compound_list
    (120) pattern_list -> newline_list . ( pattern ) newline_list
    (127) pattern -> . WORD
    (128) pattern -> . pattern | WORD

    ESAC            shift and go to state 280
    NEWLINE         shift and go to state 128
    (               shift and go to state 279
    WORD            shift and go to state 277

    pattern                        shift and go to state 278

state 249

    (121) case_clause_sequence -> pattern_list . SEMI_SEMI
    (123) case_clause_sequence -> pattern_list . SEMI_AND
    (125) case_clause_sequence -> pattern_list . SEMI_SEMI_AND
    (115) case_clause -> pattern_list .

    SEMI_SEMI       shift and go to state 283
    SEMI_AND        shift and go to state 282
    SEMI_SEMI_AND   shift and go to state 281
    ESAC            reduce using rule 115 (case_clause -> pattern_list .)


state 250

    (93) case_command -> CASE WORD newline_list IN case_clause_sequence . newline_list ESAC
    (122) case_clause_sequence -> case_clause_sequence . pattern_list SEMI_SEMI
    (124) case_clause_sequence -> case_clause_sequence . pattern_list SEMI_AND
    (126) case_clause_sequence -> case_clause_sequence . pattern_list SEMI_SEMI_AND
    (116) case_clause -> case_clause_sequence . pattern_list
    (144) newline_list -> .
    (145) newline_list -> . newline_list NEWLINE
    (117) pattern_list -> . newline_list pattern ) compound_list
    (118) pattern_list -> . newline_list pattern ) newline_list
    (119) pattern_list -> . newline_list ( pattern ) compound_list
    (120) pattern_list -> . newline_list ( pattern ) newline_list

    ESAC            reduce using rule 144 (newline_list -> .)
    NEWLINE         reduce using rule 144 (newline_list -> .)
    (               reduce using rule 144 (newline_list -> .)
    WORD            reduce using rule 144 (newline_list -> .)

    newline_list                   shift and go to state 284
    pattern_list                   shift and go to state 285

state 251

    (94) case_command -> CASE WORD newline_list IN case_clause . ESAC

    ESAC            shift and go to state 286


state 252

    (95) function_def -> WORD ( ) newline_list function_body .

    |               reduce using rule 95 (function_def -> WORD ( ) newline_list function_body .)
    BAR_AND         reduce using rule 95 (function_def -> WORD ( ) newline_list function_body .)
    &               reduce using rule 95 (function_def -> WORD ( ) newline_list function_body .)
    ;               reduce using rule 95 (function_def -> WORD ( ) newline_list function_body .)
    AND_AND         reduce using rule 95 (function_def -> WORD ( ) newline_list function_body .)
    OR_OR           reduce using rule 95 (function_def -> WORD ( ) newline_list function_body .)
    NEWLINE         reduce using rule 95 (function_def -> WORD ( ) newline_list function_body .)
    DO              reduce using rule 95 (function_def -> WORD ( ) newline_list function_body .)
    THEN            reduce using rule 95 (function_def -> WORD ( ) newline_list function_body .)
    }               reduce using rule 95 (function_def -> WORD ( ) newline_list function_body .)
    )               reduce using rule 95 (function_def -> WORD ( ) newline_list function_body .)
    DONE            reduce using rule 95 (function_def -> WORD ( ) newline_list function_body .)
    FI              reduce using rule 95 (function_def -> WORD ( ) newline_list function_body .)
    ELSE            reduce using rule 95 (function_def -> WORD ( ) newline_list function_body .)
    ELIF            reduce using rule 95 (function_def -> WORD ( ) newline_list function_body .)
    SEMI_SEMI       reduce using rule 95 (function_def -> WORD ( ) newline_list function_body .)
    SEMI_AND        reduce using rule 95 (function_def -> WORD ( ) newline_list function_body .)
    SEMI_SEMI_AND   reduce using rule 95 (function_def -> WORD ( ) newline_list function_body .)
    ESAC            reduce using rule 95 (function_def -> WORD ( ) newline_list function_body .)


state 253

    (135) list1 -> list1 AND_AND newline_list list1 .
    (135) list1 -> list1 . AND_AND newline_list list1
    (136) list1 -> list1 . OR_OR newline_list list1
    (137) list1 -> list1 . & newline_list list1
    (138) list1 -> list1 . ; newline_list list1
    (139) list1 -> list1 . NEWLINE newline_list list1

  ! shift/reduce conflict for AND_AND resolved as shift
  ! shift/reduce conflict for OR_OR resolved as shift
  ! shift/reduce conflict for & resolved as shift
  ! shift/reduce conflict for ; resolved as shift
  ! shift/reduce conflict for NEWLINE resolved as shift
    DO              reduce using rule 135 (list1 -> list1 AND_AND newline_list list1 .)
    THEN            reduce using rule 135 (list1 -> list1 AND_AND newline_list list1 .)
    }               reduce using rule 135 (list1 -> list1 AND_AND newline_list list1 .)
    )               reduce using rule 135 (list1 -> list1 AND_AND newline_list list1 .)
    DONE            reduce using rule 135 (list1 -> list1 AND_AND newline_list list1 .)
    FI              reduce using rule 135 (list1 -> list1 AND_AND newline_list list1 .)
    ELSE            reduce using rule 135 (list1 -> list1 AND_AND newline_list list1 .)
    ELIF            reduce using rule 135 (list1 -> list1 AND_AND newline_list list1 .)
    SEMI_SEMI       reduce using rule 135 (list1 -> list1 AND_AND newline_list list1 .)
    SEMI_AND        reduce using rule 135 (list1 -> list1 AND_AND newline_list list1 .)
    SEMI_SEMI_AND   reduce using rule 135 (list1 -> list1 AND_AND newline_list list1 .)
    ESAC            reduce using rule 135 (list1 -> list1 AND_AND newline_list list1 .)
    AND_AND         shift and go to state 187
    OR_OR           shift and go to state 189
    &               shift and go to state 287
    ;               shift and go to state 288
    NEWLINE         shift and go to state 289

  ! AND_AND         [ reduce using rule 135 (list1 -> list1 AND_AND newline_list list1 .) ]
  ! OR_OR           [ reduce using rule 135 (list1 -> list1 AND_AND newline_list list1 .) ]
  ! &               [ reduce using rule 135 (list1 -> list1 AND_AND newline_list list1 .) ]
  ! ;               [ reduce using rule 135 (list1 -> list1 AND_AND newline_list list1 .) ]
  ! NEWLINE         [ reduce using rule 135 (list1 -> list1 AND_AND newline_list list1 .) ]


state 254

    (137) list1 -> list1 & newline_list list1 .
    (135) list1 -> list1 . AND_AND newline_list list1
    (136) list1 -> list1 . OR_OR newline_list list1
    (137) list1 -> list1 . & newline_list list1
    (138) list1 -> list1 . ; newline_list list1
    (139) list1 -> list1 . NEWLINE newline_list list1

  ! shift/reduce conflict for AND_AND resolved as shift
  ! shift/reduce conflict for OR_OR resolved as shift
  ! shift/reduce conflict for & resolved as shift
  ! shift/reduce conflict for ; resolved as shift
  ! shift/reduce conflict for NEWLINE resolved as shift
    DO              reduce using rule 137 (list1 -> list1 & newline_list list1 .)
    THEN            reduce using rule 137 (list1 -> list1 & newline_list list1 .)
    }               reduce using rule 137 (list1 -> list1 & newline_list list1 .)
    )               reduce using rule 137 (list1 -> list1 & newline_list list1 .)
    DONE            reduce using rule 137 (list1 -> list1 & newline_list list1 .)
    FI              reduce using rule 137 (list1 -> list1 & newline_list list1 .)
    ELSE            reduce using rule 137 (list1 -> list1 & newline_list list1 .)
    ELIF            reduce using rule 137 (list1 -> list1 & newline_list list1 .)
    SEMI_SEMI       reduce using rule 137 (list1 -> list1 & newline_list list1 .)
    SEMI_AND        reduce using rule 137 (list1 -> list1 & newline_list list1 .)
    SEMI_SEMI_AND   reduce using rule 137 (list1 -> list1 & newline_list list1 .)
    ESAC            reduce using rule 137 (list1 -> list1 & newline_list list1 .)
    AND_AND         shift and go to state 187
    OR_OR           shift and go to state 189
    &               shift and go to state 287
    ;               shift and go to state 288
    NEWLINE         shift and go to state 289

  ! AND_AND         [ reduce using rule 137 (list1 -> list1 & newline_list list1 .) ]
  ! OR_OR           [ reduce using rule 137 (list1 -> list1 & newline_list list1 .) ]
  ! &               [ reduce using rule 137 (list1 -> list1 & newline_list list1 .) ]
  ! ;               [ reduce using rule 137 (list1 -> list1 & newline_list list1 .) ]
  ! NEWLINE         [ reduce using rule 137 (list1 -> list1 & newline_list list1 .) ]


state 255

    (136) list1 -> list1 OR_OR newline_list list1 .
    (135) list1 -> list1 . AND_AND newline_list list1
    (136) list1 -> list1 . OR_OR newline_list list1
    (137) list1 -> list1 . & newline_list list1
    (138) list1 -> list1 . ; newline_list list1
    (139) list1 -> list1 . NEWLINE newline_list list1

  ! shift/reduce conflict for AND_AND resolved as shift
  ! shift/reduce conflict for OR_OR resolved as shift
  ! shift/reduce conflict for & resolved as shift
  ! shift/reduce conflict for ; resolved as shift
  ! shift/reduce conflict for NEWLINE resolved as shift
    DO              reduce using rule 136 (list1 -> list1 OR_OR newline_list list1 .)
    THEN            reduce using rule 136 (list1 -> list1 OR_OR newline_list list1 .)
    }               reduce using rule 136 (list1 -> list1 OR_OR newline_list list1 .)
    )               reduce using rule 136 (list1 -> list1 OR_OR newline_list list1 .)
    DONE            reduce using rule 136 (list1 -> list1 OR_OR newline_list list1 .)
    FI              reduce using rule 136 (list1 -> list1 OR_OR newline_list list1 .)
    ELSE            reduce using rule 136 (list1 -> list1 OR_OR newline_list list1 .)
    ELIF            reduce using rule 136 (list1 -> list1 OR_OR newline_list list1 .)
    SEMI_SEMI       reduce using rule 136 (list1 -> list1 OR_OR newline_list list1 .)
    SEMI_AND        reduce using rule 136 (list1 -> list1 OR_OR newline_list list1 .)
    SEMI_SEMI_AND   reduce using rule 136 (list1 -> list1 OR_OR newline_list list1 .)
    ESAC            reduce using rule 136 (list1 -> list1 OR_OR newline_list list1 .)
    AND_AND         shift and go to state 187
    OR_OR           shift and go to state 189
    &               shift and go to state 287
    ;               shift and go to state 288
    NEWLINE         shift and go to state 289

  ! AND_AND         [ reduce using rule 136 (list1 -> list1 OR_OR newline_list list1 .) ]
  ! OR_OR           [ reduce using rule 136 (list1 -> list1 OR_OR newline_list list1 .) ]
  ! &               [ reduce using rule 136 (list1 -> list1 OR_OR newline_list list1 .) ]
  ! ;               [ reduce using rule 136 (list1 -> list1 OR_OR newline_list list1 .) ]
  ! NEWLINE         [ reduce using rule 136 (list1 -> list1 OR_OR newline_list list1 .) ]


state 256

    (138) list1 -> list1 ; newline_list list1 .
    (135) list1 -> list1 . AND_AND newline_list list1
    (136) list1 -> list1 . OR_OR newline_list list1
    (137) list1 -> list1 . & newline_list list1
    (138) list1 -> list1 . ; newline_list list1
    (139) list1 -> list1 . NEWLINE newline_list list1

  ! shift/reduce conflict for AND_AND resolved as shift
  ! shift/reduce conflict for OR_OR resolved as shift
  ! shift/reduce conflict for & resolved as shift
  ! shift/reduce conflict for ; resolved as shift
  ! shift/reduce conflict for NEWLINE resolved as shift
    DO              reduce using rule 138 (list1 -> list1 ; newline_list list1 .)
    THEN            reduce using rule 138 (list1 -> list1 ; newline_list list1 .)
    }               reduce using rule 138 (list1 -> list1 ; newline_list list1 .)
    )               reduce using rule 138 (list1 -> list1 ; newline_list list1 .)
    DONE            reduce using rule 138 (list1 -> list1 ; newline_list list1 .)
    FI              reduce using rule 138 (list1 -> list1 ; newline_list list1 .)
    ELSE            reduce using rule 138 (list1 -> list1 ; newline_list list1 .)
    ELIF            reduce using rule 138 (list1 -> list1 ; newline_list list1 .)
    SEMI_SEMI       reduce using rule 138 (list1 -> list1 ; newline_list list1 .)
    SEMI_AND        reduce using rule 138 (list1 -> list1 ; newline_list list1 .)
    SEMI_SEMI_AND   reduce using rule 138 (list1 -> list1 ; newline_list list1 .)
    ESAC            reduce using rule 138 (list1 -> list1 ; newline_list list1 .)
    AND_AND         shift and go to state 187
    OR_OR           shift and go to state 189
    &               shift and go to state 287
    ;               shift and go to state 288
    NEWLINE         shift and go to state 289

  ! AND_AND         [ reduce using rule 138 (list1 -> list1 ; newline_list list1 .) ]
  ! OR_OR           [ reduce using rule 138 (list1 -> list1 ; newline_list list1 .) ]
  ! &               [ reduce using rule 138 (list1 -> list1 ; newline_list list1 .) ]
  ! ;               [ reduce using rule 138 (list1 -> list1 ; newline_list list1 .) ]
  ! NEWLINE         [ reduce using rule 138 (list1 -> list1 ; newline_list list1 .) ]


state 257

    (139) list1 -> list1 NEWLINE newline_list list1 .
    (135) list1 -> list1 . AND_AND newline_list list1
    (136) list1 -> list1 . OR_OR newline_list list1
    (137) list1 -> list1 . & newline_list list1
    (138) list1 -> list1 . ; newline_list list1
    (139) list1 -> list1 . NEWLINE newline_list list1

  ! shift/reduce conflict for AND_AND resolved as shift
  ! shift/reduce conflict for OR_OR resolved as shift
  ! shift/reduce conflict for & resolved as shift
  ! shift/reduce conflict for ; resolved as shift
  ! shift/reduce conflict for NEWLINE resolved as shift
    DO              reduce using rule 139 (list1 -> list1 NEWLINE newline_list list1 .)
    THEN            reduce using rule 139 (list1 -> list1 NEWLINE newline_list list1 .)
    }               reduce using rule 139 (list1 -> list1 NEWLINE newline_list list1 .)
    )               reduce using rule 139 (list1 -> list1 NEWLINE newline_list list1 .)
    DONE            reduce using rule 139 (list1 -> list1 NEWLINE newline_list list1 .)
    FI              reduce using rule 139 (list1 -> list1 NEWLINE newline_list list1 .)
    ELSE            reduce using rule 139 (list1 -> list1 NEWLINE newline_list list1 .)
    ELIF            reduce using rule 139 (list1 -> list1 NEWLINE newline_list list1 .)
    SEMI_SEMI       reduce using rule 139 (list1 -> list1 NEWLINE newline_list list1 .)
    SEMI_AND        reduce using rule 139 (list1 -> list1 NEWLINE newline_list list1 .)
    SEMI_SEMI_AND   reduce using rule 139 (list1 -> list1 NEWLINE newline_list list1 .)
    ESAC            reduce using rule 139 (list1 -> list1 NEWLINE newline_list list1 .)
    AND_AND         shift and go to state 187
    OR_OR           shift and go to state 189
    &               shift and go to state 287
    ;               shift and go to state 288
    NEWLINE         shift and go to state 289

  ! AND_AND         [ reduce using rule 139 (list1 -> list1 NEWLINE newline_list list1 .) ]
  ! OR_OR           [ reduce using rule 139 (list1 -> list1 NEWLINE newline_list list1 .) ]
  ! &               [ reduce using rule 139 (list1 -> list1 NEWLINE newline_list list1 .) ]
  ! ;               [ reduce using rule 139 (list1 -> list1 NEWLINE newline_list list1 .) ]
  ! NEWLINE         [ reduce using rule 139 (list1 -> list1 NEWLINE newline_list list1 .) ]


state 258

    (112) elif_clause -> ELIF compound_list . THEN compound_list
    (113) elif_clause -> ELIF compound_list . THEN compound_list ELSE compound_list
    (114) elif_clause -> ELIF compound_list . THEN compound_list elif_clause

    THEN            shift and go to state 290


state 259

    (107) if_command -> IF compound_list THEN compound_list ELSE compound_list . FI

    FI              shift and go to state 291


state 260

    (108) if_command -> IF compound_list THEN compound_list elif_clause FI .

    >               reduce using rule 108 (if_command -> IF compound_list THEN compound_list elif_clause FI .)
    <               reduce using rule 108 (if_command -> IF compound_list THEN compound_list elif_clause FI .)
    NUMBER          reduce using rule 108 (if_command -> IF compound_list THEN compound_list elif_clause FI .)
    REDIR_WORD      reduce using rule 108 (if_command -> IF compound_list THEN compound_list elif_clause FI .)
    GREATER_GREATER reduce using rule 108 (if_command -> IF compound_list THEN compound_list elif_clause FI .)
    GREATER_BAR     reduce using rule 108 (if_command -> IF compound_list THEN compound_list elif_clause FI .)
    LESS_GREATER    reduce using rule 108 (if_command -> IF compound_list THEN compound_list elif_clause FI .)
    LESS_LESS       reduce using rule 108 (if_command -> IF compound_list THEN compound_list elif_clause FI .)
    LESS_LESS_MINUS reduce using rule 108 (if_command -> IF compound_list THEN compound_list elif_clause FI .)
    LESS_LESS_LESS  reduce using rule 108 (if_command -> IF compound_list THEN compound_list elif_clause FI .)
    LESS_AND        reduce using rule 108 (if_command -> IF compound_list THEN compound_list elif_clause FI .)
    GREATER_AND     reduce using rule 108 (if_command -> IF compound_list THEN compound_list elif_clause FI .)
    AND_GREATER     reduce using rule 108 (if_command -> IF compound_list THEN compound_list elif_clause FI .)
    AND_GREATER_GREATER reduce using rule 108 (if_command -> IF compound_list THEN compound_list elif_clause FI .)
    |               reduce using rule 108 (if_command -> IF compound_list THEN compound_list elif_clause FI .)
    BAR_AND         reduce using rule 108 (if_command -> IF compound_list THEN compound_list elif_clause FI .)
    AND_AND         reduce using rule 108 (if_command -> IF compound_list THEN compound_list elif_clause FI .)
    OR_OR           reduce using rule 108 (if_command -> IF compound_list THEN compound_list elif_clause FI .)
    &               reduce using rule 108 (if_command -> IF compound_list THEN compound_list elif_clause FI .)
    ;               reduce using rule 108 (if_command -> IF compound_list THEN compound_list elif_clause FI .)
    NEWLINE         reduce using rule 108 (if_command -> IF compound_list THEN compound_list elif_clause FI .)
    DO              reduce using rule 108 (if_command -> IF compound_list THEN compound_list elif_clause FI .)
    THEN            reduce using rule 108 (if_command -> IF compound_list THEN compound_list elif_clause FI .)
    }               reduce using rule 108 (if_command -> IF compound_list THEN compound_list elif_clause FI .)
    )               reduce using rule 108 (if_command -> IF compound_list THEN compound_list elif_clause FI .)
    DONE            reduce using rule 108 (if_command -> IF compound_list THEN compound_list elif_clause FI .)
    FI              reduce using rule 108 (if_command -> IF compound_list THEN compound_list elif_clause FI .)
    ELSE            reduce using rule 108 (if_command -> IF compound_list THEN compound_list elif_clause FI .)
    ELIF            reduce using rule 108 (if_command -> IF compound_list THEN compound_list elif_clause FI .)
    SEMI_SEMI       reduce using rule 108 (if_command -> IF compound_list THEN compound_list elif_clause FI .)
    SEMI_AND        reduce using rule 108 (if_command -> IF compound_list THEN compound_list elif_clause FI .)
    SEMI_SEMI_AND   reduce using rule 108 (if_command -> IF compound_list THEN compound_list elif_clause FI .)
    ESAC            reduce using rule 108 (if_command -> IF compound_list THEN compound_list elif_clause FI .)


state 261

    (78) for_command -> FOR WORD newline_list IN word_list list_terminator . newline_list DO compound_list DONE
    (79) for_command -> FOR WORD newline_list IN word_list list_terminator . newline_list { compound_list }
    (144) newline_list -> .
    (145) newline_list -> . newline_list NEWLINE

    DO              reduce using rule 144 (newline_list -> .)
    {               reduce using rule 144 (newline_list -> .)
    NEWLINE         reduce using rule 144 (newline_list -> .)

    newline_list                   shift and go to state 292

state 262

    (6) word_list -> word_list WORD .

    WORD            reduce using rule 6 (word_list -> word_list WORD .)
    NEWLINE         reduce using rule 6 (word_list -> word_list WORD .)
    ;               reduce using rule 6 (word_list -> word_list WORD .)


state 263

    (80) for_command -> FOR WORD newline_list IN list_terminator newline_list . DO compound_list DONE
    (81) for_command -> FOR WORD newline_list IN list_terminator newline_list . { compound_list }
    (145) newline_list -> newline_list . NEWLINE

    DO              shift and go to state 294
    {               shift and go to state 293
    NEWLINE         shift and go to state 128


state 264

    (75) for_command -> FOR WORD newline_list { compound_list } .

    >               reduce using rule 75 (for_command -> FOR WORD newline_list { compound_list } .)
    <               reduce using rule 75 (for_command -> FOR WORD newline_list { compound_list } .)
    NUMBER          reduce using rule 75 (for_command -> FOR WORD newline_list { compound_list } .)
    REDIR_WORD      reduce using rule 75 (for_command -> FOR WORD newline_list { compound_list } .)
    GREATER_GREATER reduce using rule 75 (for_command -> FOR WORD newline_list { compound_list } .)
    GREATER_BAR     reduce using rule 75 (for_command -> FOR WORD newline_list { compound_list } .)
    LESS_GREATER    reduce using rule 75 (for_command -> FOR WORD newline_list { compound_list } .)
    LESS_LESS       reduce using rule 75 (for_command -> FOR WORD newline_list { compound_list } .)
    LESS_LESS_MINUS reduce using rule 75 (for_command -> FOR WORD newline_list { compound_list } .)
    LESS_LESS_LESS  reduce using rule 75 (for_command -> FOR WORD newline_list { compound_list } .)
    LESS_AND        reduce using rule 75 (for_command -> FOR WORD newline_list { compound_list } .)
    GREATER_AND     reduce using rule 75 (for_command -> FOR WORD newline_list { compound_list } .)
    AND_GREATER     reduce using rule 75 (for_command -> FOR WORD newline_list { compound_list } .)
    AND_GREATER_GREATER reduce using rule 75 (for_command -> FOR WORD newline_list { compound_list } .)
    |               reduce using rule 75 (for_command -> FOR WORD newline_list { compound_list } .)
    BAR_AND         reduce using rule 75 (for_command -> FOR WORD newline_list { compound_list } .)
    AND_AND         reduce using rule 75 (for_command -> FOR WORD newline_list { compound_list } .)
    OR_OR           reduce using rule 75 (for_command -> FOR WORD newline_list { compound_list } .)
    &               reduce using rule 75 (for_command -> FOR WORD newline_list { compound_list } .)
    ;               reduce using rule 75 (for_command -> FOR WORD newline_list { compound_list } .)
    NEWLINE         reduce using rule 75 (for_command -> FOR WORD newline_list { compound_list } .)
    DO              reduce using rule 75 (for_command -> FOR WORD newline_list { compound_list } .)
    THEN            reduce using rule 75 (for_command -> FOR WORD newline_list { compound_list } .)
    }               reduce using rule 75 (for_command -> FOR WORD newline_list { compound_list } .)
    )               reduce using rule 75 (for_command -> FOR WORD newline_list { compound_list } .)
    DONE            reduce using rule 75 (for_command -> FOR WORD newline_list { compound_list } .)
    FI              reduce using rule 75 (for_command -> FOR WORD newline_list { compound_list } .)
    ELSE            reduce using rule 75 (for_command -> FOR WORD newline_list { compound_list } .)
    ELIF            reduce using rule 75 (for_command -> FOR WORD newline_list { compound_list } .)
    SEMI_SEMI       reduce using rule 75 (for_command -> FOR WORD newline_list { compound_list } .)
    SEMI_AND        reduce using rule 75 (for_command -> FOR WORD newline_list { compound_list } .)
    SEMI_SEMI_AND   reduce using rule 75 (for_command -> FOR WORD newline_list { compound_list } .)
    ESAC            reduce using rule 75 (for_command -> FOR WORD newline_list { compound_list } .)


state 265

    (74) for_command -> FOR WORD newline_list DO compound_list DONE .

    >               reduce using rule 74 (for_command -> FOR WORD newline_list DO compound_list DONE .)
    <               reduce using rule 74 (for_command -> FOR WORD newline_list DO compound_list DONE .)
    NUMBER          reduce using rule 74 (for_command -> FOR WORD newline_list DO compound_list DONE .)
    REDIR_WORD      reduce using rule 74 (for_command -> FOR WORD newline_list DO compound_list DONE .)
    GREATER_GREATER reduce using rule 74 (for_command -> FOR WORD newline_list DO compound_list DONE .)
    GREATER_BAR     reduce using rule 74 (for_command -> FOR WORD newline_list DO compound_list DONE .)
    LESS_GREATER    reduce using rule 74 (for_command -> FOR WORD newline_list DO compound_list DONE .)
    LESS_LESS       reduce using rule 74 (for_command -> FOR WORD newline_list DO compound_list DONE .)
    LESS_LESS_MINUS reduce using rule 74 (for_command -> FOR WORD newline_list DO compound_list DONE .)
    LESS_LESS_LESS  reduce using rule 74 (for_command -> FOR WORD newline_list DO compound_list DONE .)
    LESS_AND        reduce using rule 74 (for_command -> FOR WORD newline_list DO compound_list DONE .)
    GREATER_AND     reduce using rule 74 (for_command -> FOR WORD newline_list DO compound_list DONE .)
    AND_GREATER     reduce using rule 74 (for_command -> FOR WORD newline_list DO compound_list DONE .)
    AND_GREATER_GREATER reduce using rule 74 (for_command -> FOR WORD newline_list DO compound_list DONE .)
    |               reduce using rule 74 (for_command -> FOR WORD newline_list DO compound_list DONE .)
    BAR_AND         reduce using rule 74 (for_command -> FOR WORD newline_list DO compound_list DONE .)
    AND_AND         reduce using rule 74 (for_command -> FOR WORD newline_list DO compound_list DONE .)
    OR_OR           reduce using rule 74 (for_command -> FOR WORD newline_list DO compound_list DONE .)
    &               reduce using rule 74 (for_command -> FOR WORD newline_list DO compound_list DONE .)
    ;               reduce using rule 74 (for_command -> FOR WORD newline_list DO compound_list DONE .)
    NEWLINE         reduce using rule 74 (for_command -> FOR WORD newline_list DO compound_list DONE .)
    DO              reduce using rule 74 (for_command -> FOR WORD newline_list DO compound_list DONE .)
    THEN            reduce using rule 74 (for_command -> FOR WORD newline_list DO compound_list DONE .)
    }               reduce using rule 74 (for_command -> FOR WORD newline_list DO compound_list DONE .)
    )               reduce using rule 74 (for_command -> FOR WORD newline_list DO compound_list DONE .)
    DONE            reduce using rule 74 (for_command -> FOR WORD newline_list DO compound_list DONE .)
    FI              reduce using rule 74 (for_command -> FOR WORD newline_list DO compound_list DONE .)
    ELSE            reduce using rule 74 (for_command -> FOR WORD newline_list DO compound_list DONE .)
    ELIF            reduce using rule 74 (for_command -> FOR WORD newline_list DO compound_list DONE .)
    SEMI_SEMI       reduce using rule 74 (for_command -> FOR WORD newline_list DO compound_list DONE .)
    SEMI_AND        reduce using rule 74 (for_command -> FOR WORD newline_list DO compound_list DONE .)
    SEMI_SEMI_AND   reduce using rule 74 (for_command -> FOR WORD newline_list DO compound_list DONE .)
    ESAC            reduce using rule 74 (for_command -> FOR WORD newline_list DO compound_list DONE .)


state 266

    (77) for_command -> FOR WORD ; newline_list { compound_list . }

    }               shift and go to state 295


state 267

    (76) for_command -> FOR WORD ; newline_list DO compound_list . DONE

    DONE            shift and go to state 296


state 268

    (83) arith_for_command -> FOR ARITH_FOR_EXPRS list_terminator newline_list { compound_list . }

    }               shift and go to state 297


state 269

    (82) arith_for_command -> FOR ARITH_FOR_EXPRS list_terminator newline_list DO compound_list . DONE

    DONE            shift and go to state 298


state 270

    (90) select_command -> SELECT WORD newline_list IN word_list list_terminator . newline_list DO list DONE
    (91) select_command -> SELECT WORD newline_list IN word_list list_terminator . newline_list { list }
    (144) newline_list -> .
    (145) newline_list -> . newline_list NEWLINE

    DO              reduce using rule 144 (newline_list -> .)
    {               reduce using rule 144 (newline_list -> .)
    NEWLINE         reduce using rule 144 (newline_list -> .)

    newline_list                   shift and go to state 299

state 271

    (132) list0 -> list1 . NEWLINE newline_list
    (133) list0 -> list1 . & newline_list
    (134) list0 -> list1 . ; newline_list
    (135) list1 -> list1 . AND_AND newline_list list1
    (136) list1 -> list1 . OR_OR newline_list list1
    (137) list1 -> list1 . & newline_list list1
    (138) list1 -> list1 . ; newline_list list1
    (139) list1 -> list1 . NEWLINE newline_list list1

    NEWLINE         shift and go to state 302
    &               shift and go to state 300
    ;               shift and go to state 301
    AND_AND         shift and go to state 187
    OR_OR           shift and go to state 189


state 272

    (87) select_command -> SELECT WORD newline_list { list } .

    >               reduce using rule 87 (select_command -> SELECT WORD newline_list { list } .)
    <               reduce using rule 87 (select_command -> SELECT WORD newline_list { list } .)
    NUMBER          reduce using rule 87 (select_command -> SELECT WORD newline_list { list } .)
    REDIR_WORD      reduce using rule 87 (select_command -> SELECT WORD newline_list { list } .)
    GREATER_GREATER reduce using rule 87 (select_command -> SELECT WORD newline_list { list } .)
    GREATER_BAR     reduce using rule 87 (select_command -> SELECT WORD newline_list { list } .)
    LESS_GREATER    reduce using rule 87 (select_command -> SELECT WORD newline_list { list } .)
    LESS_LESS       reduce using rule 87 (select_command -> SELECT WORD newline_list { list } .)
    LESS_LESS_MINUS reduce using rule 87 (select_command -> SELECT WORD newline_list { list } .)
    LESS_LESS_LESS  reduce using rule 87 (select_command -> SELECT WORD newline_list { list } .)
    LESS_AND        reduce using rule 87 (select_command -> SELECT WORD newline_list { list } .)
    GREATER_AND     reduce using rule 87 (select_command -> SELECT WORD newline_list { list } .)
    AND_GREATER     reduce using rule 87 (select_command -> SELECT WORD newline_list { list } .)
    AND_GREATER_GREATER reduce using rule 87 (select_command -> SELECT WORD newline_list { list } .)
    |               reduce using rule 87 (select_command -> SELECT WORD newline_list { list } .)
    BAR_AND         reduce using rule 87 (select_command -> SELECT WORD newline_list { list } .)
    &               reduce using rule 87 (select_command -> SELECT WORD newline_list { list } .)
    ;               reduce using rule 87 (select_command -> SELECT WORD newline_list { list } .)
    AND_AND         reduce using rule 87 (select_command -> SELECT WORD newline_list { list } .)
    OR_OR           reduce using rule 87 (select_command -> SELECT WORD newline_list { list } .)
    NEWLINE         reduce using rule 87 (select_command -> SELECT WORD newline_list { list } .)
    DO              reduce using rule 87 (select_command -> SELECT WORD newline_list { list } .)
    THEN            reduce using rule 87 (select_command -> SELECT WORD newline_list { list } .)
    }               reduce using rule 87 (select_command -> SELECT WORD newline_list { list } .)
    )               reduce using rule 87 (select_command -> SELECT WORD newline_list { list } .)
    DONE            reduce using rule 87 (select_command -> SELECT WORD newline_list { list } .)
    FI              reduce using rule 87 (select_command -> SELECT WORD newline_list { list } .)
    ELSE            reduce using rule 87 (select_command -> SELECT WORD newline_list { list } .)
    ELIF            reduce using rule 87 (select_command -> SELECT WORD newline_list { list } .)
    SEMI_SEMI       reduce using rule 87 (select_command -> SELECT WORD newline_list { list } .)
    SEMI_AND        reduce using rule 87 (select_command -> SELECT WORD newline_list { list } .)
    SEMI_SEMI_AND   reduce using rule 87 (select_command -> SELECT WORD newline_list { list } .)
    ESAC            reduce using rule 87 (select_command -> SELECT WORD newline_list { list } .)


state 273

    (86) select_command -> SELECT WORD newline_list DO list DONE .

    >               reduce using rule 86 (select_command -> SELECT WORD newline_list DO list DONE .)
    <               reduce using rule 86 (select_command -> SELECT WORD newline_list DO list DONE .)
    NUMBER          reduce using rule 86 (select_command -> SELECT WORD newline_list DO list DONE .)
    REDIR_WORD      reduce using rule 86 (select_command -> SELECT WORD newline_list DO list DONE .)
    GREATER_GREATER reduce using rule 86 (select_command -> SELECT WORD newline_list DO list DONE .)
    GREATER_BAR     reduce using rule 86 (select_command -> SELECT WORD newline_list DO list DONE .)
    LESS_GREATER    reduce using rule 86 (select_command -> SELECT WORD newline_list DO list DONE .)
    LESS_LESS       reduce using rule 86 (select_command -> SELECT WORD newline_list DO list DONE .)
    LESS_LESS_MINUS reduce using rule 86 (select_command -> SELECT WORD newline_list DO list DONE .)
    LESS_LESS_LESS  reduce using rule 86 (select_command -> SELECT WORD newline_list DO list DONE .)
    LESS_AND        reduce using rule 86 (select_command -> SELECT WORD newline_list DO list DONE .)
    GREATER_AND     reduce using rule 86 (select_command -> SELECT WORD newline_list DO list DONE .)
    AND_GREATER     reduce using rule 86 (select_command -> SELECT WORD newline_list DO list DONE .)
    AND_GREATER_GREATER reduce using rule 86 (select_command -> SELECT WORD newline_list DO list DONE .)
    |               reduce using rule 86 (select_command -> SELECT WORD newline_list DO list DONE .)
    BAR_AND         reduce using rule 86 (select_command -> SELECT WORD newline_list DO list DONE .)
    &               reduce using rule 86 (select_command -> SELECT WORD newline_list DO list DONE .)
    ;               reduce using rule 86 (select_command -> SELECT WORD newline_list DO list DONE .)
    AND_AND         reduce using rule 86 (select_command -> SELECT WORD newline_list DO list DONE .)
    OR_OR           reduce using rule 86 (select_command -> SELECT WORD newline_list DO list DONE .)
    NEWLINE         reduce using rule 86 (select_command -> SELECT WORD newline_list DO list DONE .)
    DO              reduce using rule 86 (select_command -> SELECT WORD newline_list DO list DONE .)
    THEN            reduce using rule 86 (select_command -> SELECT WORD newline_list DO list DONE .)
    }               reduce using rule 86 (select_command -> SELECT WORD newline_list DO list DONE .)
    )               reduce using rule 86 (select_command -> SELECT WORD newline_list DO list DONE .)
    DONE            reduce using rule 86 (select_command -> SELECT WORD newline_list DO list DONE .)
    FI              reduce using rule 86 (select_command -> SELECT WORD newline_list DO list DONE .)
    ELSE            reduce using rule 86 (select_command -> SELECT WORD newline_list DO list DONE .)
    ELIF            reduce using rule 86 (select_command -> SELECT WORD newline_list DO list DONE .)
    SEMI_SEMI       reduce using rule 86 (select_command -> SELECT WORD newline_list DO list DONE .)
    SEMI_AND        reduce using rule 86 (select_command -> SELECT WORD newline_list DO list DONE .)
    SEMI_SEMI_AND   reduce using rule 86 (select_command -> SELECT WORD newline_list DO list DONE .)
    ESAC            reduce using rule 86 (select_command -> SELECT WORD newline_list DO list DONE .)


state 274

    (89) select_command -> SELECT WORD ; newline_list { list . }

    }               shift and go to state 303


state 275

    (88) select_command -> SELECT WORD ; newline_list DO list . DONE

    DONE            shift and go to state 304


state 276

    (96) function_def -> FUNCTION WORD ( ) newline_list function_body .

    |               reduce using rule 96 (function_def -> FUNCTION WORD ( ) newline_list function_body .)
    BAR_AND         reduce using rule 96 (function_def -> FUNCTION WORD ( ) newline_list function_body .)
    &               reduce using rule 96 (function_def -> FUNCTION WORD ( ) newline_list function_body .)
    ;               reduce using rule 96 (function_def -> FUNCTION WORD ( ) newline_list function_body .)
    AND_AND         reduce using rule 96 (function_def -> FUNCTION WORD ( ) newline_list function_body .)
    OR_OR           reduce using rule 96 (function_def -> FUNCTION WORD ( ) newline_list function_body .)
    NEWLINE         reduce using rule 96 (function_def -> FUNCTION WORD ( ) newline_list function_body .)
    DO              reduce using rule 96 (function_def -> FUNCTION WORD ( ) newline_list function_body .)
    THEN            reduce using rule 96 (function_def -> FUNCTION WORD ( ) newline_list function_body .)
    }               reduce using rule 96 (function_def -> FUNCTION WORD ( ) newline_list function_body .)
    )               reduce using rule 96 (function_def -> FUNCTION WORD ( ) newline_list function_body .)
    DONE            reduce using rule 96 (function_def -> FUNCTION WORD ( ) newline_list function_body .)
    FI              reduce using rule 96 (function_def -> FUNCTION WORD ( ) newline_list function_body .)
    ELSE            reduce using rule 96 (function_def -> FUNCTION WORD ( ) newline_list function_body .)
    ELIF            reduce using rule 96 (function_def -> FUNCTION WORD ( ) newline_list function_body .)
    SEMI_SEMI       reduce using rule 96 (function_def -> FUNCTION WORD ( ) newline_list function_body .)
    SEMI_AND        reduce using rule 96 (function_def -> FUNCTION WORD ( ) newline_list function_body .)
    SEMI_SEMI_AND   reduce using rule 96 (function_def -> FUNCTION WORD ( ) newline_list function_body .)
    ESAC            reduce using rule 96 (function_def -> FUNCTION WORD ( ) newline_list function_body .)


state 277

    (127) pattern -> WORD .

    )               reduce using rule 127 (pattern -> WORD .)
    |               reduce using rule 127 (pattern -> WORD .)


state 278

    (117) pattern_list -> newline_list pattern . ) compound_list
    (118) pattern_list -> newline_list pattern . ) newline_list
    (128) pattern -> pattern . | WORD

    )               shift and go to state 306
    |               shift and go to state 305


state 279

    (119) pattern_list -> newline_list ( . pattern ) compound_list
    (120) pattern_list -> newline_list ( . pattern ) newline_list
    (127) pattern -> . WORD
    (128) pattern -> . pattern | WORD

    WORD            shift and go to state 277

    pattern                        shift and go to state 307

state 280

    (92) case_command -> CASE WORD newline_list IN newline_list ESAC .

    >               reduce using rule 92 (case_command -> CASE WORD newline_list IN newline_list ESAC .)
    <               reduce using rule 92 (case_command -> CASE WORD newline_list IN newline_list ESAC .)
    NUMBER          reduce using rule 92 (case_command -> CASE WORD newline_list IN newline_list ESAC .)
    REDIR_WORD      reduce using rule 92 (case_command -> CASE WORD newline_list IN newline_list ESAC .)
    GREATER_GREATER reduce using rule 92 (case_command -> CASE WORD newline_list IN newline_list ESAC .)
    GREATER_BAR     reduce using rule 92 (case_command -> CASE WORD newline_list IN newline_list ESAC .)
    LESS_GREATER    reduce using rule 92 (case_command -> CASE WORD newline_list IN newline_list ESAC .)
    LESS_LESS       reduce using rule 92 (case_command -> CASE WORD newline_list IN newline_list ESAC .)
    LESS_LESS_MINUS reduce using rule 92 (case_command -> CASE WORD newline_list IN newline_list ESAC .)
    LESS_LESS_LESS  reduce using rule 92 (case_command -> CASE WORD newline_list IN newline_list ESAC .)
    LESS_AND        reduce using rule 92 (case_command -> CASE WORD newline_list IN newline_list ESAC .)
    GREATER_AND     reduce using rule 92 (case_command -> CASE WORD newline_list IN newline_list ESAC .)
    AND_GREATER     reduce using rule 92 (case_command -> CASE WORD newline_list IN newline_list ESAC .)
    AND_GREATER_GREATER reduce using rule 92 (case_command -> CASE WORD newline_list IN newline_list ESAC .)
    |               reduce using rule 92 (case_command -> CASE WORD newline_list IN newline_list ESAC .)
    BAR_AND         reduce using rule 92 (case_command -> CASE WORD newline_list IN newline_list ESAC .)
    &               reduce using rule 92 (case_command -> CASE WORD newline_list IN newline_list ESAC .)
    ;               reduce using rule 92 (case_command -> CASE WORD newline_list IN newline_list ESAC .)
    AND_AND         reduce using rule 92 (case_command -> CASE WORD newline_list IN newline_list ESAC .)
    OR_OR           reduce using rule 92 (case_command -> CASE WORD newline_list IN newline_list ESAC .)
    NEWLINE         reduce using rule 92 (case_command -> CASE WORD newline_list IN newline_list ESAC .)
    DO              reduce using rule 92 (case_command -> CASE WORD newline_list IN newline_list ESAC .)
    THEN            reduce using rule 92 (case_command -> CASE WORD newline_list IN newline_list ESAC .)
    }               reduce using rule 92 (case_command -> CASE WORD newline_list IN newline_list ESAC .)
    )               reduce using rule 92 (case_command -> CASE WORD newline_list IN newline_list ESAC .)
    DONE            reduce using rule 92 (case_command -> CASE WORD newline_list IN newline_list ESAC .)
    FI              reduce using rule 92 (case_command -> CASE WORD newline_list IN newline_list ESAC .)
    ELSE            reduce using rule 92 (case_command -> CASE WORD newline_list IN newline_list ESAC .)
    ELIF            reduce using rule 92 (case_command -> CASE WORD newline_list IN newline_list ESAC .)
    SEMI_SEMI       reduce using rule 92 (case_command -> CASE WORD newline_list IN newline_list ESAC .)
    SEMI_AND        reduce using rule 92 (case_command -> CASE WORD newline_list IN newline_list ESAC .)
    SEMI_SEMI_AND   reduce using rule 92 (case_command -> CASE WORD newline_list IN newline_list ESAC .)
    ESAC            reduce using rule 92 (case_command -> CASE WORD newline_list IN newline_list ESAC .)


state 281

    (125) case_clause_sequence -> pattern_list SEMI_SEMI_AND .

    ESAC            reduce using rule 125 (case_clause_sequence -> pattern_list SEMI_SEMI_AND .)
    NEWLINE         reduce using rule 125 (case_clause_sequence -> pattern_list SEMI_SEMI_AND .)
    (               reduce using rule 125 (case_clause_sequence -> pattern_list SEMI_SEMI_AND .)
    WORD            reduce using rule 125 (case_clause_sequence -> pattern_list SEMI_SEMI_AND .)


state 282

    (123) case_clause_sequence -> pattern_list SEMI_AND .

    ESAC            reduce using rule 123 (case_clause_sequence -> pattern_list SEMI_AND .)
    NEWLINE         reduce using rule 123 (case_clause_sequence -> pattern_list SEMI_AND .)
    (               reduce using rule 123 (case_clause_sequence -> pattern_list SEMI_AND .)
    WORD            reduce using rule 123 (case_clause_sequence -> pattern_list SEMI_AND .)


state 283

    (121) case_clause_sequence -> pattern_list SEMI_SEMI .

    ESAC            reduce using rule 121 (case_clause_sequence -> pattern_list SEMI_SEMI .)
    NEWLINE         reduce using rule 121 (case_clause_sequence -> pattern_list SEMI_SEMI .)
    (               reduce using rule 121 (case_clause_sequence -> pattern_list SEMI_SEMI .)
    WORD            reduce using rule 121 (case_clause_sequence -> pattern_list SEMI_SEMI .)


state 284

    (93) case_command -> CASE WORD newline_list IN case_clause_sequence newline_list . ESAC
    (145) newline_list -> newline_list . NEWLINE
    (117) pattern_list -> newline_list . pattern ) compound_list
    (118) pattern_list -> newline_list . pattern ) newline_list
    (119) pattern_list -> newline_list . ( pattern ) compound_list
    (120) pattern_list -> newline_list . ( pattern ) newline_list
    (127) pattern -> . WORD
    (128) pattern -> . pattern | WORD

    ESAC            shift and go to state 308
    NEWLINE         shift and go to state 128
    (               shift and go to state 279
    WORD            shift and go to state 277

    pattern                        shift and go to state 278

state 285

    (122) case_clause_sequence -> case_clause_sequence pattern_list . SEMI_SEMI
    (124) case_clause_sequence -> case_clause_sequence pattern_list . SEMI_AND
    (126) case_clause_sequence -> case_clause_sequence pattern_list . SEMI_SEMI_AND
    (116) case_clause -> case_clause_sequence pattern_list .

    SEMI_SEMI       shift and go to state 311
    SEMI_AND        shift and go to state 310
    SEMI_SEMI_AND   shift and go to state 309
    ESAC            reduce using rule 116 (case_clause -> case_clause_sequence pattern_list .)


state 286

    (94) case_command -> CASE WORD newline_list IN case_clause ESAC .

    >               reduce using rule 94 (case_command -> CASE WORD newline_list IN case_clause ESAC .)
    <               reduce using rule 94 (case_command -> CASE WORD newline_list IN case_clause ESAC .)
    NUMBER          reduce using rule 94 (case_command -> CASE WORD newline_list IN case_clause ESAC .)
    REDIR_WORD      reduce using rule 94 (case_command -> CASE WORD newline_list IN case_clause ESAC .)
    GREATER_GREATER reduce using rule 94 (case_command -> CASE WORD newline_list IN case_clause ESAC .)
    GREATER_BAR     reduce using rule 94 (case_command -> CASE WORD newline_list IN case_clause ESAC .)
    LESS_GREATER    reduce using rule 94 (case_command -> CASE WORD newline_list IN case_clause ESAC .)
    LESS_LESS       reduce using rule 94 (case_command -> CASE WORD newline_list IN case_clause ESAC .)
    LESS_LESS_MINUS reduce using rule 94 (case_command -> CASE WORD newline_list IN case_clause ESAC .)
    LESS_LESS_LESS  reduce using rule 94 (case_command -> CASE WORD newline_list IN case_clause ESAC .)
    LESS_AND        reduce using rule 94 (case_command -> CASE WORD newline_list IN case_clause ESAC .)
    GREATER_AND     reduce using rule 94 (case_command -> CASE WORD newline_list IN case_clause ESAC .)
    AND_GREATER     reduce using rule 94 (case_command -> CASE WORD newline_list IN case_clause ESAC .)
    AND_GREATER_GREATER reduce using rule 94 (case_command -> CASE WORD newline_list IN case_clause ESAC .)
    |               reduce using rule 94 (case_command -> CASE WORD newline_list IN case_clause ESAC .)
    BAR_AND         reduce using rule 94 (case_command -> CASE WORD newline_list IN case_clause ESAC .)
    &               reduce using rule 94 (case_command -> CASE WORD newline_list IN case_clause ESAC .)
    ;               reduce using rule 94 (case_command -> CASE WORD newline_list IN case_clause ESAC .)
    AND_AND         reduce using rule 94 (case_command -> CASE WORD newline_list IN case_clause ESAC .)
    OR_OR           reduce using rule 94 (case_command -> CASE WORD newline_list IN case_clause ESAC .)
    NEWLINE         reduce using rule 94 (case_command -> CASE WORD newline_list IN case_clause ESAC .)
    DO              reduce using rule 94 (case_command -> CASE WORD newline_list IN case_clause ESAC .)
    THEN            reduce using rule 94 (case_command -> CASE WORD newline_list IN case_clause ESAC .)
    }               reduce using rule 94 (case_command -> CASE WORD newline_list IN case_clause ESAC .)
    )               reduce using rule 94 (case_command -> CASE WORD newline_list IN case_clause ESAC .)
    DONE            reduce using rule 94 (case_command -> CASE WORD newline_list IN case_clause ESAC .)
    FI              reduce using rule 94 (case_command -> CASE WORD newline_list IN case_clause ESAC .)
    ELSE            reduce using rule 94 (case_command -> CASE WORD newline_list IN case_clause ESAC .)
    ELIF            reduce using rule 94 (case_command -> CASE WORD newline_list IN case_clause ESAC .)
    SEMI_SEMI       reduce using rule 94 (case_command -> CASE WORD newline_list IN case_clause ESAC .)
    SEMI_AND        reduce using rule 94 (case_command -> CASE WORD newline_list IN case_clause ESAC .)
    SEMI_SEMI_AND   reduce using rule 94 (case_command -> CASE WORD newline_list IN case_clause ESAC .)
    ESAC            reduce using rule 94 (case_command -> CASE WORD newline_list IN case_clause ESAC .)


state 287

    (137) list1 -> list1 & . newline_list list1
    (144) newline_list -> .
    (145) newline_list -> . newline_list NEWLINE

    NEWLINE         reduce using rule 144 (newline_list -> .)
    BANG            reduce using rule 144 (newline_list -> .)
    TIME            reduce using rule 144 (newline_list -> .)
    WHILE           reduce using rule 144 (newline_list -> .)
    UNTIL           reduce using rule 144 (newline_list -> .)
    WORD            reduce using rule 144 (newline_list -> .)
    FUNCTION        reduce using rule 144 (newline_list -> .)
    COPROC          reduce using rule 144 (newline_list -> .)
    ASSIGNMENT_WORD reduce using rule 144 (newline_list -> .)
    FOR             reduce using rule 144 (newline_list -> .)
    CASE            reduce using rule 144 (newline_list -> .)
    SELECT          reduce using rule 144 (newline_list -> .)
    IF              reduce using rule 144 (newline_list -> .)
    (               reduce using rule 144 (newline_list -> .)
    {               reduce using rule 144 (newline_list -> .)
    ARITH_CMD       reduce using rule 144 (newline_list -> .)
    COND_START      reduce using rule 144 (newline_list -> .)
    >               reduce using rule 144 (newline_list -> .)
    <               reduce using rule 144 (newline_list -> .)
    NUMBER          reduce using rule 144 (newline_list -> .)
    REDIR_WORD      reduce using rule 144 (newline_list -> .)
    GREATER_GREATER reduce using rule 144 (newline_list -> .)
    GREATER_BAR     reduce using rule 144 (newline_list -> .)
    LESS_GREATER    reduce using rule 144 (newline_list -> .)
    LESS_LESS       reduce using rule 144 (newline_list -> .)
    LESS_LESS_MINUS reduce using rule 144 (newline_list -> .)
    LESS_LESS_LESS  reduce using rule 144 (newline_list -> .)
    LESS_AND        reduce using rule 144 (newline_list -> .)
    GREATER_AND     reduce using rule 144 (newline_list -> .)
    AND_GREATER     reduce using rule 144 (newline_list -> .)
    AND_GREATER_GREATER reduce using rule 144 (newline_list -> .)

    newline_list                   shift and go to state 312

state 288

    (138) list1 -> list1 ; . newline_list list1
    (144) newline_list -> .
    (145) newline_list -> . newline_list NEWLINE

    NEWLINE         reduce using rule 144 (newline_list -> .)
    BANG            reduce using rule 144 (newline_list -> .)
    TIME            reduce using rule 144 (newline_list -> .)
    WHILE           reduce using rule 144 (newline_list -> .)
    UNTIL           reduce using rule 144 (newline_list -> .)
    WORD            reduce using rule 144 (newline_list -> .)
    FUNCTION        reduce using rule 144 (newline_list -> .)
    COPROC          reduce using rule 144 (newline_list -> .)
    ASSIGNMENT_WORD reduce using rule 144 (newline_list -> .)
    FOR             reduce using rule 144 (newline_list -> .)
    CASE            reduce using rule 144 (newline_list -> .)
    SELECT          reduce using rule 144 (newline_list -> .)
    IF              reduce using rule 144 (newline_list -> .)
    (               reduce using rule 144 (newline_list -> .)
    {               reduce using rule 144 (newline_list -> .)
    ARITH_CMD       reduce using rule 144 (newline_list -> .)
    COND_START      reduce using rule 144 (newline_list -> .)
    >               reduce using rule 144 (newline_list -> .)
    <               reduce using rule 144 (newline_list -> .)
    NUMBER          reduce using rule 144 (newline_list -> .)
    REDIR_WORD      reduce using rule 144 (newline_list -> .)
    GREATER_GREATER reduce using rule 144 (newline_list -> .)
    GREATER_BAR     reduce using rule 144 (newline_list -> .)
    LESS_GREATER    reduce using rule 144 (newline_list -> .)
    LESS_LESS       reduce using rule 144 (newline_list -> .)
    LESS_LESS_MINUS reduce using rule 144 (newline_list -> .)
    LESS_LESS_LESS  reduce using rule 144 (newline_list -> .)
    LESS_AND        reduce using rule 144 (newline_list -> .)
    GREATER_AND     reduce using rule 144 (newline_list -> .)
    AND_GREATER     reduce using rule 144 (newline_list -> .)
    AND_GREATER_GREATER reduce using rule 144 (newline_list -> .)

    newline_list                   shift and go to state 313

state 289

    (139) list1 -> list1 NEWLINE . newline_list list1
    (144) newline_list -> .
    (145) newline_list -> . newline_list NEWLINE

    NEWLINE         reduce using rule 144 (newline_list -> .)
    BANG            reduce using rule 144 (newline_list -> .)
    TIME            reduce using rule 144 (newline_list -> .)
    WHILE           reduce using rule 144 (newline_list -> .)
    UNTIL           reduce using rule 144 (newline_list -> .)
    WORD            reduce using rule 144 (newline_list -> .)
    FUNCTION        reduce using rule 144 (newline_list -> .)
    COPROC          reduce using rule 144 (newline_list -> .)
    ASSIGNMENT_WORD reduce using rule 144 (newline_list -> .)
    FOR             reduce using rule 144 (newline_list -> .)
    CASE            reduce using rule 144 (newline_list -> .)
    SELECT          reduce using rule 144 (newline_list -> .)
    IF              reduce using rule 144 (newline_list -> .)
    (               reduce using rule 144 (newline_list -> .)
    {               reduce using rule 144 (newline_list -> .)
    ARITH_CMD       reduce using rule 144 (newline_list -> .)
    COND_START      reduce using rule 144 (newline_list -> .)
    >               reduce using rule 144 (newline_list -> .)
    <               reduce using rule 144 (newline_list -> .)
    NUMBER          reduce using rule 144 (newline_list -> .)
    REDIR_WORD      reduce using rule 144 (newline_list -> .)
    GREATER_GREATER reduce using rule 144 (newline_list -> .)
    GREATER_BAR     reduce using rule 144 (newline_list -> .)
    LESS_GREATER    reduce using rule 144 (newline_list -> .)
    LESS_LESS       reduce using rule 144 (newline_list -> .)
    LESS_LESS_MINUS reduce using rule 144 (newline_list -> .)
    LESS_LESS_LESS  reduce using rule 144 (newline_list -> .)
    LESS_AND        reduce using rule 144 (newline_list -> .)
    GREATER_AND     reduce using rule 144 (newline_list -> .)
    AND_GREATER     reduce using rule 144 (newline_list -> .)
    AND_GREATER_GREATER reduce using rule 144 (newline_list -> .)

    newline_list                   shift and go to state 314

state 290

    (112) elif_clause -> ELIF compound_list THEN . compound_list
    (113) elif_clause -> ELIF compound_list THEN . compound_list ELSE compound_list
    (114) elif_clause -> ELIF compound_list THEN . compound_list elif_clause
    (130) compound_list -> . list
    (131) compound_list -> . newline_list list1
    (129) list -> . newline_list list0
    (144) newline_list -> .
    (145) newline_list -> . newline_list NEWLINE

    NEWLINE         reduce using rule 144 (newline_list -> .)
    BANG            reduce using rule 144 (newline_list -> .)
    TIME            reduce using rule 144 (newline_list -> .)
    WHILE           reduce using rule 144 (newline_list -> .)
    UNTIL           reduce using rule 144 (newline_list -> .)
    WORD            reduce using rule 144 (newline_list -> .)
    FUNCTION        reduce using rule 144 (newline_list -> .)
    COPROC          reduce using rule 144 (newline_list -> .)
    ASSIGNMENT_WORD reduce using rule 144 (newline_list -> .)
    FOR             reduce using rule 144 (newline_list -> .)
    CASE            reduce using rule 144 (newline_list -> .)
    SELECT          reduce using rule 144 (newline_list -> .)
    IF              reduce using rule 144 (newline_list -> .)
    (               reduce using rule 144 (newline_list -> .)
    {               reduce using rule 144 (newline_list -> .)
    ARITH_CMD       reduce using rule 144 (newline_list -> .)
    COND_START      reduce using rule 144 (newline_list -> .)
    >               reduce using rule 144 (newline_list -> .)
    <               reduce using rule 144 (newline_list -> .)
    NUMBER          reduce using rule 144 (newline_list -> .)
    REDIR_WORD      reduce using rule 144 (newline_list -> .)
    GREATER_GREATER reduce using rule 144 (newline_list -> .)
    GREATER_BAR     reduce using rule 144 (newline_list -> .)
    LESS_GREATER    reduce using rule 144 (newline_list -> .)
    LESS_LESS       reduce using rule 144 (newline_list -> .)
    LESS_LESS_MINUS reduce using rule 144 (newline_list -> .)
    LESS_LESS_LESS  reduce using rule 144 (newline_list -> .)
    LESS_AND        reduce using rule 144 (newline_list -> .)
    GREATER_AND     reduce using rule 144 (newline_list -> .)
    AND_GREATER     reduce using rule 144 (newline_list -> .)
    AND_GREATER_GREATER reduce using rule 144 (newline_list -> .)

    newline_list                   shift and go to state 56
    compound_list                  shift and go to state 315
    list                           shift and go to state 58

state 291

    (107) if_command -> IF compound_list THEN compound_list ELSE compound_list FI .

    >               reduce using rule 107 (if_command -> IF compound_list THEN compound_list ELSE compound_list FI .)
    <               reduce using rule 107 (if_command -> IF compound_list THEN compound_list ELSE compound_list FI .)
    NUMBER          reduce using rule 107 (if_command -> IF compound_list THEN compound_list ELSE compound_list FI .)
    REDIR_WORD      reduce using rule 107 (if_command -> IF compound_list THEN compound_list ELSE compound_list FI .)
    GREATER_GREATER reduce using rule 107 (if_command -> IF compound_list THEN compound_list ELSE compound_list FI .)
    GREATER_BAR     reduce using rule 107 (if_command -> IF compound_list THEN compound_list ELSE compound_list FI .)
    LESS_GREATER    reduce using rule 107 (if_command -> IF compound_list THEN compound_list ELSE compound_list FI .)
    LESS_LESS       reduce using rule 107 (if_command -> IF compound_list THEN compound_list ELSE compound_list FI .)
    LESS_LESS_MINUS reduce using rule 107 (if_command -> IF compound_list THEN compound_list ELSE compound_list FI .)
    LESS_LESS_LESS  reduce using rule 107 (if_command -> IF compound_list THEN compound_list ELSE compound_list FI .)
    LESS_AND        reduce using rule 107 (if_command -> IF compound_list THEN compound_list ELSE compound_list FI .)
    GREATER_AND     reduce using rule 107 (if_command -> IF compound_list THEN compound_list ELSE compound_list FI .)
    AND_GREATER     reduce using rule 107 (if_command -> IF compound_list THEN compound_list ELSE compound_list FI .)
    AND_GREATER_GREATER reduce using rule 107 (if_command -> IF compound_list THEN compound_list ELSE compound_list FI .)
    |               reduce using rule 107 (if_command -> IF compound_list THEN compound_list ELSE compound_list FI .)
    BAR_AND         reduce using rule 107 (if_command -> IF compound_list THEN compound_list ELSE compound_list FI .)
    AND_AND         reduce using rule 107 (if_command -> IF compound_list THEN compound_list ELSE compound_list FI .)
    OR_OR           reduce using rule 107 (if_command -> IF compound_list THEN compound_list ELSE compound_list FI .)
    &               reduce using rule 107 (if_command -> IF compound_list THEN compound_list ELSE compound_list FI .)
    ;               reduce using rule 107 (if_command -> IF compound_list THEN compound_list ELSE compound_list FI .)
    NEWLINE         reduce using rule 107 (if_command -> IF compound_list THEN compound_list ELSE compound_list FI .)
    DO              reduce using rule 107 (if_command -> IF compound_list THEN compound_list ELSE compound_list FI .)
    THEN            reduce using rule 107 (if_command -> IF compound_list THEN compound_list ELSE compound_list FI .)
    }               reduce using rule 107 (if_command -> IF compound_list THEN compound_list ELSE compound_list FI .)
    )               reduce using rule 107 (if_command -> IF compound_list THEN compound_list ELSE compound_list FI .)
    DONE            reduce using rule 107 (if_command -> IF compound_list THEN compound_list ELSE compound_list FI .)
    FI              reduce using rule 107 (if_command -> IF compound_list THEN compound_list ELSE compound_list FI .)
    ELSE            reduce using rule 107 (if_command -> IF compound_list THEN compound_list ELSE compound_list FI .)
    ELIF            reduce using rule 107 (if_command -> IF compound_list THEN compound_list ELSE compound_list FI .)
    SEMI_SEMI       reduce using rule 107 (if_command -> IF compound_list THEN compound_list ELSE compound_list FI .)
    SEMI_AND        reduce using rule 107 (if_command -> IF compound_list THEN compound_list ELSE compound_list FI .)
    SEMI_SEMI_AND   reduce using rule 107 (if_command -> IF compound_list THEN compound_list ELSE compound_list FI .)
    ESAC            reduce using rule 107 (if_command -> IF compound_list THEN compound_list ELSE compound_list FI .)


state 292

    (78) for_command -> FOR WORD newline_list IN word_list list_terminator newline_list . DO compound_list DONE
    (79) for_command -> FOR WORD newline_list IN word_list list_terminator newline_list . { compound_list }
    (145) newline_list -> newline_list . NEWLINE

    DO              shift and go to state 317
    {               shift and go to state 316
    NEWLINE         shift and go to state 128


state 293

    (81) for_command -> FOR WORD newline_list IN list_terminator newline_list { . compound_list }
    (130) compound_list -> . list
    (131) compound_list -> . newline_list list1
    (129) list -> . newline_list list0
    (144) newline_list -> .
    (145) newline_list -> . newline_list NEWLINE

    NEWLINE         reduce using rule 144 (newline_list -> .)
    BANG            reduce using rule 144 (newline_list -> .)
    TIME            reduce using rule 144 (newline_list -> .)
    WHILE           reduce using rule 144 (newline_list -> .)
    UNTIL           reduce using rule 144 (newline_list -> .)
    WORD            reduce using rule 144 (newline_list -> .)
    FUNCTION        reduce using rule 144 (newline_list -> .)
    COPROC          reduce using rule 144 (newline_list -> .)
    ASSIGNMENT_WORD reduce using rule 144 (newline_list -> .)
    FOR             reduce using rule 144 (newline_list -> .)
    CASE            reduce using rule 144 (newline_list -> .)
    SELECT          reduce using rule 144 (newline_list -> .)
    IF              reduce using rule 144 (newline_list -> .)
    (               reduce using rule 144 (newline_list -> .)
    {               reduce using rule 144 (newline_list -> .)
    ARITH_CMD       reduce using rule 144 (newline_list -> .)
    COND_START      reduce using rule 144 (newline_list -> .)
    >               reduce using rule 144 (newline_list -> .)
    <               reduce using rule 144 (newline_list -> .)
    NUMBER          reduce using rule 144 (newline_list -> .)
    REDIR_WORD      reduce using rule 144 (newline_list -> .)
    GREATER_GREATER reduce using rule 144 (newline_list -> .)
    GREATER_BAR     reduce using rule 144 (newline_list -> .)
    LESS_GREATER    reduce using rule 144 (newline_list -> .)
    LESS_LESS       reduce using rule 144 (newline_list -> .)
    LESS_LESS_MINUS reduce using rule 144 (newline_list -> .)
    LESS_LESS_LESS  reduce using rule 144 (newline_list -> .)
    LESS_AND        reduce using rule 144 (newline_list -> .)
    GREATER_AND     reduce using rule 144 (newline_list -> .)
    AND_GREATER     reduce using rule 144 (newline_list -> .)
    AND_GREATER_GREATER reduce using rule 144 (newline_list -> .)

    newline_list                   shift and go to state 56
    compound_list                  shift and go to state 318
    list                           shift and go to state 58

state 294

    (80) for_command -> FOR WORD newline_list IN list_terminator newline_list DO . compound_list DONE
    (130) compound_list -> . list
    (131) compound_list -> . newline_list list1
    (129) list -> . newline_list list0
    (144) newline_list -> .
    (145) newline_list -> . newline_list NEWLINE

    NEWLINE         reduce using rule 144 (newline_list -> .)
    BANG            reduce using rule 144 (newline_list -> .)
    TIME            reduce using rule 144 (newline_list -> .)
    WHILE           reduce using rule 144 (newline_list -> .)
    UNTIL           reduce using rule 144 (newline_list -> .)
    WORD            reduce using rule 144 (newline_list -> .)
    FUNCTION        reduce using rule 144 (newline_list -> .)
    COPROC          reduce using rule 144 (newline_list -> .)
    ASSIGNMENT_WORD reduce using rule 144 (newline_list -> .)
    FOR             reduce using rule 144 (newline_list -> .)
    CASE            reduce using rule 144 (newline_list -> .)
    SELECT          reduce using rule 144 (newline_list -> .)
    IF              reduce using rule 144 (newline_list -> .)
    (               reduce using rule 144 (newline_list -> .)
    {               reduce using rule 144 (newline_list -> .)
    ARITH_CMD       reduce using rule 144 (newline_list -> .)
    COND_START      reduce using rule 144 (newline_list -> .)
    >               reduce using rule 144 (newline_list -> .)
    <               reduce using rule 144 (newline_list -> .)
    NUMBER          reduce using rule 144 (newline_list -> .)
    REDIR_WORD      reduce using rule 144 (newline_list -> .)
    GREATER_GREATER reduce using rule 144 (newline_list -> .)
    GREATER_BAR     reduce using rule 144 (newline_list -> .)
    LESS_GREATER    reduce using rule 144 (newline_list -> .)
    LESS_LESS       reduce using rule 144 (newline_list -> .)
    LESS_LESS_MINUS reduce using rule 144 (newline_list -> .)
    LESS_LESS_LESS  reduce using rule 144 (newline_list -> .)
    LESS_AND        reduce using rule 144 (newline_list -> .)
    GREATER_AND     reduce using rule 144 (newline_list -> .)
    AND_GREATER     reduce using rule 144 (newline_list -> .)
    AND_GREATER_GREATER reduce using rule 144 (newline_list -> .)

    newline_list                   shift and go to state 56
    compound_list                  shift and go to state 319
    list                           shift and go to state 58

state 295

    (77) for_command -> FOR WORD ; newline_list { compound_list } .

    >               reduce using rule 77 (for_command -> FOR WORD ; newline_list { compound_list } .)
    <               reduce using rule 77 (for_command -> FOR WORD ; newline_list { compound_list } .)
    NUMBER          reduce using rule 77 (for_command -> FOR WORD ; newline_list { compound_list } .)
    REDIR_WORD      reduce using rule 77 (for_command -> FOR WORD ; newline_list { compound_list } .)
    GREATER_GREATER reduce using rule 77 (for_command -> FOR WORD ; newline_list { compound_list } .)
    GREATER_BAR     reduce using rule 77 (for_command -> FOR WORD ; newline_list { compound_list } .)
    LESS_GREATER    reduce using rule 77 (for_command -> FOR WORD ; newline_list { compound_list } .)
    LESS_LESS       reduce using rule 77 (for_command -> FOR WORD ; newline_list { compound_list } .)
    LESS_LESS_MINUS reduce using rule 77 (for_command -> FOR WORD ; newline_list { compound_list } .)
    LESS_LESS_LESS  reduce using rule 77 (for_command -> FOR WORD ; newline_list { compound_list } .)
    LESS_AND        reduce using rule 77 (for_command -> FOR WORD ; newline_list { compound_list } .)
    GREATER_AND     reduce using rule 77 (for_command -> FOR WORD ; newline_list { compound_list } .)
    AND_GREATER     reduce using rule 77 (for_command -> FOR WORD ; newline_list { compound_list } .)
    AND_GREATER_GREATER reduce using rule 77 (for_command -> FOR WORD ; newline_list { compound_list } .)
    |               reduce using rule 77 (for_command -> FOR WORD ; newline_list { compound_list } .)
    BAR_AND         reduce using rule 77 (for_command -> FOR WORD ; newline_list { compound_list } .)
    AND_AND         reduce using rule 77 (for_command -> FOR WORD ; newline_list { compound_list } .)
    OR_OR           reduce using rule 77 (for_command -> FOR WORD ; newline_list { compound_list } .)
    &               reduce using rule 77 (for_command -> FOR WORD ; newline_list { compound_list } .)
    ;               reduce using rule 77 (for_command -> FOR WORD ; newline_list { compound_list } .)
    NEWLINE         reduce using rule 77 (for_command -> FOR WORD ; newline_list { compound_list } .)
    DO              reduce using rule 77 (for_command -> FOR WORD ; newline_list { compound_list } .)
    THEN            reduce using rule 77 (for_command -> FOR WORD ; newline_list { compound_list } .)
    }               reduce using rule 77 (for_command -> FOR WORD ; newline_list { compound_list } .)
    )               reduce using rule 77 (for_command -> FOR WORD ; newline_list { compound_list } .)
    DONE            reduce using rule 77 (for_command -> FOR WORD ; newline_list { compound_list } .)
    FI              reduce using rule 77 (for_command -> FOR WORD ; newline_list { compound_list } .)
    ELSE            reduce using rule 77 (for_command -> FOR WORD ; newline_list { compound_list } .)
    ELIF            reduce using rule 77 (for_command -> FOR WORD ; newline_list { compound_list } .)
    SEMI_SEMI       reduce using rule 77 (for_command -> FOR WORD ; newline_list { compound_list } .)
    SEMI_AND        reduce using rule 77 (for_command -> FOR WORD ; newline_list { compound_list } .)
    SEMI_SEMI_AND   reduce using rule 77 (for_command -> FOR WORD ; newline_list { compound_list } .)
    ESAC            reduce using rule 77 (for_command -> FOR WORD ; newline_list { compound_list } .)


state 296

    (76) for_command -> FOR WORD ; newline_list DO compound_list DONE .

    >               reduce using rule 76 (for_command -> FOR WORD ; newline_list DO compound_list DONE .)
    <               reduce using rule 76 (for_command -> FOR WORD ; newline_list DO compound_list DONE .)
    NUMBER          reduce using rule 76 (for_command -> FOR WORD ; newline_list DO compound_list DONE .)
    REDIR_WORD      reduce using rule 76 (for_command -> FOR WORD ; newline_list DO compound_list DONE .)
    GREATER_GREATER reduce using rule 76 (for_command -> FOR WORD ; newline_list DO compound_list DONE .)
    GREATER_BAR     reduce using rule 76 (for_command -> FOR WORD ; newline_list DO compound_list DONE .)
    LESS_GREATER    reduce using rule 76 (for_command -> FOR WORD ; newline_list DO compound_list DONE .)
    LESS_LESS       reduce using rule 76 (for_command -> FOR WORD ; newline_list DO compound_list DONE .)
    LESS_LESS_MINUS reduce using rule 76 (for_command -> FOR WORD ; newline_list DO compound_list DONE .)
    LESS_LESS_LESS  reduce using rule 76 (for_command -> FOR WORD ; newline_list DO compound_list DONE .)
    LESS_AND        reduce using rule 76 (for_command -> FOR WORD ; newline_list DO compound_list DONE .)
    GREATER_AND     reduce using rule 76 (for_command -> FOR WORD ; newline_list DO compound_list DONE .)
    AND_GREATER     reduce using rule 76 (for_command -> FOR WORD ; newline_list DO compound_list DONE .)
    AND_GREATER_GREATER reduce using rule 76 (for_command -> FOR WORD ; newline_list DO compound_list DONE .)
    |               reduce using rule 76 (for_command -> FOR WORD ; newline_list DO compound_list DONE .)
    BAR_AND         reduce using rule 76 (for_command -> FOR WORD ; newline_list DO compound_list DONE .)
    AND_AND         reduce using rule 76 (for_command -> FOR WORD ; newline_list DO compound_list DONE .)
    OR_OR           reduce using rule 76 (for_command -> FOR WORD ; newline_list DO compound_list DONE .)
    &               reduce using rule 76 (for_command -> FOR WORD ; newline_list DO compound_list DONE .)
    ;               reduce using rule 76 (for_command -> FOR WORD ; newline_list DO compound_list DONE .)
    NEWLINE         reduce using rule 76 (for_command -> FOR WORD ; newline_list DO compound_list DONE .)
    DO              reduce using rule 76 (for_command -> FOR WORD ; newline_list DO compound_list DONE .)
    THEN            reduce using rule 76 (for_command -> FOR WORD ; newline_list DO compound_list DONE .)
    }               reduce using rule 76 (for_command -> FOR WORD ; newline_list DO compound_list DONE .)
    )               reduce using rule 76 (for_command -> FOR WORD ; newline_list DO compound_list DONE .)
    DONE            reduce using rule 76 (for_command -> FOR WORD ; newline_list DO compound_list DONE .)
    FI              reduce using rule 76 (for_command -> FOR WORD ; newline_list DO compound_list DONE .)
    ELSE            reduce using rule 76 (for_command -> FOR WORD ; newline_list DO compound_list DONE .)
    ELIF            reduce using rule 76 (for_command -> FOR WORD ; newline_list DO compound_list DONE .)
    SEMI_SEMI       reduce using rule 76 (for_command -> FOR WORD ; newline_list DO compound_list DONE .)
    SEMI_AND        reduce using rule 76 (for_command -> FOR WORD ; newline_list DO compound_list DONE .)
    SEMI_SEMI_AND   reduce using rule 76 (for_command -> FOR WORD ; newline_list DO compound_list DONE .)
    ESAC            reduce using rule 76 (for_command -> FOR WORD ; newline_list DO compound_list DONE .)


state 297

    (83) arith_for_command -> FOR ARITH_FOR_EXPRS list_terminator newline_list { compound_list } .

    >               reduce using rule 83 (arith_for_command -> FOR ARITH_FOR_EXPRS list_terminator newline_list { compound_list } .)
    <               reduce using rule 83 (arith_for_command -> FOR ARITH_FOR_EXPRS list_terminator newline_list { compound_list } .)
    NUMBER          reduce using rule 83 (arith_for_command -> FOR ARITH_FOR_EXPRS list_terminator newline_list { compound_list } .)
    REDIR_WORD      reduce using rule 83 (arith_for_command -> FOR ARITH_FOR_EXPRS list_terminator newline_list { compound_list } .)
    GREATER_GREATER reduce using rule 83 (arith_for_command -> FOR ARITH_FOR_EXPRS list_terminator newline_list { compound_list } .)
    GREATER_BAR     reduce using rule 83 (arith_for_command -> FOR ARITH_FOR_EXPRS list_terminator newline_list { compound_list } .)
    LESS_GREATER    reduce using rule 83 (arith_for_command -> FOR ARITH_FOR_EXPRS list_terminator newline_list { compound_list } .)
    LESS_LESS       reduce using rule 83 (arith_for_command -> FOR ARITH_FOR_EXPRS list_terminator newline_list { compound_list } .)
    LESS_LESS_MINUS reduce using rule 83 (arith_for_command -> FOR ARITH_FOR_EXPRS list_terminator newline_list { compound_list } .)
    LESS_LESS_LESS  reduce using rule 83 (arith_for_command -> FOR ARITH_FOR_EXPRS list_terminator newline_list { compound_list } .)
    LESS_AND        reduce using rule 83 (arith_for_command -> FOR ARITH_FOR_EXPRS list_terminator newline_list { compound_list } .)
    GREATER_AND     reduce using rule 83 (arith_for_command -> FOR ARITH_FOR_EXPRS list_terminator newline_list { compound_list } .)
    AND_GREATER     reduce using rule 83 (arith_for_command -> FOR ARITH_FOR_EXPRS list_terminator newline_list { compound_list } .)
    AND_GREATER_GREATER reduce using rule 83 (arith_for_command -> FOR ARITH_FOR_EXPRS list_terminator newline_list { compound_list } .)
    |               reduce using rule 83 (arith_for_command -> FOR ARITH_FOR_EXPRS list_terminator newline_list { compound_list } .)
    BAR_AND         reduce using rule 83 (arith_for_command -> FOR ARITH_FOR_EXPRS list_terminator newline_list { compound_list } .)
    AND_AND         reduce using rule 83 (arith_for_command -> FOR ARITH_FOR_EXPRS list_terminator newline_list { compound_list } .)
    OR_OR           reduce using rule 83 (arith_for_command -> FOR ARITH_FOR_EXPRS list_terminator newline_list { compound_list } .)
    &               reduce using rule 83 (arith_for_command -> FOR ARITH_FOR_EXPRS list_terminator newline_list { compound_list } .)
    ;               reduce using rule 83 (arith_for_command -> FOR ARITH_FOR_EXPRS list_terminator newline_list { compound_list } .)
    NEWLINE         reduce using rule 83 (arith_for_command -> FOR ARITH_FOR_EXPRS list_terminator newline_list { compound_list } .)
    DO              reduce using rule 83 (arith_for_command -> FOR ARITH_FOR_EXPRS list_terminator newline_list { compound_list } .)
    THEN            reduce using rule 83 (arith_for_command -> FOR ARITH_FOR_EXPRS list_terminator newline_list { compound_list } .)
    }               reduce using rule 83 (arith_for_command -> FOR ARITH_FOR_EXPRS list_terminator newline_list { compound_list } .)
    )               reduce using rule 83 (arith_for_command -> FOR ARITH_FOR_EXPRS list_terminator newline_list { compound_list } .)
    DONE            reduce using rule 83 (arith_for_command -> FOR ARITH_FOR_EXPRS list_terminator newline_list { compound_list } .)
    FI              reduce using rule 83 (arith_for_command -> FOR ARITH_FOR_EXPRS list_terminator newline_list { compound_list } .)
    ELSE            reduce using rule 83 (arith_for_command -> FOR ARITH_FOR_EXPRS list_terminator newline_list { compound_list } .)
    ELIF            reduce using rule 83 (arith_for_command -> FOR ARITH_FOR_EXPRS list_terminator newline_list { compound_list } .)
    SEMI_SEMI       reduce using rule 83 (arith_for_command -> FOR ARITH_FOR_EXPRS list_terminator newline_list { compound_list } .)
    SEMI_AND        reduce using rule 83 (arith_for_command -> FOR ARITH_FOR_EXPRS list_terminator newline_list { compound_list } .)
    SEMI_SEMI_AND   reduce using rule 83 (arith_for_command -> FOR ARITH_FOR_EXPRS list_terminator newline_list { compound_list } .)
    ESAC            reduce using rule 83 (arith_for_command -> FOR ARITH_FOR_EXPRS list_terminator newline_list { compound_list } .)


state 298

    (82) arith_for_command -> FOR ARITH_FOR_EXPRS list_terminator newline_list DO compound_list DONE .

    >               reduce using rule 82 (arith_for_command -> FOR ARITH_FOR_EXPRS list_terminator newline_list DO compound_list DONE .)
    <               reduce using rule 82 (arith_for_command -> FOR ARITH_FOR_EXPRS list_terminator newline_list DO compound_list DONE .)
    NUMBER          reduce using rule 82 (arith_for_command -> FOR ARITH_FOR_EXPRS list_terminator newline_list DO compound_list DONE .)
    REDIR_WORD      reduce using rule 82 (arith_for_command -> FOR ARITH_FOR_EXPRS list_terminator newline_list DO compound_list DONE .)
    GREATER_GREATER reduce using rule 82 (arith_for_command -> FOR ARITH_FOR_EXPRS list_terminator newline_list DO compound_list DONE .)
    GREATER_BAR     reduce using rule 82 (arith_for_command -> FOR ARITH_FOR_EXPRS list_terminator newline_list DO compound_list DONE .)
    LESS_GREATER    reduce using rule 82 (arith_for_command -> FOR ARITH_FOR_EXPRS list_terminator newline_list DO compound_list DONE .)
    LESS_LESS       reduce using rule 82 (arith_for_command -> FOR ARITH_FOR_EXPRS list_terminator newline_list DO compound_list DONE .)
    LESS_LESS_MINUS reduce using rule 82 (arith_for_command -> FOR ARITH_FOR_EXPRS list_terminator newline_list DO compound_list DONE .)
    LESS_LESS_LESS  reduce using rule 82 (arith_for_command -> FOR ARITH_FOR_EXPRS list_terminator newline_list DO compound_list DONE .)
    LESS_AND        reduce using rule 82 (arith_for_command -> FOR ARITH_FOR_EXPRS list_terminator newline_list DO compound_list DONE .)
    GREATER_AND     reduce using rule 82 (arith_for_command -> FOR ARITH_FOR_EXPRS list_terminator newline_list DO compound_list DONE .)
    AND_GREATER     reduce using rule 82 (arith_for_command -> FOR ARITH_FOR_EXPRS list_terminator newline_list DO compound_list DONE .)
    AND_GREATER_GREATER reduce using rule 82 (arith_for_command -> FOR ARITH_FOR_EXPRS list_terminator newline_list DO compound_list DONE .)
    |               reduce using rule 82 (arith_for_command -> FOR ARITH_FOR_EXPRS list_terminator newline_list DO compound_list DONE .)
    BAR_AND         reduce using rule 82 (arith_for_command -> FOR ARITH_FOR_EXPRS list_terminator newline_list DO compound_list DONE .)
    AND_AND         reduce using rule 82 (arith_for_command -> FOR ARITH_FOR_EXPRS list_terminator newline_list DO compound_list DONE .)
    OR_OR           reduce using rule 82 (arith_for_command -> FOR ARITH_FOR_EXPRS list_terminator newline_list DO compound_list DONE .)
    &               reduce using rule 82 (arith_for_command -> FOR ARITH_FOR_EXPRS list_terminator newline_list DO compound_list DONE .)
    ;               reduce using rule 82 (arith_for_command -> FOR ARITH_FOR_EXPRS list_terminator newline_list DO compound_list DONE .)
    NEWLINE         reduce using rule 82 (arith_for_command -> FOR ARITH_FOR_EXPRS list_terminator newline_list DO compound_list DONE .)
    DO              reduce using rule 82 (arith_for_command -> FOR ARITH_FOR_EXPRS list_terminator newline_list DO compound_list DONE .)
    THEN            reduce using rule 82 (arith_for_command -> FOR ARITH_FOR_EXPRS list_terminator newline_list DO compound_list DONE .)
    }               reduce using rule 82 (arith_for_command -> FOR ARITH_FOR_EXPRS list_terminator newline_list DO compound_list DONE .)
    )               reduce using rule 82 (arith_for_command -> FOR ARITH_FOR_EXPRS list_terminator newline_list DO compound_list DONE .)
    DONE            reduce using rule 82 (arith_for_command -> FOR ARITH_FOR_EXPRS list_terminator newline_list DO compound_list DONE .)
    FI              reduce using rule 82 (arith_for_command -> FOR ARITH_FOR_EXPRS list_terminator newline_list DO compound_list DONE .)
    ELSE            reduce using rule 82 (arith_for_command -> FOR ARITH_FOR_EXPRS list_terminator newline_list DO compound_list DONE .)
    ELIF            reduce using rule 82 (arith_for_command -> FOR ARITH_FOR_EXPRS list_terminator newline_list DO compound_list DONE .)
    SEMI_SEMI       reduce using rule 82 (arith_for_command -> FOR ARITH_FOR_EXPRS list_terminator newline_list DO compound_list DONE .)
    SEMI_AND        reduce using rule 82 (arith_for_command -> FOR ARITH_FOR_EXPRS list_terminator newline_list DO compound_list DONE .)
    SEMI_SEMI_AND   reduce using rule 82 (arith_for_command -> FOR ARITH_FOR_EXPRS list_terminator newline_list DO compound_list DONE .)
    ESAC            reduce using rule 82 (arith_for_command -> FOR ARITH_FOR_EXPRS list_terminator newline_list DO compound_list DONE .)


state 299

    (90) select_command -> SELECT WORD newline_list IN word_list list_terminator newline_list . DO list DONE
    (91) select_command -> SELECT WORD newline_list IN word_list list_terminator newline_list . { list }
    (145) newline_list -> newline_list . NEWLINE

    DO              shift and go to state 321
    {               shift and go to state 320
    NEWLINE         shift and go to state 128


state 300

    (133) list0 -> list1 & . newline_list
    (137) list1 -> list1 & . newline_list list1
    (144) newline_list -> .
    (145) newline_list -> . newline_list NEWLINE

    NEWLINE         reduce using rule 144 (newline_list -> .)
    BANG            reduce using rule 144 (newline_list -> .)
    TIME            reduce using rule 144 (newline_list -> .)
    WHILE           reduce using rule 144 (newline_list -> .)
    UNTIL           reduce using rule 144 (newline_list -> .)
    WORD            reduce using rule 144 (newline_list -> .)
    FUNCTION        reduce using rule 144 (newline_list -> .)
    COPROC          reduce using rule 144 (newline_list -> .)
    ASSIGNMENT_WORD reduce using rule 144 (newline_list -> .)
    FOR             reduce using rule 144 (newline_list -> .)
    CASE            reduce using rule 144 (newline_list -> .)
    SELECT          reduce using rule 144 (newline_list -> .)
    IF              reduce using rule 144 (newline_list -> .)
    (               reduce using rule 144 (newline_list -> .)
    {               reduce using rule 144 (newline_list -> .)
    ARITH_CMD       reduce using rule 144 (newline_list -> .)
    COND_START      reduce using rule 144 (newline_list -> .)
    >               reduce using rule 144 (newline_list -> .)
    <               reduce using rule 144 (newline_list -> .)
    NUMBER          reduce using rule 144 (newline_list -> .)
    REDIR_WORD      reduce using rule 144 (newline_list -> .)
    GREATER_GREATER reduce using rule 144 (newline_list -> .)
    GREATER_BAR     reduce using rule 144 (newline_list -> .)
    LESS_GREATER    reduce using rule 144 (newline_list -> .)
    LESS_LESS       reduce using rule 144 (newline_list -> .)
    LESS_LESS_MINUS reduce using rule 144 (newline_list -> .)
    LESS_LESS_LESS  reduce using rule 144 (newline_list -> .)
    LESS_AND        reduce using rule 144 (newline_list -> .)
    GREATER_AND     reduce using rule 144 (newline_list -> .)
    AND_GREATER     reduce using rule 144 (newline_list -> .)
    AND_GREATER_GREATER reduce using rule 144 (newline_list -> .)
    }               reduce using rule 144 (newline_list -> .)
    DONE            reduce using rule 144 (newline_list -> .)

    newline_list                   shift and go to state 322

state 301

    (134) list0 -> list1 ; . newline_list
    (138) list1 -> list1 ; . newline_list list1
    (144) newline_list -> .
    (145) newline_list -> . newline_list NEWLINE

    NEWLINE         reduce using rule 144 (newline_list -> .)
    BANG            reduce using rule 144 (newline_list -> .)
    TIME            reduce using rule 144 (newline_list -> .)
    WHILE           reduce using rule 144 (newline_list -> .)
    UNTIL           reduce using rule 144 (newline_list -> .)
    WORD            reduce using rule 144 (newline_list -> .)
    FUNCTION        reduce using rule 144 (newline_list -> .)
    COPROC          reduce using rule 144 (newline_list -> .)
    ASSIGNMENT_WORD reduce using rule 144 (newline_list -> .)
    FOR             reduce using rule 144 (newline_list -> .)
    CASE            reduce using rule 144 (newline_list -> .)
    SELECT          reduce using rule 144 (newline_list -> .)
    IF              reduce using rule 144 (newline_list -> .)
    (               reduce using rule 144 (newline_list -> .)
    {               reduce using rule 144 (newline_list -> .)
    ARITH_CMD       reduce using rule 144 (newline_list -> .)
    COND_START      reduce using rule 144 (newline_list -> .)
    >               reduce using rule 144 (newline_list -> .)
    <               reduce using rule 144 (newline_list -> .)
    NUMBER          reduce using rule 144 (newline_list -> .)
    REDIR_WORD      reduce using rule 144 (newline_list -> .)
    GREATER_GREATER reduce using rule 144 (newline_list -> .)
    GREATER_BAR     reduce using rule 144 (newline_list -> .)
    LESS_GREATER    reduce using rule 144 (newline_list -> .)
    LESS_LESS       reduce using rule 144 (newline_list -> .)
    LESS_LESS_MINUS reduce using rule 144 (newline_list -> .)
    LESS_LESS_LESS  reduce using rule 144 (newline_list -> .)
    LESS_AND        reduce using rule 144 (newline_list -> .)
    GREATER_AND     reduce using rule 144 (newline_list -> .)
    AND_GREATER     reduce using rule 144 (newline_list -> .)
    AND_GREATER_GREATER reduce using rule 144 (newline_list -> .)
    }               reduce using rule 144 (newline_list -> .)
    DONE            reduce using rule 144 (newline_list -> .)

    newline_list                   shift and go to state 323

state 302

    (132) list0 -> list1 NEWLINE . newline_list
    (139) list1 -> list1 NEWLINE . newline_list list1
    (144) newline_list -> .
    (145) newline_list -> . newline_list NEWLINE

    NEWLINE         reduce using rule 144 (newline_list -> .)
    BANG            reduce using rule 144 (newline_list -> .)
    TIME            reduce using rule 144 (newline_list -> .)
    WHILE           reduce using rule 144 (newline_list -> .)
    UNTIL           reduce using rule 144 (newline_list -> .)
    WORD            reduce using rule 144 (newline_list -> .)
    FUNCTION        reduce using rule 144 (newline_list -> .)
    COPROC          reduce using rule 144 (newline_list -> .)
    ASSIGNMENT_WORD reduce using rule 144 (newline_list -> .)
    FOR             reduce using rule 144 (newline_list -> .)
    CASE            reduce using rule 144 (newline_list -> .)
    SELECT          reduce using rule 144 (newline_list -> .)
    IF              reduce using rule 144 (newline_list -> .)
    (               reduce using rule 144 (newline_list -> .)
    {               reduce using rule 144 (newline_list -> .)
    ARITH_CMD       reduce using rule 144 (newline_list -> .)
    COND_START      reduce using rule 144 (newline_list -> .)
    >               reduce using rule 144 (newline_list -> .)
    <               reduce using rule 144 (newline_list -> .)
    NUMBER          reduce using rule 144 (newline_list -> .)
    REDIR_WORD      reduce using rule 144 (newline_list -> .)
    GREATER_GREATER reduce using rule 144 (newline_list -> .)
    GREATER_BAR     reduce using rule 144 (newline_list -> .)
    LESS_GREATER    reduce using rule 144 (newline_list -> .)
    LESS_LESS       reduce using rule 144 (newline_list -> .)
    LESS_LESS_MINUS reduce using rule 144 (newline_list -> .)
    LESS_LESS_LESS  reduce using rule 144 (newline_list -> .)
    LESS_AND        reduce using rule 144 (newline_list -> .)
    GREATER_AND     reduce using rule 144 (newline_list -> .)
    AND_GREATER     reduce using rule 144 (newline_list -> .)
    AND_GREATER_GREATER reduce using rule 144 (newline_list -> .)
    }               reduce using rule 144 (newline_list -> .)
    DONE            reduce using rule 144 (newline_list -> .)

    newline_list                   shift and go to state 324

state 303

    (89) select_command -> SELECT WORD ; newline_list { list } .

    >               reduce using rule 89 (select_command -> SELECT WORD ; newline_list { list } .)
    <               reduce using rule 89 (select_command -> SELECT WORD ; newline_list { list } .)
    NUMBER          reduce using rule 89 (select_command -> SELECT WORD ; newline_list { list } .)
    REDIR_WORD      reduce using rule 89 (select_command -> SELECT WORD ; newline_list { list } .)
    GREATER_GREATER reduce using rule 89 (select_command -> SELECT WORD ; newline_list { list } .)
    GREATER_BAR     reduce using rule 89 (select_command -> SELECT WORD ; newline_list { list } .)
    LESS_GREATER    reduce using rule 89 (select_command -> SELECT WORD ; newline_list { list } .)
    LESS_LESS       reduce using rule 89 (select_command -> SELECT WORD ; newline_list { list } .)
    LESS_LESS_MINUS reduce using rule 89 (select_command -> SELECT WORD ; newline_list { list } .)
    LESS_LESS_LESS  reduce using rule 89 (select_command -> SELECT WORD ; newline_list { list } .)
    LESS_AND        reduce using rule 89 (select_command -> SELECT WORD ; newline_list { list } .)
    GREATER_AND     reduce using rule 89 (select_command -> SELECT WORD ; newline_list { list } .)
    AND_GREATER     reduce using rule 89 (select_command -> SELECT WORD ; newline_list { list } .)
    AND_GREATER_GREATER reduce using rule 89 (select_command -> SELECT WORD ; newline_list { list } .)
    |               reduce using rule 89 (select_command -> SELECT WORD ; newline_list { list } .)
    BAR_AND         reduce using rule 89 (select_command -> SELECT WORD ; newline_list { list } .)
    &               reduce using rule 89 (select_command -> SELECT WORD ; newline_list { list } .)
    ;               reduce using rule 89 (select_command -> SELECT WORD ; newline_list { list } .)
    AND_AND         reduce using rule 89 (select_command -> SELECT WORD ; newline_list { list } .)
    OR_OR           reduce using rule 89 (select_command -> SELECT WORD ; newline_list { list } .)
    NEWLINE         reduce using rule 89 (select_command -> SELECT WORD ; newline_list { list } .)
    DO              reduce using rule 89 (select_command -> SELECT WORD ; newline_list { list } .)
    THEN            reduce using rule 89 (select_command -> SELECT WORD ; newline_list { list } .)
    }               reduce using rule 89 (select_command -> SELECT WORD ; newline_list { list } .)
    )               reduce using rule 89 (select_command -> SELECT WORD ; newline_list { list } .)
    DONE            reduce using rule 89 (select_command -> SELECT WORD ; newline_list { list } .)
    FI              reduce using rule 89 (select_command -> SELECT WORD ; newline_list { list } .)
    ELSE            reduce using rule 89 (select_command -> SELECT WORD ; newline_list { list } .)
    ELIF            reduce using rule 89 (select_command -> SELECT WORD ; newline_list { list } .)
    SEMI_SEMI       reduce using rule 89 (select_command -> SELECT WORD ; newline_list { list } .)
    SEMI_AND        reduce using rule 89 (select_command -> SELECT WORD ; newline_list { list } .)
    SEMI_SEMI_AND   reduce using rule 89 (select_command -> SELECT WORD ; newline_list { list } .)
    ESAC            reduce using rule 89 (select_command -> SELECT WORD ; newline_list { list } .)


state 304

    (88) select_command -> SELECT WORD ; newline_list DO list DONE .

    >               reduce using rule 88 (select_command -> SELECT WORD ; newline_list DO list DONE .)
    <               reduce using rule 88 (select_command -> SELECT WORD ; newline_list DO list DONE .)
    NUMBER          reduce using rule 88 (select_command -> SELECT WORD ; newline_list DO list DONE .)
    REDIR_WORD      reduce using rule 88 (select_command -> SELECT WORD ; newline_list DO list DONE .)
    GREATER_GREATER reduce using rule 88 (select_command -> SELECT WORD ; newline_list DO list DONE .)
    GREATER_BAR     reduce using rule 88 (select_command -> SELECT WORD ; newline_list DO list DONE .)
    LESS_GREATER    reduce using rule 88 (select_command -> SELECT WORD ; newline_list DO list DONE .)
    LESS_LESS       reduce using rule 88 (select_command -> SELECT WORD ; newline_list DO list DONE .)
    LESS_LESS_MINUS reduce using rule 88 (select_command -> SELECT WORD ; newline_list DO list DONE .)
    LESS_LESS_LESS  reduce using rule 88 (select_command -> SELECT WORD ; newline_list DO list DONE .)
    LESS_AND        reduce using rule 88 (select_command -> SELECT WORD ; newline_list DO list DONE .)
    GREATER_AND     reduce using rule 88 (select_command -> SELECT WORD ; newline_list DO list DONE .)
    AND_GREATER     reduce using rule 88 (select_command -> SELECT WORD ; newline_list DO list DONE .)
    AND_GREATER_GREATER reduce using rule 88 (select_command -> SELECT WORD ; newline_list DO list DONE .)
    |               reduce using rule 88 (select_command -> SELECT WORD ; newline_list DO list DONE .)
    BAR_AND         reduce using rule 88 (select_command -> SELECT WORD ; newline_list DO list DONE .)
    &               reduce using rule 88 (select_command -> SELECT WORD ; newline_list DO list DONE .)
    ;               reduce using rule 88 (select_command -> SELECT WORD ; newline_list DO list DONE .)
    AND_AND         reduce using rule 88 (select_command -> SELECT WORD ; newline_list DO list DONE .)
    OR_OR           reduce using rule 88 (select_command -> SELECT WORD ; newline_list DO list DONE .)
    NEWLINE         reduce using rule 88 (select_command -> SELECT WORD ; newline_list DO list DONE .)
    DO              reduce using rule 88 (select_command -> SELECT WORD ; newline_list DO list DONE .)
    THEN            reduce using rule 88 (select_command -> SELECT WORD ; newline_list DO list DONE .)
    }               reduce using rule 88 (select_command -> SELECT WORD ; newline_list DO list DONE .)
    )               reduce using rule 88 (select_command -> SELECT WORD ; newline_list DO list DONE .)
    DONE            reduce using rule 88 (select_command -> SELECT WORD ; newline_list DO list DONE .)
    FI              reduce using rule 88 (select_command -> SELECT WORD ; newline_list DO list DONE .)
    ELSE            reduce using rule 88 (select_command -> SELECT WORD ; newline_list DO list DONE .)
    ELIF            reduce using rule 88 (select_command -> SELECT WORD ; newline_list DO list DONE .)
    SEMI_SEMI       reduce using rule 88 (select_command -> SELECT WORD ; newline_list DO list DONE .)
    SEMI_AND        reduce using rule 88 (select_command -> SELECT WORD ; newline_list DO list DONE .)
    SEMI_SEMI_AND   reduce using rule 88 (select_command -> SELECT WORD ; newline_list DO list DONE .)
    ESAC            reduce using rule 88 (select_command -> SELECT WORD ; newline_list DO list DONE .)


state 305

    (128) pattern -> pattern | . WORD

    WORD            shift and go to state 325


state 306

    (117) pattern_list -> newline_list pattern ) . compound_list
    (118) pattern_list -> newline_list pattern ) . newline_list
    (130) compound_list -> . list
    (131) compound_list -> . newline_list list1
    (144) newline_list -> .
    (145) newline_list -> . newline_list NEWLINE
    (129) list -> . newline_list list0

    NEWLINE         reduce using rule 144 (newline_list -> .)
    BANG            reduce using rule 144 (newline_list -> .)
    TIME            reduce using rule 144 (newline_list -> .)
    WHILE           reduce using rule 144 (newline_list -> .)
    UNTIL           reduce using rule 144 (newline_list -> .)
    WORD            reduce using rule 144 (newline_list -> .)
    FUNCTION        reduce using rule 144 (newline_list -> .)
    COPROC          reduce using rule 144 (newline_list -> .)
    ASSIGNMENT_WORD reduce using rule 144 (newline_list -> .)
    FOR             reduce using rule 144 (newline_list -> .)
    CASE            reduce using rule 144 (newline_list -> .)
    SELECT          reduce using rule 144 (newline_list -> .)
    IF              reduce using rule 144 (newline_list -> .)
    (               reduce using rule 144 (newline_list -> .)
    {               reduce using rule 144 (newline_list -> .)
    ARITH_CMD       reduce using rule 144 (newline_list -> .)
    COND_START      reduce using rule 144 (newline_list -> .)
    >               reduce using rule 144 (newline_list -> .)
    <               reduce using rule 144 (newline_list -> .)
    NUMBER          reduce using rule 144 (newline_list -> .)
    REDIR_WORD      reduce using rule 144 (newline_list -> .)
    GREATER_GREATER reduce using rule 144 (newline_list -> .)
    GREATER_BAR     reduce using rule 144 (newline_list -> .)
    LESS_GREATER    reduce using rule 144 (newline_list -> .)
    LESS_LESS       reduce using rule 144 (newline_list -> .)
    LESS_LESS_MINUS reduce using rule 144 (newline_list -> .)
    LESS_LESS_LESS  reduce using rule 144 (newline_list -> .)
    LESS_AND        reduce using rule 144 (newline_list -> .)
    GREATER_AND     reduce using rule 144 (newline_list -> .)
    AND_GREATER     reduce using rule 144 (newline_list -> .)
    AND_GREATER_GREATER reduce using rule 144 (newline_list -> .)
    SEMI_SEMI       reduce using rule 144 (newline_list -> .)
    SEMI_AND        reduce using rule 144 (newline_list -> .)
    SEMI_SEMI_AND   reduce using rule 144 (newline_list -> .)
    ESAC            reduce using rule 144 (newline_list -> .)

    newline_list                   shift and go to state 326
    compound_list                  shift and go to state 327
    list                           shift and go to state 58

state 307

    (119) pattern_list -> newline_list ( pattern . ) compound_list
    (120) pattern_list -> newline_list ( pattern . ) newline_list
    (128) pattern -> pattern . | WORD

    )               shift and go to state 328
    |               shift and go to state 305


state 308

    (93) case_command -> CASE WORD newline_list IN case_clause_sequence newline_list ESAC .

    >               reduce using rule 93 (case_command -> CASE WORD newline_list IN case_clause_sequence newline_list ESAC .)
    <               reduce using rule 93 (case_command -> CASE WORD newline_list IN case_clause_sequence newline_list ESAC .)
    NUMBER          reduce using rule 93 (case_command -> CASE WORD newline_list IN case_clause_sequence newline_list ESAC .)
    REDIR_WORD      reduce using rule 93 (case_command -> CASE WORD newline_list IN case_clause_sequence newline_list ESAC .)
    GREATER_GREATER reduce using rule 93 (case_command -> CASE WORD newline_list IN case_clause_sequence newline_list ESAC .)
    GREATER_BAR     reduce using rule 93 (case_command -> CASE WORD newline_list IN case_clause_sequence newline_list ESAC .)
    LESS_GREATER    reduce using rule 93 (case_command -> CASE WORD newline_list IN case_clause_sequence newline_list ESAC .)
    LESS_LESS       reduce using rule 93 (case_command -> CASE WORD newline_list IN case_clause_sequence newline_list ESAC .)
    LESS_LESS_MINUS reduce using rule 93 (case_command -> CASE WORD newline_list IN case_clause_sequence newline_list ESAC .)
    LESS_LESS_LESS  reduce using rule 93 (case_command -> CASE WORD newline_list IN case_clause_sequence newline_list ESAC .)
    LESS_AND        reduce using rule 93 (case_command -> CASE WORD newline_list IN case_clause_sequence newline_list ESAC .)
    GREATER_AND     reduce using rule 93 (case_command -> CASE WORD newline_list IN case_clause_sequence newline_list ESAC .)
    AND_GREATER     reduce using rule 93 (case_command -> CASE WORD newline_list IN case_clause_sequence newline_list ESAC .)
    AND_GREATER_GREATER reduce using rule 93 (case_command -> CASE WORD newline_list IN case_clause_sequence newline_list ESAC .)
    |               reduce using rule 93 (case_command -> CASE WORD newline_list IN case_clause_sequence newline_list ESAC .)
    BAR_AND         reduce using rule 93 (case_command -> CASE WORD newline_list IN case_clause_sequence newline_list ESAC .)
    &               reduce using rule 93 (case_command -> CASE WORD newline_list IN case_clause_sequence newline_list ESAC .)
    ;               reduce using rule 93 (case_command -> CASE WORD newline_list IN case_clause_sequence newline_list ESAC .)
    AND_AND         reduce using rule 93 (case_command -> CASE WORD newline_list IN case_clause_sequence newline_list ESAC .)
    OR_OR           reduce using rule 93 (case_command -> CASE WORD newline_list IN case_clause_sequence newline_list ESAC .)
    NEWLINE         reduce using rule 93 (case_command -> CASE WORD newline_list IN case_clause_sequence newline_list ESAC .)
    DO              reduce using rule 93 (case_command -> CASE WORD newline_list IN case_clause_sequence newline_list ESAC .)
    THEN            reduce using rule 93 (case_command -> CASE WORD newline_list IN case_clause_sequence newline_list ESAC .)
    }               reduce using rule 93 (case_command -> CASE WORD newline_list IN case_clause_sequence newline_list ESAC .)
    )               reduce using rule 93 (case_command -> CASE WORD newline_list IN case_clause_sequence newline_list ESAC .)
    DONE            reduce using rule 93 (case_command -> CASE WORD newline_list IN case_clause_sequence newline_list ESAC .)
    FI              reduce using rule 93 (case_command -> CASE WORD newline_list IN case_clause_sequence newline_list ESAC .)
    ELSE            reduce using rule 93 (case_command -> CASE WORD newline_list IN case_clause_sequence newline_list ESAC .)
    ELIF            reduce using rule 93 (case_command -> CASE WORD newline_list IN case_clause_sequence newline_list ESAC .)
    SEMI_SEMI       reduce using rule 93 (case_command -> CASE WORD newline_list IN case_clause_sequence newline_list ESAC .)
    SEMI_AND        reduce using rule 93 (case_command -> CASE WORD newline_list IN case_clause_sequence newline_list ESAC .)
    SEMI_SEMI_AND   reduce using rule 93 (case_command -> CASE WORD newline_list IN case_clause_sequence newline_list ESAC .)
    ESAC            reduce using rule 93 (case_command -> CASE WORD newline_list IN case_clause_sequence newline_list ESAC .)


state 309

    (126) case_clause_sequence -> case_clause_sequence pattern_list SEMI_SEMI_AND .

    ESAC            reduce using rule 126 (case_clause_sequence -> case_clause_sequence pattern_list SEMI_SEMI_AND .)
    NEWLINE         reduce using rule 126 (case_clause_sequence -> case_clause_sequence pattern_list SEMI_SEMI_AND .)
    (               reduce using rule 126 (case_clause_sequence -> case_clause_sequence pattern_list SEMI_SEMI_AND .)
    WORD            reduce using rule 126 (case_clause_sequence -> case_clause_sequence pattern_list SEMI_SEMI_AND .)


state 310

    (124) case_clause_sequence -> case_clause_sequence pattern_list SEMI_AND .

    ESAC            reduce using rule 124 (case_clause_sequence -> case_clause_sequence pattern_list SEMI_AND .)
    NEWLINE         reduce using rule 124 (case_clause_sequence -> case_clause_sequence pattern_list SEMI_AND .)
    (               reduce using rule 124 (case_clause_sequence -> case_clause_sequence pattern_list SEMI_AND .)
    WORD            reduce using rule 124 (case_clause_sequence -> case_clause_sequence pattern_list SEMI_AND .)


state 311

    (122) case_clause_sequence -> case_clause_sequence pattern_list SEMI_SEMI .

    ESAC            reduce using rule 122 (case_clause_sequence -> case_clause_sequence pattern_list SEMI_SEMI .)
    NEWLINE         reduce using rule 122 (case_clause_sequence -> case_clause_sequence pattern_list SEMI_SEMI .)
    (               reduce using rule 122 (case_clause_sequence -> case_clause_sequence pattern_list SEMI_SEMI .)
    WORD            reduce using rule 122 (case_clause_sequence -> case_clause_sequence pattern_list SEMI_SEMI .)


state 312

    (137) list1 -> list1 & newline_list . list1
    (145) newline_list -> newline_list . NEWLINE
    (135) list1 -> . list1 AND_AND newline_list list1
    (136) list1 -> . list1 OR_OR newline_list list1
    (137) list1 -> . list1 & newline_list list1
    (138) list1 -> . list1 ; newline_list list1
    (139) list1 -> . list1 NEWLINE newline_list list1
    (140) list1 -> . pipeline_command
    (154) pipeline_command -> . pipeline
    (155) pipeline_command -> . BANG pipeline_command
    (156) pipeline_command -> . timespec pipeline_command
    (157) pipeline_command -> . timespec list_terminator
    (158) pipeline_command -> . BANG list_terminator
    (159) pipeline -> . pipeline | newline_list pipeline
    (160) pipeline -> . pipeline BAR_AND newline_list pipeline
    (161) pipeline -> . command
    (162) timespec -> . TIME
    (163) timespec -> . TIME TIMEOPT
    (164) timespec -> . TIME TIMEOPT TIMEIGN
    (58) command -> . simple_command
    (59) command -> . shell_command
    (60) command -> . shell_command redirection_list
    (61) command -> . function_def
    (62) command -> . coproc
    (56) simple_command -> . simple_command_element
    (57) simple_command -> . simple_command simple_command_element
    (63) shell_command -> . for_command
    (64) shell_command -> . case_command
    (65) shell_command -> . WHILE compound_list DO compound_list DONE
    (66) shell_command -> . UNTIL compound_list DO compound_list DONE
    (67) shell_command -> . select_command
    (68) shell_command -> . if_command
    (69) shell_command -> . subshell
    (70) shell_command -> . group_command
    (71) shell_command -> . arith_command
    (72) shell_command -> . cond_command
    (73) shell_command -> . arith_for_command
    (95) function_def -> . WORD ( ) newline_list function_body
    (96) function_def -> . FUNCTION WORD ( ) newline_list function_body
    (97) function_def -> . FUNCTION WORD newline_list function_body
    (101) coproc -> . COPROC shell_command
    (102) coproc -> . COPROC shell_command redirection_list
    (103) coproc -> . COPROC WORD shell_command
    (104) coproc -> . COPROC WORD shell_command redirection_list
    (105) coproc -> . COPROC simple_command
    (51) simple_command_element -> . WORD
    (52) simple_command_element -> . ASSIGNMENT_WORD
    (53) simple_command_element -> . redirection
    (74) for_command -> . FOR WORD newline_list DO compound_list DONE
    (75) for_command -> . FOR WORD newline_list { compound_list }
    (76) for_command -> . FOR WORD ; newline_list DO compound_list DONE
    (77) for_command -> . FOR WORD ; newline_list { compound_list }
    (78) for_command -> . FOR WORD newline_list IN word_list list_terminator newline_list DO compound_list DONE
    (79) for_command -> . FOR WORD newline_list IN word_list list_terminator newline_list { compound_list }
    (80) for_command -> . FOR WORD newline_list IN list_terminator newline_list DO compound_list DONE
    (81) for_command -> . FOR WORD newline_list IN list_terminator newline_list { compound_list }
    (92) case_command -> . CASE WORD newline_list IN newline_list ESAC
    (93) case_command -> . CASE WORD newline_list IN case_clause_sequence newline_list ESAC
    (94) case_command -> . CASE WORD newline_list IN case_clause ESAC
    (86) select_command -> . SELECT WORD newline_list DO list DONE
    (87) select_command -> . SELECT WORD newline_list { list }
    (88) select_command -> . SELECT WORD ; newline_list DO list DONE
    (89) select_command -> . SELECT WORD ; newline_list { list }
    (90) select_command -> . SELECT WORD newline_list IN word_list list_terminator newline_list DO list DONE
    (91) select_command -> . SELECT WORD newline_list IN word_list list_terminator newline_list { list }
    (106) if_command -> . IF compound_list THEN compound_list FI
    (107) if_command -> . IF compound_list THEN compound_list ELSE compound_list FI
    (108) if_command -> . IF compound_list THEN compound_list elif_clause FI
    (100) subshell -> . ( compound_list )
    (109) group_command -> . { compound_list }
    (110) arith_command -> . ARITH_CMD
    (111) cond_command -> . COND_START COND_CMD COND_END
    (82) arith_for_command -> . FOR ARITH_FOR_EXPRS list_terminator newline_list DO compound_list DONE
    (83) arith_for_command -> . FOR ARITH_FOR_EXPRS list_terminator newline_list { compound_list }
    (84) arith_for_command -> . FOR ARITH_FOR_EXPRS DO compound_list DONE
    (85) arith_for_command -> . FOR ARITH_FOR_EXPRS { compound_list }
    (7) redirection -> . > WORD
    (8) redirection -> . < WORD
    (9) redirection -> . NUMBER > WORD
    (10) redirection -> . NUMBER < WORD
    (11) redirection -> . REDIR_WORD > WORD
    (12) redirection -> . REDIR_WORD < WORD
    (13) redirection -> . GREATER_GREATER WORD
    (14) redirection -> . NUMBER GREATER_GREATER WORD
    (15) redirection -> . REDIR_WORD GREATER_GREATER WORD
    (16) redirection -> . GREATER_BAR WORD
    (17) redirection -> . NUMBER GREATER_BAR WORD
    (18) redirection -> . REDIR_WORD GREATER_BAR WORD
    (19) redirection -> . LESS_GREATER WORD
    (20) redirection -> . NUMBER LESS_GREATER WORD
    (21) redirection -> . REDIR_WORD LESS_GREATER WORD
    (22) redirection -> . LESS_LESS WORD
    (23) redirection -> . NUMBER LESS_LESS WORD
    (24) redirection -> . REDIR_WORD LESS_LESS WORD
    (25) redirection -> . LESS_LESS_MINUS WORD
    (26) redirection -> . NUMBER LESS_LESS_MINUS WORD
    (27) redirection -> . REDIR_WORD LESS_LESS_MINUS WORD
    (28) redirection -> . LESS_LESS_LESS WORD
    (29) redirection -> . NUMBER LESS_LESS_LESS WORD
    (30) redirection -> . REDIR_WORD LESS_LESS_LESS WORD
    (31) redirection -> . LESS_AND NUMBER
    (32) redirection -> . NUMBER LESS_AND NUMBER
    (33) redirection -> . REDIR_WORD LESS_AND NUMBER
    (34) redirection -> . GREATER_AND NUMBER
    (35) redirection -> . NUMBER GREATER_AND NUMBER
    (36) redirection -> . REDIR_WORD GREATER_AND NUMBER
    (37) redirection -> . LESS_AND WORD
    (38) redirection -> . NUMBER LESS_AND WORD
    (39) redirection -> . REDIR_WORD LESS_AND WORD
    (40) redirection -> . GREATER_AND WORD
    (41) redirection -> . NUMBER GREATER_AND WORD
    (42) redirection -> . REDIR_WORD GREATER_AND WORD
    (43) redirection -> . GREATER_AND -
    (44) redirection -> . NUMBER GREATER_AND -
    (45) redirection -> . REDIR_WORD GREATER_AND -
    (46) redirection -> . LESS_AND -
    (47) redirection -> . NUMBER LESS_AND -
    (48) redirection -> . REDIR_WORD LESS_AND -
    (49) redirection -> . AND_GREATER WORD
    (50) redirection -> . AND_GREATER_GREATER WORD

    NEWLINE         shift and go to state 128
    BANG            shift and go to state 32
    TIME            shift and go to state 48
    WHILE           shift and go to state 34
    UNTIL           shift and go to state 4
    WORD            shift and go to state 53
    FUNCTION        shift and go to state 49
    COPROC          shift and go to state 44
    ASSIGNMENT_WORD shift and go to state 26
    FOR             shift and go to state 31
    CASE            shift and go to state 51
    SELECT          shift and go to state 39
    IF              shift and go to state 5
    (               shift and go to state 36
    {               shift and go to state 19
    ARITH_CMD       shift and go to state 46
    COND_START      shift and go to state 22
    >               shift and go to state 41
    <               shift and go to state 40
    NUMBER          shift and go to state 9
    REDIR_WORD      shift and go to state 7
    GREATER_GREATER shift and go to state 28
    GREATER_BAR     shift and go to state 11
    LESS_GREATER    shift and go to state 33
    LESS_LESS       shift and go to state 3
    LESS_LESS_MINUS shift and go to state 18
    LESS_LESS_LESS  shift and go to state 14
    LESS_AND        shift and go to state 17
    GREATER_AND     shift and go to state 47
    AND_GREATER     shift and go to state 45
    AND_GREATER_GREATER shift and go to state 37

    command                        shift and go to state 23
    select_command                 shift and go to state 6
    for_command                    shift and go to state 43
    shell_command                  shift and go to state 25
    simple_command_element         shift and go to state 2
    coproc                         shift and go to state 10
    simple_command                 shift and go to state 27
    pipeline_command               shift and go to state 131
    cond_command                   shift and go to state 30
    timespec                       shift and go to state 24
    arith_for_command              shift and go to state 15
    arith_command                  shift and go to state 16
    list1                          shift and go to state 254
    group_command                  shift and go to state 20
    redirection                    shift and go to state 50
    subshell                       shift and go to state 21
    pipeline                       shift and go to state 52
    case_command                   shift and go to state 35
    if_command                     shift and go to state 38
    function_def                   shift and go to state 1

state 313

    (138) list1 -> list1 ; newline_list . list1
    (145) newline_list -> newline_list . NEWLINE
    (135) list1 -> . list1 AND_AND newline_list list1
    (136) list1 -> . list1 OR_OR newline_list list1
    (137) list1 -> . list1 & newline_list list1
    (138) list1 -> . list1 ; newline_list list1
    (139) list1 -> . list1 NEWLINE newline_list list1
    (140) list1 -> . pipeline_command
    (154) pipeline_command -> . pipeline
    (155) pipeline_command -> . BANG pipeline_command
    (156) pipeline_command -> . timespec pipeline_command
    (157) pipeline_command -> . timespec list_terminator
    (158) pipeline_command -> . BANG list_terminator
    (159) pipeline -> . pipeline | newline_list pipeline
    (160) pipeline -> . pipeline BAR_AND newline_list pipeline
    (161) pipeline -> . command
    (162) timespec -> . TIME
    (163) timespec -> . TIME TIMEOPT
    (164) timespec -> . TIME TIMEOPT TIMEIGN
    (58) command -> . simple_command
    (59) command -> . shell_command
    (60) command -> . shell_command redirection_list
    (61) command -> . function_def
    (62) command -> . coproc
    (56) simple_command -> . simple_command_element
    (57) simple_command -> . simple_command simple_command_element
    (63) shell_command -> . for_command
    (64) shell_command -> . case_command
    (65) shell_command -> . WHILE compound_list DO compound_list DONE
    (66) shell_command -> . UNTIL compound_list DO compound_list DONE
    (67) shell_command -> . select_command
    (68) shell_command -> . if_command
    (69) shell_command -> . subshell
    (70) shell_command -> . group_command
    (71) shell_command -> . arith_command
    (72) shell_command -> . cond_command
    (73) shell_command -> . arith_for_command
    (95) function_def -> . WORD ( ) newline_list function_body
    (96) function_def -> . FUNCTION WORD ( ) newline_list function_body
    (97) function_def -> . FUNCTION WORD newline_list function_body
    (101) coproc -> . COPROC shell_command
    (102) coproc -> . COPROC shell_command redirection_list
    (103) coproc -> . COPROC WORD shell_command
    (104) coproc -> . COPROC WORD shell_command redirection_list
    (105) coproc -> . COPROC simple_command
    (51) simple_command_element -> . WORD
    (52) simple_command_element -> . ASSIGNMENT_WORD
    (53) simple_command_element -> . redirection
    (74) for_command -> . FOR WORD newline_list DO compound_list DONE
    (75) for_command -> . FOR WORD newline_list { compound_list }
    (76) for_command -> . FOR WORD ; newline_list DO compound_list DONE
    (77) for_command -> . FOR WORD ; newline_list { compound_list }
    (78) for_command -> . FOR WORD newline_list IN word_list list_terminator newline_list DO compound_list DONE
    (79) for_command -> . FOR WORD newline_list IN word_list list_terminator newline_list { compound_list }
    (80) for_command -> . FOR WORD newline_list IN list_terminator newline_list DO compound_list DONE
    (81) for_command -> . FOR WORD newline_list IN list_terminator newline_list { compound_list }
    (92) case_command -> . CASE WORD newline_list IN newline_list ESAC
    (93) case_command -> . CASE WORD newline_list IN case_clause_sequence newline_list ESAC
    (94) case_command -> . CASE WORD newline_list IN case_clause ESAC
    (86) select_command -> . SELECT WORD newline_list DO list DONE
    (87) select_command -> . SELECT WORD newline_list { list }
    (88) select_command -> . SELECT WORD ; newline_list DO list DONE
    (89) select_command -> . SELECT WORD ; newline_list { list }
    (90) select_command -> . SELECT WORD newline_list IN word_list list_terminator newline_list DO list DONE
    (91) select_command -> . SELECT WORD newline_list IN word_list list_terminator newline_list { list }
    (106) if_command -> . IF compound_list THEN compound_list FI
    (107) if_command -> . IF compound_list THEN compound_list ELSE compound_list FI
    (108) if_command -> . IF compound_list THEN compound_list elif_clause FI
    (100) subshell -> . ( compound_list )
    (109) group_command -> . { compound_list }
    (110) arith_command -> . ARITH_CMD
    (111) cond_command -> . COND_START COND_CMD COND_END
    (82) arith_for_command -> . FOR ARITH_FOR_EXPRS list_terminator newline_list DO compound_list DONE
    (83) arith_for_command -> . FOR ARITH_FOR_EXPRS list_terminator newline_list { compound_list }
    (84) arith_for_command -> . FOR ARITH_FOR_EXPRS DO compound_list DONE
    (85) arith_for_command -> . FOR ARITH_FOR_EXPRS { compound_list }
    (7) redirection -> . > WORD
    (8) redirection -> . < WORD
    (9) redirection -> . NUMBER > WORD
    (10) redirection -> . NUMBER < WORD
    (11) redirection -> . REDIR_WORD > WORD
    (12) redirection -> . REDIR_WORD < WORD
    (13) redirection -> . GREATER_GREATER WORD
    (14) redirection -> . NUMBER GREATER_GREATER WORD
    (15) redirection -> . REDIR_WORD GREATER_GREATER WORD
    (16) redirection -> . GREATER_BAR WORD
    (17) redirection -> . NUMBER GREATER_BAR WORD
    (18) redirection -> . REDIR_WORD GREATER_BAR WORD
    (19) redirection -> . LESS_GREATER WORD
    (20) redirection -> . NUMBER LESS_GREATER WORD
    (21) redirection -> . REDIR_WORD LESS_GREATER WORD
    (22) redirection -> . LESS_LESS WORD
    (23) redirection -> . NUMBER LESS_LESS WORD
    (24) redirection -> . REDIR_WORD LESS_LESS WORD
    (25) redirection -> . LESS_LESS_MINUS WORD
    (26) redirection -> . NUMBER LESS_LESS_MINUS WORD
    (27) redirection -> . REDIR_WORD LESS_LESS_MINUS WORD
    (28) redirection -> . LESS_LESS_LESS WORD
    (29) redirection -> . NUMBER LESS_LESS_LESS WORD
    (30) redirection -> . REDIR_WORD LESS_LESS_LESS WORD
    (31) redirection -> . LESS_AND NUMBER
    (32) redirection -> . NUMBER LESS_AND NUMBER
    (33) redirection -> . REDIR_WORD LESS_AND NUMBER
    (34) redirection -> . GREATER_AND NUMBER
    (35) redirection -> . NUMBER GREATER_AND NUMBER
    (36) redirection -> . REDIR_WORD GREATER_AND NUMBER
    (37) redirection -> . LESS_AND WORD
    (38) redirection -> . NUMBER LESS_AND WORD
    (39) redirection -> . REDIR_WORD LESS_AND WORD
    (40) redirection -> . GREATER_AND WORD
    (41) redirection -> . NUMBER GREATER_AND WORD
    (42) redirection -> . REDIR_WORD GREATER_AND WORD
    (43) redirection -> . GREATER_AND -
    (44) redirection -> . NUMBER GREATER_AND -
    (45) redirection -> . REDIR_WORD GREATER_AND -
    (46) redirection -> . LESS_AND -
    (47) redirection -> . NUMBER LESS_AND -
    (48) redirection -> . REDIR_WORD LESS_AND -
    (49) redirection -> . AND_GREATER WORD
    (50) redirection -> . AND_GREATER_GREATER WORD

    NEWLINE         shift and go to state 128
    BANG            shift and go to state 32
    TIME            shift and go to state 48
    WHILE           shift and go to state 34
    UNTIL           shift and go to state 4
    WORD            shift and go to state 53
    FUNCTION        shift and go to state 49
    COPROC          shift and go to state 44
    ASSIGNMENT_WORD shift and go to state 26
    FOR             shift and go to state 31
    CASE            shift and go to state 51
    SELECT          shift and go to state 39
    IF              shift and go to state 5
    (               shift and go to state 36
    {               shift and go to state 19
    ARITH_CMD       shift and go to state 46
    COND_START      shift and go to state 22
    >               shift and go to state 41
    <               shift and go to state 40
    NUMBER          shift and go to state 9
    REDIR_WORD      shift and go to state 7
    GREATER_GREATER shift and go to state 28
    GREATER_BAR     shift and go to state 11
    LESS_GREATER    shift and go to state 33
    LESS_LESS       shift and go to state 3
    LESS_LESS_MINUS shift and go to state 18
    LESS_LESS_LESS  shift and go to state 14
    LESS_AND        shift and go to state 17
    GREATER_AND     shift and go to state 47
    AND_GREATER     shift and go to state 45
    AND_GREATER_GREATER shift and go to state 37

    command                        shift and go to state 23
    select_command                 shift and go to state 6
    for_command                    shift and go to state 43
    shell_command                  shift and go to state 25
    simple_command_element         shift and go to state 2
    coproc                         shift and go to state 10
    simple_command                 shift and go to state 27
    pipeline_command               shift and go to state 131
    cond_command                   shift and go to state 30
    timespec                       shift and go to state 24
    arith_for_command              shift and go to state 15
    arith_command                  shift and go to state 16
    list1                          shift and go to state 256
    group_command                  shift and go to state 20
    redirection                    shift and go to state 50
    subshell                       shift and go to state 21
    pipeline                       shift and go to state 52
    case_command                   shift and go to state 35
    if_command                     shift and go to state 38
    function_def                   shift and go to state 1

state 314

    (139) list1 -> list1 NEWLINE newline_list . list1
    (145) newline_list -> newline_list . NEWLINE
    (135) list1 -> . list1 AND_AND newline_list list1
    (136) list1 -> . list1 OR_OR newline_list list1
    (137) list1 -> . list1 & newline_list list1
    (138) list1 -> . list1 ; newline_list list1
    (139) list1 -> . list1 NEWLINE newline_list list1
    (140) list1 -> . pipeline_command
    (154) pipeline_command -> . pipeline
    (155) pipeline_command -> . BANG pipeline_command
    (156) pipeline_command -> . timespec pipeline_command
    (157) pipeline_command -> . timespec list_terminator
    (158) pipeline_command -> . BANG list_terminator
    (159) pipeline -> . pipeline | newline_list pipeline
    (160) pipeline -> . pipeline BAR_AND newline_list pipeline
    (161) pipeline -> . command
    (162) timespec -> . TIME
    (163) timespec -> . TIME TIMEOPT
    (164) timespec -> . TIME TIMEOPT TIMEIGN
    (58) command -> . simple_command
    (59) command -> . shell_command
    (60) command -> . shell_command redirection_list
    (61) command -> . function_def
    (62) command -> . coproc
    (56) simple_command -> . simple_command_element
    (57) simple_command -> . simple_command simple_command_element
    (63) shell_command -> . for_command
    (64) shell_command -> . case_command
    (65) shell_command -> . WHILE compound_list DO compound_list DONE
    (66) shell_command -> . UNTIL compound_list DO compound_list DONE
    (67) shell_command -> . select_command
    (68) shell_command -> . if_command
    (69) shell_command -> . subshell
    (70) shell_command -> . group_command
    (71) shell_command -> . arith_command
    (72) shell_command -> . cond_command
    (73) shell_command -> . arith_for_command
    (95) function_def -> . WORD ( ) newline_list function_body
    (96) function_def -> . FUNCTION WORD ( ) newline_list function_body
    (97) function_def -> . FUNCTION WORD newline_list function_body
    (101) coproc -> . COPROC shell_command
    (102) coproc -> . COPROC shell_command redirection_list
    (103) coproc -> . COPROC WORD shell_command
    (104) coproc -> . COPROC WORD shell_command redirection_list
    (105) coproc -> . COPROC simple_command
    (51) simple_command_element -> . WORD
    (52) simple_command_element -> . ASSIGNMENT_WORD
    (53) simple_command_element -> . redirection
    (74) for_command -> . FOR WORD newline_list DO compound_list DONE
    (75) for_command -> . FOR WORD newline_list { compound_list }
    (76) for_command -> . FOR WORD ; newline_list DO compound_list DONE
    (77) for_command -> . FOR WORD ; newline_list { compound_list }
    (78) for_command -> . FOR WORD newline_list IN word_list list_terminator newline_list DO compound_list DONE
    (79) for_command -> . FOR WORD newline_list IN word_list list_terminator newline_list { compound_list }
    (80) for_command -> . FOR WORD newline_list IN list_terminator newline_list DO compound_list DONE
    (81) for_command -> . FOR WORD newline_list IN list_terminator newline_list { compound_list }
    (92) case_command -> . CASE WORD newline_list IN newline_list ESAC
    (93) case_command -> . CASE WORD newline_list IN case_clause_sequence newline_list ESAC
    (94) case_command -> . CASE WORD newline_list IN case_clause ESAC
    (86) select_command -> . SELECT WORD newline_list DO list DONE
    (87) select_command -> . SELECT WORD newline_list { list }
    (88) select_command -> . SELECT WORD ; newline_list DO list DONE
    (89) select_command -> . SELECT WORD ; newline_list { list }
    (90) select_command -> . SELECT WORD newline_list IN word_list list_terminator newline_list DO list DONE
    (91) select_command -> . SELECT WORD newline_list IN word_list list_terminator newline_list { list }
    (106) if_command -> . IF compound_list THEN compound_list FI
    (107) if_command -> . IF compound_list THEN compound_list ELSE compound_list FI
    (108) if_command -> . IF compound_list THEN compound_list elif_clause FI
    (100) subshell -> . ( compound_list )
    (109) group_command -> . { compound_list }
    (110) arith_command -> . ARITH_CMD
    (111) cond_command -> . COND_START COND_CMD COND_END
    (82) arith_for_command -> . FOR ARITH_FOR_EXPRS list_terminator newline_list DO compound_list DONE
    (83) arith_for_command -> . FOR ARITH_FOR_EXPRS list_terminator newline_list { compound_list }
    (84) arith_for_command -> . FOR ARITH_FOR_EXPRS DO compound_list DONE
    (85) arith_for_command -> . FOR ARITH_FOR_EXPRS { compound_list }
    (7) redirection -> . > WORD
    (8) redirection -> . < WORD
    (9) redirection -> . NUMBER > WORD
    (10) redirection -> . NUMBER < WORD
    (11) redirection -> . REDIR_WORD > WORD
    (12) redirection -> . REDIR_WORD < WORD
    (13) redirection -> . GREATER_GREATER WORD
    (14) redirection -> . NUMBER GREATER_GREATER WORD
    (15) redirection -> . REDIR_WORD GREATER_GREATER WORD
    (16) redirection -> . GREATER_BAR WORD
    (17) redirection -> . NUMBER GREATER_BAR WORD
    (18) redirection -> . REDIR_WORD GREATER_BAR WORD
    (19) redirection -> . LESS_GREATER WORD
    (20) redirection -> . NUMBER LESS_GREATER WORD
    (21) redirection -> . REDIR_WORD LESS_GREATER WORD
    (22) redirection -> . LESS_LESS WORD
    (23) redirection -> . NUMBER LESS_LESS WORD
    (24) redirection -> . REDIR_WORD LESS_LESS WORD
    (25) redirection -> . LESS_LESS_MINUS WORD
    (26) redirection -> . NUMBER LESS_LESS_MINUS WORD
    (27) redirection -> . REDIR_WORD LESS_LESS_MINUS WORD
    (28) redirection -> . LESS_LESS_LESS WORD
    (29) redirection -> . NUMBER LESS_LESS_LESS WORD
    (30) redirection -> . REDIR_WORD LESS_LESS_LESS WORD
    (31) redirection -> . LESS_AND NUMBER
    (32) redirection -> . NUMBER LESS_AND NUMBER
    (33) redirection -> . REDIR_WORD LESS_AND NUMBER
    (34) redirection -> . GREATER_AND NUMBER
    (35) redirection -> . NUMBER GREATER_AND NUMBER
    (36) redirection -> . REDIR_WORD GREATER_AND NUMBER
    (37) redirection -> . LESS_AND WORD
    (38) redirection -> . NUMBER LESS_AND WORD
    (39) redirection -> . REDIR_WORD LESS_AND WORD
    (40) redirection -> . GREATER_AND WORD
    (41) redirection -> . NUMBER GREATER_AND WORD
    (42) redirection -> . REDIR_WORD GREATER_AND WORD
    (43) redirection -> . GREATER_AND -
    (44) redirection -> . NUMBER GREATER_AND -
    (45) redirection -> . REDIR_WORD GREATER_AND -
    (46) redirection -> . LESS_AND -
    (47) redirection -> . NUMBER LESS_AND -
    (48) redirection -> . REDIR_WORD LESS_AND -
    (49) redirection -> . AND_GREATER WORD
    (50) redirection -> . AND_GREATER_GREATER WORD

    NEWLINE         shift and go to state 128
    BANG            shift and go to state 32
    TIME            shift and go to state 48
    WHILE           shift and go to state 34
    UNTIL           shift and go to state 4
    WORD            shift and go to state 53
    FUNCTION        shift and go to state 49
    COPROC          shift and go to state 44
    ASSIGNMENT_WORD shift and go to state 26
    FOR             shift and go to state 31
    CASE            shift and go to state 51
    SELECT          shift and go to state 39
    IF              shift and go to state 5
    (               shift and go to state 36
    {               shift and go to state 19
    ARITH_CMD       shift and go to state 46
    COND_START      shift and go to state 22
    >               shift and go to state 41
    <               shift and go to state 40
    NUMBER          shift and go to state 9
    REDIR_WORD      shift and go to state 7
    GREATER_GREATER shift and go to state 28
    GREATER_BAR     shift and go to state 11
    LESS_GREATER    shift and go to state 33
    LESS_LESS       shift and go to state 3
    LESS_LESS_MINUS shift and go to state 18
    LESS_LESS_LESS  shift and go to state 14
    LESS_AND        shift and go to state 17
    GREATER_AND     shift and go to state 47
    AND_GREATER     shift and go to state 45
    AND_GREATER_GREATER shift and go to state 37

    command                        shift and go to state 23
    select_command                 shift and go to state 6
    for_command                    shift and go to state 43
    shell_command                  shift and go to state 25
    simple_command_element         shift and go to state 2
    coproc                         shift and go to state 10
    simple_command                 shift and go to state 27
    pipeline_command               shift and go to state 131
    cond_command                   shift and go to state 30
    timespec                       shift and go to state 24
    arith_for_command              shift and go to state 15
    arith_command                  shift and go to state 16
    list1                          shift and go to state 257
    group_command                  shift and go to state 20
    redirection                    shift and go to state 50
    subshell                       shift and go to state 21
    pipeline                       shift and go to state 52
    case_command                   shift and go to state 35
    if_command                     shift and go to state 38
    function_def                   shift and go to state 1

state 315

    (112) elif_clause -> ELIF compound_list THEN compound_list .
    (113) elif_clause -> ELIF compound_list THEN compound_list . ELSE compound_list
    (114) elif_clause -> ELIF compound_list THEN compound_list . elif_clause
    (112) elif_clause -> . ELIF compound_list THEN compound_list
    (113) elif_clause -> . ELIF compound_list THEN compound_list ELSE compound_list
    (114) elif_clause -> . ELIF compound_list THEN compound_list elif_clause

    FI              reduce using rule 112 (elif_clause -> ELIF compound_list THEN compound_list .)
    ELSE            shift and go to state 330
    ELIF            shift and go to state 225

    elif_clause                    shift and go to state 329

state 316

    (79) for_command -> FOR WORD newline_list IN word_list list_terminator newline_list { . compound_list }
    (130) compound_list -> . list
    (131) compound_list -> . newline_list list1
    (129) list -> . newline_list list0
    (144) newline_list -> .
    (145) newline_list -> . newline_list NEWLINE

    NEWLINE         reduce using rule 144 (newline_list -> .)
    BANG            reduce using rule 144 (newline_list -> .)
    TIME            reduce using rule 144 (newline_list -> .)
    WHILE           reduce using rule 144 (newline_list -> .)
    UNTIL           reduce using rule 144 (newline_list -> .)
    WORD            reduce using rule 144 (newline_list -> .)
    FUNCTION        reduce using rule 144 (newline_list -> .)
    COPROC          reduce using rule 144 (newline_list -> .)
    ASSIGNMENT_WORD reduce using rule 144 (newline_list -> .)
    FOR             reduce using rule 144 (newline_list -> .)
    CASE            reduce using rule 144 (newline_list -> .)
    SELECT          reduce using rule 144 (newline_list -> .)
    IF              reduce using rule 144 (newline_list -> .)
    (               reduce using rule 144 (newline_list -> .)
    {               reduce using rule 144 (newline_list -> .)
    ARITH_CMD       reduce using rule 144 (newline_list -> .)
    COND_START      reduce using rule 144 (newline_list -> .)
    >               reduce using rule 144 (newline_list -> .)
    <               reduce using rule 144 (newline_list -> .)
    NUMBER          reduce using rule 144 (newline_list -> .)
    REDIR_WORD      reduce using rule 144 (newline_list -> .)
    GREATER_GREATER reduce using rule 144 (newline_list -> .)
    GREATER_BAR     reduce using rule 144 (newline_list -> .)
    LESS_GREATER    reduce using rule 144 (newline_list -> .)
    LESS_LESS       reduce using rule 144 (newline_list -> .)
    LESS_LESS_MINUS reduce using rule 144 (newline_list -> .)
    LESS_LESS_LESS  reduce using rule 144 (newline_list -> .)
    LESS_AND        reduce using rule 144 (newline_list -> .)
    GREATER_AND     reduce using rule 144 (newline_list -> .)
    AND_GREATER     reduce using rule 144 (newline_list -> .)
    AND_GREATER_GREATER reduce using rule 144 (newline_list -> .)

    newline_list                   shift and go to state 56
    compound_list                  shift and go to state 331
    list                           shift and go to state 58

state 317

    (78) for_command -> FOR WORD newline_list IN word_list list_terminator newline_list DO . compound_list DONE
    (130) compound_list -> . list
    (131) compound_list -> . newline_list list1
    (129) list -> . newline_list list0
    (144) newline_list -> .
    (145) newline_list -> . newline_list NEWLINE

    NEWLINE         reduce using rule 144 (newline_list -> .)
    BANG            reduce using rule 144 (newline_list -> .)
    TIME            reduce using rule 144 (newline_list -> .)
    WHILE           reduce using rule 144 (newline_list -> .)
    UNTIL           reduce using rule 144 (newline_list -> .)
    WORD            reduce using rule 144 (newline_list -> .)
    FUNCTION        reduce using rule 144 (newline_list -> .)
    COPROC          reduce using rule 144 (newline_list -> .)
    ASSIGNMENT_WORD reduce using rule 144 (newline_list -> .)
    FOR             reduce using rule 144 (newline_list -> .)
    CASE            reduce using rule 144 (newline_list -> .)
    SELECT          reduce using rule 144 (newline_list -> .)
    IF              reduce using rule 144 (newline_list -> .)
    (               reduce using rule 144 (newline_list -> .)
    {               reduce using rule 144 (newline_list -> .)
    ARITH_CMD       reduce using rule 144 (newline_list -> .)
    COND_START      reduce using rule 144 (newline_list -> .)
    >               reduce using rule 144 (newline_list -> .)
    <               reduce using rule 144 (newline_list -> .)
    NUMBER          reduce using rule 144 (newline_list -> .)
    REDIR_WORD      reduce using rule 144 (newline_list -> .)
    GREATER_GREATER reduce using rule 144 (newline_list -> .)
    GREATER_BAR     reduce using rule 144 (newline_list -> .)
    LESS_GREATER    reduce using rule 144 (newline_list -> .)
    LESS_LESS       reduce using rule 144 (newline_list -> .)
    LESS_LESS_MINUS reduce using rule 144 (newline_list -> .)
    LESS_LESS_LESS  reduce using rule 144 (newline_list -> .)
    LESS_AND        reduce using rule 144 (newline_list -> .)
    GREATER_AND     reduce using rule 144 (newline_list -> .)
    AND_GREATER     reduce using rule 144 (newline_list -> .)
    AND_GREATER_GREATER reduce using rule 144 (newline_list -> .)

    newline_list                   shift and go to state 56
    compound_list                  shift and go to state 332
    list                           shift and go to state 58

state 318

    (81) for_command -> FOR WORD newline_list IN list_terminator newline_list { compound_list . }

    }               shift and go to state 333


state 319

    (80) for_command -> FOR WORD newline_list IN list_terminator newline_list DO compound_list . DONE

    DONE            shift and go to state 334


state 320

    (91) select_command -> SELECT WORD newline_list IN word_list list_terminator newline_list { . list }
    (129) list -> . newline_list list0
    (144) newline_list -> .
    (145) newline_list -> . newline_list NEWLINE

    NEWLINE         reduce using rule 144 (newline_list -> .)
    BANG            reduce using rule 144 (newline_list -> .)
    TIME            reduce using rule 144 (newline_list -> .)
    WHILE           reduce using rule 144 (newline_list -> .)
    UNTIL           reduce using rule 144 (newline_list -> .)
    WORD            reduce using rule 144 (newline_list -> .)
    FUNCTION        reduce using rule 144 (newline_list -> .)
    COPROC          reduce using rule 144 (newline_list -> .)
    ASSIGNMENT_WORD reduce using rule 144 (newline_list -> .)
    FOR             reduce using rule 144 (newline_list -> .)
    CASE            reduce using rule 144 (newline_list -> .)
    SELECT          reduce using rule 144 (newline_list -> .)
    IF              reduce using rule 144 (newline_list -> .)
    (               reduce using rule 144 (newline_list -> .)
    {               reduce using rule 144 (newline_list -> .)
    ARITH_CMD       reduce using rule 144 (newline_list -> .)
    COND_START      reduce using rule 144 (newline_list -> .)
    >               reduce using rule 144 (newline_list -> .)
    <               reduce using rule 144 (newline_list -> .)
    NUMBER          reduce using rule 144 (newline_list -> .)
    REDIR_WORD      reduce using rule 144 (newline_list -> .)
    GREATER_GREATER reduce using rule 144 (newline_list -> .)
    GREATER_BAR     reduce using rule 144 (newline_list -> .)
    LESS_GREATER    reduce using rule 144 (newline_list -> .)
    LESS_LESS       reduce using rule 144 (newline_list -> .)
    LESS_LESS_MINUS reduce using rule 144 (newline_list -> .)
    LESS_LESS_LESS  reduce using rule 144 (newline_list -> .)
    LESS_AND        reduce using rule 144 (newline_list -> .)
    GREATER_AND     reduce using rule 144 (newline_list -> .)
    AND_GREATER     reduce using rule 144 (newline_list -> .)
    AND_GREATER_GREATER reduce using rule 144 (newline_list -> .)

    newline_list                   shift and go to state 241
    list                           shift and go to state 335

state 321

    (90) select_command -> SELECT WORD newline_list IN word_list list_terminator newline_list DO . list DONE
    (129) list -> . newline_list list0
    (144) newline_list -> .
    (145) newline_list -> . newline_list NEWLINE

    NEWLINE         reduce using rule 144 (newline_list -> .)
    BANG            reduce using rule 144 (newline_list -> .)
    TIME            reduce using rule 144 (newline_list -> .)
    WHILE           reduce using rule 144 (newline_list -> .)
    UNTIL           reduce using rule 144 (newline_list -> .)
    WORD            reduce using rule 144 (newline_list -> .)
    FUNCTION        reduce using rule 144 (newline_list -> .)
    COPROC          reduce using rule 144 (newline_list -> .)
    ASSIGNMENT_WORD reduce using rule 144 (newline_list -> .)
    FOR             reduce using rule 144 (newline_list -> .)
    CASE            reduce using rule 144 (newline_list -> .)
    SELECT          reduce using rule 144 (newline_list -> .)
    IF              reduce using rule 144 (newline_list -> .)
    (               reduce using rule 144 (newline_list -> .)
    {               reduce using rule 144 (newline_list -> .)
    ARITH_CMD       reduce using rule 144 (newline_list -> .)
    COND_START      reduce using rule 144 (newline_list -> .)
    >               reduce using rule 144 (newline_list -> .)
    <               reduce using rule 144 (newline_list -> .)
    NUMBER          reduce using rule 144 (newline_list -> .)
    REDIR_WORD      reduce using rule 144 (newline_list -> .)
    GREATER_GREATER reduce using rule 144 (newline_list -> .)
    GREATER_BAR     reduce using rule 144 (newline_list -> .)
    LESS_GREATER    reduce using rule 144 (newline_list -> .)
    LESS_LESS       reduce using rule 144 (newline_list -> .)
    LESS_LESS_MINUS reduce using rule 144 (newline_list -> .)
    LESS_LESS_LESS  reduce using rule 144 (newline_list -> .)
    LESS_AND        reduce using rule 144 (newline_list -> .)
    GREATER_AND     reduce using rule 144 (newline_list -> .)
    AND_GREATER     reduce using rule 144 (newline_list -> .)
    AND_GREATER_GREATER reduce using rule 144 (newline_list -> .)

    newline_list                   shift and go to state 241
    list                           shift and go to state 336

state 322

    (133) list0 -> list1 & newline_list .
    (137) list1 -> list1 & newline_list . list1
    (145) newline_list -> newline_list . NEWLINE
    (135) list1 -> . list1 AND_AND newline_list list1
    (136) list1 -> . list1 OR_OR newline_list list1
    (137) list1 -> . list1 & newline_list list1
    (138) list1 -> . list1 ; newline_list list1
    (139) list1 -> . list1 NEWLINE newline_list list1
    (140) list1 -> . pipeline_command
    (154) pipeline_command -> . pipeline
    (155) pipeline_command -> . BANG pipeline_command
    (156) pipeline_command -> . timespec pipeline_command
    (157) pipeline_command -> . timespec list_terminator
    (158) pipeline_command -> . BANG list_terminator
    (159) pipeline -> . pipeline | newline_list pipeline
    (160) pipeline -> . pipeline BAR_AND newline_list pipeline
    (161) pipeline -> . command
    (162) timespec -> . TIME
    (163) timespec -> . TIME TIMEOPT
    (164) timespec -> . TIME TIMEOPT TIMEIGN
    (58) command -> . simple_command
    (59) command -> . shell_command
    (60) command -> . shell_command redirection_list
    (61) command -> . function_def
    (62) command -> . coproc
    (56) simple_command -> . simple_command_element
    (57) simple_command -> . simple_command simple_command_element
    (63) shell_command -> . for_command
    (64) shell_command -> . case_command
    (65) shell_command -> . WHILE compound_list DO compound_list DONE
    (66) shell_command -> . UNTIL compound_list DO compound_list DONE
    (67) shell_command -> . select_command
    (68) shell_command -> . if_command
    (69) shell_command -> . subshell
    (70) shell_command -> . group_command
    (71) shell_command -> . arith_command
    (72) shell_command -> . cond_command
    (73) shell_command -> . arith_for_command
    (95) function_def -> . WORD ( ) newline_list function_body
    (96) function_def -> . FUNCTION WORD ( ) newline_list function_body
    (97) function_def -> . FUNCTION WORD newline_list function_body
    (101) coproc -> . COPROC shell_command
    (102) coproc -> . COPROC shell_command redirection_list
    (103) coproc -> . COPROC WORD shell_command
    (104) coproc -> . COPROC WORD shell_command redirection_list
    (105) coproc -> . COPROC simple_command
    (51) simple_command_element -> . WORD
    (52) simple_command_element -> . ASSIGNMENT_WORD
    (53) simple_command_element -> . redirection
    (74) for_command -> . FOR WORD newline_list DO compound_list DONE
    (75) for_command -> . FOR WORD newline_list { compound_list }
    (76) for_command -> . FOR WORD ; newline_list DO compound_list DONE
    (77) for_command -> . FOR WORD ; newline_list { compound_list }
    (78) for_command -> . FOR WORD newline_list IN word_list list_terminator newline_list DO compound_list DONE
    (79) for_command -> . FOR WORD newline_list IN word_list list_terminator newline_list { compound_list }
    (80) for_command -> . FOR WORD newline_list IN list_terminator newline_list DO compound_list DONE
    (81) for_command -> . FOR WORD newline_list IN list_terminator newline_list { compound_list }
    (92) case_command -> . CASE WORD newline_list IN newline_list ESAC
    (93) case_command -> . CASE WORD newline_list IN case_clause_sequence newline_list ESAC
    (94) case_command -> . CASE WORD newline_list IN case_clause ESAC
    (86) select_command -> . SELECT WORD newline_list DO list DONE
    (87) select_command -> . SELECT WORD newline_list { list }
    (88) select_command -> . SELECT WORD ; newline_list DO list DONE
    (89) select_command -> . SELECT WORD ; newline_list { list }
    (90) select_command -> . SELECT WORD newline_list IN word_list list_terminator newline_list DO list DONE
    (91) select_command -> . SELECT WORD newline_list IN word_list list_terminator newline_list { list }
    (106) if_command -> . IF compound_list THEN compound_list FI
    (107) if_command -> . IF compound_list THEN compound_list ELSE compound_list FI
    (108) if_command -> . IF compound_list THEN compound_list elif_clause FI
    (100) subshell -> . ( compound_list )
    (109) group_command -> . { compound_list }
    (110) arith_command -> . ARITH_CMD
    (111) cond_command -> . COND_START COND_CMD COND_END
    (82) arith_for_command -> . FOR ARITH_FOR_EXPRS list_terminator newline_list DO compound_list DONE
    (83) arith_for_command -> . FOR ARITH_FOR_EXPRS list_terminator newline_list { compound_list }
    (84) arith_for_command -> . FOR ARITH_FOR_EXPRS DO compound_list DONE
    (85) arith_for_command -> . FOR ARITH_FOR_EXPRS { compound_list }
    (7) redirection -> . > WORD
    (8) redirection -> . < WORD
    (9) redirection -> . NUMBER > WORD
    (10) redirection -> . NUMBER < WORD
    (11) redirection -> . REDIR_WORD > WORD
    (12) redirection -> . REDIR_WORD < WORD
    (13) redirection -> . GREATER_GREATER WORD
    (14) redirection -> . NUMBER GREATER_GREATER WORD
    (15) redirection -> . REDIR_WORD GREATER_GREATER WORD
    (16) redirection -> . GREATER_BAR WORD
    (17) redirection -> . NUMBER GREATER_BAR WORD
    (18) redirection -> . REDIR_WORD GREATER_BAR WORD
    (19) redirection -> . LESS_GREATER WORD
    (20) redirection -> . NUMBER LESS_GREATER WORD
    (21) redirection -> . REDIR_WORD LESS_GREATER WORD
    (22) redirection -> . LESS_LESS WORD
    (23) redirection -> . NUMBER LESS_LESS WORD
    (24) redirection -> . REDIR_WORD LESS_LESS WORD
    (25) redirection -> . LESS_LESS_MINUS WORD
    (26) redirection -> . NUMBER LESS_LESS_MINUS WORD
    (27) redirection -> . REDIR_WORD LESS_LESS_MINUS WORD
    (28) redirection -> . LESS_LESS_LESS WORD
    (29) redirection -> . NUMBER LESS_LESS_LESS WORD
    (30) redirection -> . REDIR_WORD LESS_LESS_LESS WORD
    (31) redirection -> . LESS_AND NUMBER
    (32) redirection -> . NUMBER LESS_AND NUMBER
    (33) redirection -> . REDIR_WORD LESS_AND NUMBER
    (34) redirection -> . GREATER_AND NUMBER
    (35) redirection -> . NUMBER GREATER_AND NUMBER
    (36) redirection -> . REDIR_WORD GREATER_AND NUMBER
    (37) redirection -> . LESS_AND WORD
    (38) redirection -> . NUMBER LESS_AND WORD
    (39) redirection -> . REDIR_WORD LESS_AND WORD
    (40) redirection -> . GREATER_AND WORD
    (41) redirection -> . NUMBER GREATER_AND WORD
    (42) redirection -> . REDIR_WORD GREATER_AND WORD
    (43) redirection -> . GREATER_AND -
    (44) redirection -> . NUMBER GREATER_AND -
    (45) redirection -> . REDIR_WORD GREATER_AND -
    (46) redirection -> . LESS_AND -
    (47) redirection -> . NUMBER LESS_AND -
    (48) redirection -> . REDIR_WORD LESS_AND -
    (49) redirection -> . AND_GREATER WORD
    (50) redirection -> . AND_GREATER_GREATER WORD

    }               reduce using rule 133 (list0 -> list1 & newline_list .)
    DONE            reduce using rule 133 (list0 -> list1 & newline_list .)
    NEWLINE         shift and go to state 128
    BANG            shift and go to state 32
    TIME            shift and go to state 48
    WHILE           shift and go to state 34
    UNTIL           shift and go to state 4
    WORD            shift and go to state 53
    FUNCTION        shift and go to state 49
    COPROC          shift and go to state 44
    ASSIGNMENT_WORD shift and go to state 26
    FOR             shift and go to state 31
    CASE            shift and go to state 51
    SELECT          shift and go to state 39
    IF              shift and go to state 5
    (               shift and go to state 36
    {               shift and go to state 19
    ARITH_CMD       shift and go to state 46
    COND_START      shift and go to state 22
    >               shift and go to state 41
    <               shift and go to state 40
    NUMBER          shift and go to state 9
    REDIR_WORD      shift and go to state 7
    GREATER_GREATER shift and go to state 28
    GREATER_BAR     shift and go to state 11
    LESS_GREATER    shift and go to state 33
    LESS_LESS       shift and go to state 3
    LESS_LESS_MINUS shift and go to state 18
    LESS_LESS_LESS  shift and go to state 14
    LESS_AND        shift and go to state 17
    GREATER_AND     shift and go to state 47
    AND_GREATER     shift and go to state 45
    AND_GREATER_GREATER shift and go to state 37

    command                        shift and go to state 23
    select_command                 shift and go to state 6
    for_command                    shift and go to state 43
    shell_command                  shift and go to state 25
    simple_command_element         shift and go to state 2
    coproc                         shift and go to state 10
    simple_command                 shift and go to state 27
    pipeline_command               shift and go to state 131
    cond_command                   shift and go to state 30
    timespec                       shift and go to state 24
    arith_for_command              shift and go to state 15
    arith_command                  shift and go to state 16
    list1                          shift and go to state 254
    group_command                  shift and go to state 20
    redirection                    shift and go to state 50
    subshell                       shift and go to state 21
    pipeline                       shift and go to state 52
    case_command                   shift and go to state 35
    if_command                     shift and go to state 38
    function_def                   shift and go to state 1

state 323

    (134) list0 -> list1 ; newline_list .
    (138) list1 -> list1 ; newline_list . list1
    (145) newline_list -> newline_list . NEWLINE
    (135) list1 -> . list1 AND_AND newline_list list1
    (136) list1 -> . list1 OR_OR newline_list list1
    (137) list1 -> . list1 & newline_list list1
    (138) list1 -> . list1 ; newline_list list1
    (139) list1 -> . list1 NEWLINE newline_list list1
    (140) list1 -> . pipeline_command
    (154) pipeline_command -> . pipeline
    (155) pipeline_command -> . BANG pipeline_command
    (156) pipeline_command -> . timespec pipeline_command
    (157) pipeline_command -> . timespec list_terminator
    (158) pipeline_command -> . BANG list_terminator
    (159) pipeline -> . pipeline | newline_list pipeline
    (160) pipeline -> . pipeline BAR_AND newline_list pipeline
    (161) pipeline -> . command
    (162) timespec -> . TIME
    (163) timespec -> . TIME TIMEOPT
    (164) timespec -> . TIME TIMEOPT TIMEIGN
    (58) command -> . simple_command
    (59) command -> . shell_command
    (60) command -> . shell_command redirection_list
    (61) command -> . function_def
    (62) command -> . coproc
    (56) simple_command -> . simple_command_element
    (57) simple_command -> . simple_command simple_command_element
    (63) shell_command -> . for_command
    (64) shell_command -> . case_command
    (65) shell_command -> . WHILE compound_list DO compound_list DONE
    (66) shell_command -> . UNTIL compound_list DO compound_list DONE
    (67) shell_command -> . select_command
    (68) shell_command -> . if_command
    (69) shell_command -> . subshell
    (70) shell_command -> . group_command
    (71) shell_command -> . arith_command
    (72) shell_command -> . cond_command
    (73) shell_command -> . arith_for_command
    (95) function_def -> . WORD ( ) newline_list function_body
    (96) function_def -> . FUNCTION WORD ( ) newline_list function_body
    (97) function_def -> . FUNCTION WORD newline_list function_body
    (101) coproc -> . COPROC shell_command
    (102) coproc -> . COPROC shell_command redirection_list
    (103) coproc -> . COPROC WORD shell_command
    (104) coproc -> . COPROC WORD shell_command redirection_list
    (105) coproc -> . COPROC simple_command
    (51) simple_command_element -> . WORD
    (52) simple_command_element -> . ASSIGNMENT_WORD
    (53) simple_command_element -> . redirection
    (74) for_command -> . FOR WORD newline_list DO compound_list DONE
    (75) for_command -> . FOR WORD newline_list { compound_list }
    (76) for_command -> . FOR WORD ; newline_list DO compound_list DONE
    (77) for_command -> . FOR WORD ; newline_list { compound_list }
    (78) for_command -> . FOR WORD newline_list IN word_list list_terminator newline_list DO compound_list DONE
    (79) for_command -> . FOR WORD newline_list IN word_list list_terminator newline_list { compound_list }
    (80) for_command -> . FOR WORD newline_list IN list_terminator newline_list DO compound_list DONE
    (81) for_command -> . FOR WORD newline_list IN list_terminator newline_list { compound_list }
    (92) case_command -> . CASE WORD newline_list IN newline_list ESAC
    (93) case_command -> . CASE WORD newline_list IN case_clause_sequence newline_list ESAC
    (94) case_command -> . CASE WORD newline_list IN case_clause ESAC
    (86) select_command -> . SELECT WORD newline_list DO list DONE
    (87) select_command -> . SELECT WORD newline_list { list }
    (88) select_command -> . SELECT WORD ; newline_list DO list DONE
    (89) select_command -> . SELECT WORD ; newline_list { list }
    (90) select_command -> . SELECT WORD newline_list IN word_list list_terminator newline_list DO list DONE
    (91) select_command -> . SELECT WORD newline_list IN word_list list_terminator newline_list { list }
    (106) if_command -> . IF compound_list THEN compound_list FI
    (107) if_command -> . IF compound_list THEN compound_list ELSE compound_list FI
    (108) if_command -> . IF compound_list THEN compound_list elif_clause FI
    (100) subshell -> . ( compound_list )
    (109) group_command -> . { compound_list }
    (110) arith_command -> . ARITH_CMD
    (111) cond_command -> . COND_START COND_CMD COND_END
    (82) arith_for_command -> . FOR ARITH_FOR_EXPRS list_terminator newline_list DO compound_list DONE
    (83) arith_for_command -> . FOR ARITH_FOR_EXPRS list_terminator newline_list { compound_list }
    (84) arith_for_command -> . FOR ARITH_FOR_EXPRS DO compound_list DONE
    (85) arith_for_command -> . FOR ARITH_FOR_EXPRS { compound_list }
    (7) redirection -> . > WORD
    (8) redirection -> . < WORD
    (9) redirection -> . NUMBER > WORD
    (10) redirection -> . NUMBER < WORD
    (11) redirection -> . REDIR_WORD > WORD
    (12) redirection -> . REDIR_WORD < WORD
    (13) redirection -> . GREATER_GREATER WORD
    (14) redirection -> . NUMBER GREATER_GREATER WORD
    (15) redirection -> . REDIR_WORD GREATER_GREATER WORD
    (16) redirection -> . GREATER_BAR WORD
    (17) redirection -> . NUMBER GREATER_BAR WORD
    (18) redirection -> . REDIR_WORD GREATER_BAR WORD
    (19) redirection -> . LESS_GREATER WORD
    (20) redirection -> . NUMBER LESS_GREATER WORD
    (21) redirection -> . REDIR_WORD LESS_GREATER WORD
    (22) redirection -> . LESS_LESS WORD
    (23) redirection -> . NUMBER LESS_LESS WORD
    (24) redirection -> . REDIR_WORD LESS_LESS WORD
    (25) redirection -> . LESS_LESS_MINUS WORD
    (26) redirection -> . NUMBER LESS_LESS_MINUS WORD
    (27) redirection -> . REDIR_WORD LESS_LESS_MINUS WORD
    (28) redirection -> . LESS_LESS_LESS WORD
    (29) redirection -> . NUMBER LESS_LESS_LESS WORD
    (30) redirection -> . REDIR_WORD LESS_LESS_LESS WORD
    (31) redirection -> . LESS_AND NUMBER
    (32) redirection -> . NUMBER LESS_AND NUMBER
    (33) redirection -> . REDIR_WORD LESS_AND NUMBER
    (34) redirection -> . GREATER_AND NUMBER
    (35) redirection -> . NUMBER GREATER_AND NUMBER
    (36) redirection -> . REDIR_WORD GREATER_AND NUMBER
    (37) redirection -> . LESS_AND WORD
    (38) redirection -> . NUMBER LESS_AND WORD
    (39) redirection -> . REDIR_WORD LESS_AND WORD
    (40) redirection -> . GREATER_AND WORD
    (41) redirection -> . NUMBER GREATER_AND WORD
    (42) redirection -> . REDIR_WORD GREATER_AND WORD
    (43) redirection -> . GREATER_AND -
    (44) redirection -> . NUMBER GREATER_AND -
    (45) redirection -> . REDIR_WORD GREATER_AND -
    (46) redirection -> . LESS_AND -
    (47) redirection -> . NUMBER LESS_AND -
    (48) redirection -> . REDIR_WORD LESS_AND -
    (49) redirection -> . AND_GREATER WORD
    (50) redirection -> . AND_GREATER_GREATER WORD

    }               reduce using rule 134 (list0 -> list1 ; newline_list .)
    DONE            reduce using rule 134 (list0 -> list1 ; newline_list .)
    NEWLINE         shift and go to state 128
    BANG            shift and go to state 32
    TIME            shift and go to state 48
    WHILE           shift and go to state 34
    UNTIL           shift and go to state 4
    WORD            shift and go to state 53
    FUNCTION        shift and go to state 49
    COPROC          shift and go to state 44
    ASSIGNMENT_WORD shift and go to state 26
    FOR             shift and go to state 31
    CASE            shift and go to state 51
    SELECT          shift and go to state 39
    IF              shift and go to state 5
    (               shift and go to state 36
    {               shift and go to state 19
    ARITH_CMD       shift and go to state 46
    COND_START      shift and go to state 22
    >               shift and go to state 41
    <               shift and go to state 40
    NUMBER          shift and go to state 9
    REDIR_WORD      shift and go to state 7
    GREATER_GREATER shift and go to state 28
    GREATER_BAR     shift and go to state 11
    LESS_GREATER    shift and go to state 33
    LESS_LESS       shift and go to state 3
    LESS_LESS_MINUS shift and go to state 18
    LESS_LESS_LESS  shift and go to state 14
    LESS_AND        shift and go to state 17
    GREATER_AND     shift and go to state 47
    AND_GREATER     shift and go to state 45
    AND_GREATER_GREATER shift and go to state 37

    command                        shift and go to state 23
    select_command                 shift and go to state 6
    for_command                    shift and go to state 43
    shell_command                  shift and go to state 25
    simple_command_element         shift and go to state 2
    coproc                         shift and go to state 10
    simple_command                 shift and go to state 27
    pipeline_command               shift and go to state 131
    cond_command                   shift and go to state 30
    timespec                       shift and go to state 24
    arith_for_command              shift and go to state 15
    arith_command                  shift and go to state 16
    list1                          shift and go to state 256
    group_command                  shift and go to state 20
    redirection                    shift and go to state 50
    subshell                       shift and go to state 21
    pipeline                       shift and go to state 52
    case_command                   shift and go to state 35
    if_command                     shift and go to state 38
    function_def                   shift and go to state 1

state 324

    (132) list0 -> list1 NEWLINE newline_list .
    (139) list1 -> list1 NEWLINE newline_list . list1
    (145) newline_list -> newline_list . NEWLINE
    (135) list1 -> . list1 AND_AND newline_list list1
    (136) list1 -> . list1 OR_OR newline_list list1
    (137) list1 -> . list1 & newline_list list1
    (138) list1 -> . list1 ; newline_list list1
    (139) list1 -> . list1 NEWLINE newline_list list1
    (140) list1 -> . pipeline_command
    (154) pipeline_command -> . pipeline
    (155) pipeline_command -> . BANG pipeline_command
    (156) pipeline_command -> . timespec pipeline_command
    (157) pipeline_command -> . timespec list_terminator
    (158) pipeline_command -> . BANG list_terminator
    (159) pipeline -> . pipeline | newline_list pipeline
    (160) pipeline -> . pipeline BAR_AND newline_list pipeline
    (161) pipeline -> . command
    (162) timespec -> . TIME
    (163) timespec -> . TIME TIMEOPT
    (164) timespec -> . TIME TIMEOPT TIMEIGN
    (58) command -> . simple_command
    (59) command -> . shell_command
    (60) command -> . shell_command redirection_list
    (61) command -> . function_def
    (62) command -> . coproc
    (56) simple_command -> . simple_command_element
    (57) simple_command -> . simple_command simple_command_element
    (63) shell_command -> . for_command
    (64) shell_command -> . case_command
    (65) shell_command -> . WHILE compound_list DO compound_list DONE
    (66) shell_command -> . UNTIL compound_list DO compound_list DONE
    (67) shell_command -> . select_command
    (68) shell_command -> . if_command
    (69) shell_command -> . subshell
    (70) shell_command -> . group_command
    (71) shell_command -> . arith_command
    (72) shell_command -> . cond_command
    (73) shell_command -> . arith_for_command
    (95) function_def -> . WORD ( ) newline_list function_body
    (96) function_def -> . FUNCTION WORD ( ) newline_list function_body
    (97) function_def -> . FUNCTION WORD newline_list function_body
    (101) coproc -> . COPROC shell_command
    (102) coproc -> . COPROC shell_command redirection_list
    (103) coproc -> . COPROC WORD shell_command
    (104) coproc -> . COPROC WORD shell_command redirection_list
    (105) coproc -> . COPROC simple_command
    (51) simple_command_element -> . WORD
    (52) simple_command_element -> . ASSIGNMENT_WORD
    (53) simple_command_element -> . redirection
    (74) for_command -> . FOR WORD newline_list DO compound_list DONE
    (75) for_command -> . FOR WORD newline_list { compound_list }
    (76) for_command -> . FOR WORD ; newline_list DO compound_list DONE
    (77) for_command -> . FOR WORD ; newline_list { compound_list }
    (78) for_command -> . FOR WORD newline_list IN word_list list_terminator newline_list DO compound_list DONE
    (79) for_command -> . FOR WORD newline_list IN word_list list_terminator newline_list { compound_list }
    (80) for_command -> . FOR WORD newline_list IN list_terminator newline_list DO compound_list DONE
    (81) for_command -> . FOR WORD newline_list IN list_terminator newline_list { compound_list }
    (92) case_command -> . CASE WORD newline_list IN newline_list ESAC
    (93) case_command -> . CASE WORD newline_list IN case_clause_sequence newline_list ESAC
    (94) case_command -> . CASE WORD newline_list IN case_clause ESAC
    (86) select_command -> . SELECT WORD newline_list DO list DONE
    (87) select_command -> . SELECT WORD newline_list { list }
    (88) select_command -> . SELECT WORD ; newline_list DO list DONE
    (89) select_command -> . SELECT WORD ; newline_list { list }
    (90) select_command -> . SELECT WORD newline_list IN word_list list_terminator newline_list DO list DONE
    (91) select_command -> . SELECT WORD newline_list IN word_list list_terminator newline_list { list }
    (106) if_command -> . IF compound_list THEN compound_list FI
    (107) if_command -> . IF compound_list THEN compound_list ELSE compound_list FI
    (108) if_command -> . IF compound_list THEN compound_list elif_clause FI
    (100) subshell -> . ( compound_list )
    (109) group_command -> . { compound_list }
    (110) arith_command -> . ARITH_CMD
    (111) cond_command -> . COND_START COND_CMD COND_END
    (82) arith_for_command -> . FOR ARITH_FOR_EXPRS list_terminator newline_list DO compound_list DONE
    (83) arith_for_command -> . FOR ARITH_FOR_EXPRS list_terminator newline_list { compound_list }
    (84) arith_for_command -> . FOR ARITH_FOR_EXPRS DO compound_list DONE
    (85) arith_for_command -> . FOR ARITH_FOR_EXPRS { compound_list }
    (7) redirection -> . > WORD
    (8) redirection -> . < WORD
    (9) redirection -> . NUMBER > WORD
    (10) redirection -> . NUMBER < WORD
    (11) redirection -> . REDIR_WORD > WORD
    (12) redirection -> . REDIR_WORD < WORD
    (13) redirection -> . GREATER_GREATER WORD
    (14) redirection -> . NUMBER GREATER_GREATER WORD
    (15) redirection -> . REDIR_WORD GREATER_GREATER WORD
    (16) redirection -> . GREATER_BAR WORD
    (17) redirection -> . NUMBER GREATER_BAR WORD
    (18) redirection -> . REDIR_WORD GREATER_BAR WORD
    (19) redirection -> . LESS_GREATER WORD
    (20) redirection -> . NUMBER LESS_GREATER WORD
    (21) redirection -> . REDIR_WORD LESS_GREATER WORD
    (22) redirection -> . LESS_LESS WORD
    (23) redirection -> . NUMBER LESS_LESS WORD
    (24) redirection -> . REDIR_WORD LESS_LESS WORD
    (25) redirection -> . LESS_LESS_MINUS WORD
    (26) redirection -> . NUMBER LESS_LESS_MINUS WORD
    (27) redirection -> . REDIR_WORD LESS_LESS_MINUS WORD
    (28) redirection -> . LESS_LESS_LESS WORD
    (29) redirection -> . NUMBER LESS_LESS_LESS WORD
    (30) redirection -> . REDIR_WORD LESS_LESS_LESS WORD
    (31) redirection -> . LESS_AND NUMBER
    (32) redirection -> . NUMBER LESS_AND NUMBER
    (33) redirection -> . REDIR_WORD LESS_AND NUMBER
    (34) redirection -> . GREATER_AND NUMBER
    (35) redirection -> . NUMBER GREATER_AND NUMBER
    (36) redirection -> . REDIR_WORD GREATER_AND NUMBER
    (37) redirection -> . LESS_AND WORD
    (38) redirection -> . NUMBER LESS_AND WORD
    (39) redirection -> . REDIR_WORD LESS_AND WORD
    (40) redirection -> . GREATER_AND WORD
    (41) redirection -> . NUMBER GREATER_AND WORD
    (42) redirection -> . REDIR_WORD GREATER_AND WORD
    (43) redirection -> . GREATER_AND -
    (44) redirection -> . NUMBER GREATER_AND -
    (45) redirection -> . REDIR_WORD GREATER_AND -
    (46) redirection -> . LESS_AND -
    (47) redirection -> . NUMBER LESS_AND -
    (48) redirection -> . REDIR_WORD LESS_AND -
    (49) redirection -> . AND_GREATER WORD
    (50) redirection -> . AND_GREATER_GREATER WORD

    }               reduce using rule 132 (list0 -> list1 NEWLINE newline_list .)
    DONE            reduce using rule 132 (list0 -> list1 NEWLINE newline_list .)
    NEWLINE         shift and go to state 128
    BANG            shift and go to state 32
    TIME            shift and go to state 48
    WHILE           shift and go to state 34
    UNTIL           shift and go to state 4
    WORD            shift and go to state 53
    FUNCTION        shift and go to state 49
    COPROC          shift and go to state 44
    ASSIGNMENT_WORD shift and go to state 26
    FOR             shift and go to state 31
    CASE            shift and go to state 51
    SELECT          shift and go to state 39
    IF              shift and go to state 5
    (               shift and go to state 36
    {               shift and go to state 19
    ARITH_CMD       shift and go to state 46
    COND_START      shift and go to state 22
    >               shift and go to state 41
    <               shift and go to state 40
    NUMBER          shift and go to state 9
    REDIR_WORD      shift and go to state 7
    GREATER_GREATER shift and go to state 28
    GREATER_BAR     shift and go to state 11
    LESS_GREATER    shift and go to state 33
    LESS_LESS       shift and go to state 3
    LESS_LESS_MINUS shift and go to state 18
    LESS_LESS_LESS  shift and go to state 14
    LESS_AND        shift and go to state 17
    GREATER_AND     shift and go to state 47
    AND_GREATER     shift and go to state 45
    AND_GREATER_GREATER shift and go to state 37

    command                        shift and go to state 23
    select_command                 shift and go to state 6
    for_command                    shift and go to state 43
    shell_command                  shift and go to state 25
    simple_command_element         shift and go to state 2
    coproc                         shift and go to state 10
    simple_command                 shift and go to state 27
    pipeline_command               shift and go to state 131
    cond_command                   shift and go to state 30
    timespec                       shift and go to state 24
    arith_for_command              shift and go to state 15
    arith_command                  shift and go to state 16
    list1                          shift and go to state 257
    group_command                  shift and go to state 20
    redirection                    shift and go to state 50
    subshell                       shift and go to state 21
    pipeline                       shift and go to state 52
    case_command                   shift and go to state 35
    if_command                     shift and go to state 38
    function_def                   shift and go to state 1

state 325

    (128) pattern -> pattern | WORD .

    )               reduce using rule 128 (pattern -> pattern | WORD .)
    |               reduce using rule 128 (pattern -> pattern | WORD .)


state 326

    (118) pattern_list -> newline_list pattern ) newline_list .
    (131) compound_list -> newline_list . list1
    (145) newline_list -> newline_list . NEWLINE
    (129) list -> newline_list . list0
    (135) list1 -> . list1 AND_AND newline_list list1
    (136) list1 -> . list1 OR_OR newline_list list1
    (137) list1 -> . list1 & newline_list list1
    (138) list1 -> . list1 ; newline_list list1
    (139) list1 -> . list1 NEWLINE newline_list list1
    (140) list1 -> . pipeline_command
    (132) list0 -> . list1 NEWLINE newline_list
    (133) list0 -> . list1 & newline_list
    (134) list0 -> . list1 ; newline_list
    (154) pipeline_command -> . pipeline
    (155) pipeline_command -> . BANG pipeline_command
    (156) pipeline_command -> . timespec pipeline_command
    (157) pipeline_command -> . timespec list_terminator
    (158) pipeline_command -> . BANG list_terminator
    (159) pipeline -> . pipeline | newline_list pipeline
    (160) pipeline -> . pipeline BAR_AND newline_list pipeline
    (161) pipeline -> . command
    (162) timespec -> . TIME
    (163) timespec -> . TIME TIMEOPT
    (164) timespec -> . TIME TIMEOPT TIMEIGN
    (58) command -> . simple_command
    (59) command -> . shell_command
    (60) command -> . shell_command redirection_list
    (61) command -> . function_def
    (62) command -> . coproc
    (56) simple_command -> . simple_command_element
    (57) simple_command -> . simple_command simple_command_element
    (63) shell_command -> . for_command
    (64) shell_command -> . case_command
    (65) shell_command -> . WHILE compound_list DO compound_list DONE
    (66) shell_command -> . UNTIL compound_list DO compound_list DONE
    (67) shell_command -> . select_command
    (68) shell_command -> . if_command
    (69) shell_command -> . subshell
    (70) shell_command -> . group_command
    (71) shell_command -> . arith_command
    (72) shell_command -> . cond_command
    (73) shell_command -> . arith_for_command
    (95) function_def -> . WORD ( ) newline_list function_body
    (96) function_def -> . FUNCTION WORD ( ) newline_list function_body
    (97) function_def -> . FUNCTION WORD newline_list function_body
    (101) coproc -> . COPROC shell_command
    (102) coproc -> . COPROC shell_command redirection_list
    (103) coproc -> . COPROC WORD shell_command
    (104) coproc -> . COPROC WORD shell_command redirection_list
    (105) coproc -> . COPROC simple_command
    (51) simple_command_element -> . WORD
    (52) simple_command_element -> . ASSIGNMENT_WORD
    (53) simple_command_element -> . redirection
    (74) for_command -> . FOR WORD newline_list DO compound_list DONE
    (75) for_command -> . FOR WORD newline_list { compound_list }
    (76) for_command -> . FOR WORD ; newline_list DO compound_list DONE
    (77) for_command -> . FOR WORD ; newline_list { compound_list }
    (78) for_command -> . FOR WORD newline_list IN word_list list_terminator newline_list DO compound_list DONE
    (79) for_command -> . FOR WORD newline_list IN word_list list_terminator newline_list { compound_list }
    (80) for_command -> . FOR WORD newline_list IN list_terminator newline_list DO compound_list DONE
    (81) for_command -> . FOR WORD newline_list IN list_terminator newline_list { compound_list }
    (92) case_command -> . CASE WORD newline_list IN newline_list ESAC
    (93) case_command -> . CASE WORD newline_list IN case_clause_sequence newline_list ESAC
    (94) case_command -> . CASE WORD newline_list IN case_clause ESAC
    (86) select_command -> . SELECT WORD newline_list DO list DONE
    (87) select_command -> . SELECT WORD newline_list { list }
    (88) select_command -> . SELECT WORD ; newline_list DO list DONE
    (89) select_command -> . SELECT WORD ; newline_list { list }
    (90) select_command -> . SELECT WORD newline_list IN word_list list_terminator newline_list DO list DONE
    (91) select_command -> . SELECT WORD newline_list IN word_list list_terminator newline_list { list }
    (106) if_command -> . IF compound_list THEN compound_list FI
    (107) if_command -> . IF compound_list THEN compound_list ELSE compound_list FI
    (108) if_command -> . IF compound_list THEN compound_list elif_clause FI
    (100) subshell -> . ( compound_list )
    (109) group_command -> . { compound_list }
    (110) arith_command -> . ARITH_CMD
    (111) cond_command -> . COND_START COND_CMD COND_END
    (82) arith_for_command -> . FOR ARITH_FOR_EXPRS list_terminator newline_list DO compound_list DONE
    (83) arith_for_command -> . FOR ARITH_FOR_EXPRS list_terminator newline_list { compound_list }
    (84) arith_for_command -> . FOR ARITH_FOR_EXPRS DO compound_list DONE
    (85) arith_for_command -> . FOR ARITH_FOR_EXPRS { compound_list }
    (7) redirection -> . > WORD
    (8) redirection -> . < WORD
    (9) redirection -> . NUMBER > WORD
    (10) redirection -> . NUMBER < WORD
    (11) redirection -> . REDIR_WORD > WORD
    (12) redirection -> . REDIR_WORD < WORD
    (13) redirection -> . GREATER_GREATER WORD
    (14) redirection -> . NUMBER GREATER_GREATER WORD
    (15) redirection -> . REDIR_WORD GREATER_GREATER WORD
    (16) redirection -> . GREATER_BAR WORD
    (17) redirection -> . NUMBER GREATER_BAR WORD
    (18) redirection -> . REDIR_WORD GREATER_BAR WORD
    (19) redirection -> . LESS_GREATER WORD
    (20) redirection -> . NUMBER LESS_GREATER WORD
    (21) redirection -> . REDIR_WORD LESS_GREATER WORD
    (22) redirection -> . LESS_LESS WORD
    (23) redirection -> . NUMBER LESS_LESS WORD
    (24) redirection -> . REDIR_WORD LESS_LESS WORD
    (25) redirection -> . LESS_LESS_MINUS WORD
    (26) redirection -> . NUMBER LESS_LESS_MINUS WORD
    (27) redirection -> . REDIR_WORD LESS_LESS_MINUS WORD
    (28) redirection -> . LESS_LESS_LESS WORD
    (29) redirection -> . NUMBER LESS_LESS_LESS WORD
    (30) redirection -> . REDIR_WORD LESS_LESS_LESS WORD
    (31) redirection -> . LESS_AND NUMBER
    (32) redirection -> . NUMBER LESS_AND NUMBER
    (33) redirection -> . REDIR_WORD LESS_AND NUMBER
    (34) redirection -> . GREATER_AND NUMBER
    (35) redirection -> . NUMBER GREATER_AND NUMBER
    (36) redirection -> . REDIR_WORD GREATER_AND NUMBER
    (37) redirection -> . LESS_AND WORD
    (38) redirection -> . NUMBER LESS_AND WORD
    (39) redirection -> . REDIR_WORD LESS_AND WORD
    (40) redirection -> . GREATER_AND WORD
    (41) redirection -> . NUMBER GREATER_AND WORD
    (42) redirection -> . REDIR_WORD GREATER_AND WORD
    (43) redirection -> . GREATER_AND -
    (44) redirection -> . NUMBER GREATER_AND -
    (45) redirection -> . REDIR_WORD GREATER_AND -
    (46) redirection -> . LESS_AND -
    (47) redirection -> . NUMBER LESS_AND -
    (48) redirection -> . REDIR_WORD LESS_AND -
    (49) redirection -> . AND_GREATER WORD
    (50) redirection -> . AND_GREATER_GREATER WORD

    SEMI_SEMI       reduce using rule 118 (pattern_list -> newline_list pattern ) newline_list .)
    SEMI_AND        reduce using rule 118 (pattern_list -> newline_list pattern ) newline_list .)
    SEMI_SEMI_AND   reduce using rule 118 (pattern_list -> newline_list pattern ) newline_list .)
    ESAC            reduce using rule 118 (pattern_list -> newline_list pattern ) newline_list .)
    NEWLINE         shift and go to state 128
    BANG            shift and go to state 32
    TIME            shift and go to state 48
    WHILE           shift and go to state 34
    UNTIL           shift and go to state 4
    WORD            shift and go to state 53
    FUNCTION        shift and go to state 49
    COPROC          shift and go to state 44
    ASSIGNMENT_WORD shift and go to state 26
    FOR             shift and go to state 31
    CASE            shift and go to state 51
    SELECT          shift and go to state 39
    IF              shift and go to state 5
    (               shift and go to state 36
    {               shift and go to state 19
    ARITH_CMD       shift and go to state 46
    COND_START      shift and go to state 22
    >               shift and go to state 41
    <               shift and go to state 40
    NUMBER          shift and go to state 9
    REDIR_WORD      shift and go to state 7
    GREATER_GREATER shift and go to state 28
    GREATER_BAR     shift and go to state 11
    LESS_GREATER    shift and go to state 33
    LESS_LESS       shift and go to state 3
    LESS_LESS_MINUS shift and go to state 18
    LESS_LESS_LESS  shift and go to state 14
    LESS_AND        shift and go to state 17
    GREATER_AND     shift and go to state 47
    AND_GREATER     shift and go to state 45
    AND_GREATER_GREATER shift and go to state 37

    command                        shift and go to state 23
    select_command                 shift and go to state 6
    for_command                    shift and go to state 43
    shell_command                  shift and go to state 25
    simple_command_element         shift and go to state 2
    coproc                         shift and go to state 10
    simple_command                 shift and go to state 27
    pipeline_command               shift and go to state 131
    cond_command                   shift and go to state 30
    timespec                       shift and go to state 24
    arith_for_command              shift and go to state 15
    arith_command                  shift and go to state 16
    list1                          shift and go to state 129
    list0                          shift and go to state 130
    group_command                  shift and go to state 20
    redirection                    shift and go to state 50
    subshell                       shift and go to state 21
    pipeline                       shift and go to state 52
    case_command                   shift and go to state 35
    if_command                     shift and go to state 38
    function_def                   shift and go to state 1

state 327

    (117) pattern_list -> newline_list pattern ) compound_list .

    SEMI_SEMI       reduce using rule 117 (pattern_list -> newline_list pattern ) compound_list .)
    SEMI_AND        reduce using rule 117 (pattern_list -> newline_list pattern ) compound_list .)
    SEMI_SEMI_AND   reduce using rule 117 (pattern_list -> newline_list pattern ) compound_list .)
    ESAC            reduce using rule 117 (pattern_list -> newline_list pattern ) compound_list .)


state 328

    (119) pattern_list -> newline_list ( pattern ) . compound_list
    (120) pattern_list -> newline_list ( pattern ) . newline_list
    (130) compound_list -> . list
    (131) compound_list -> . newline_list list1
    (144) newline_list -> .
    (145) newline_list -> . newline_list NEWLINE
    (129) list -> . newline_list list0

    NEWLINE         reduce using rule 144 (newline_list -> .)
    BANG            reduce using rule 144 (newline_list -> .)
    TIME            reduce using rule 144 (newline_list -> .)
    WHILE           reduce using rule 144 (newline_list -> .)
    UNTIL           reduce using rule 144 (newline_list -> .)
    WORD            reduce using rule 144 (newline_list -> .)
    FUNCTION        reduce using rule 144 (newline_list -> .)
    COPROC          reduce using rule 144 (newline_list -> .)
    ASSIGNMENT_WORD reduce using rule 144 (newline_list -> .)
    FOR             reduce using rule 144 (newline_list -> .)
    CASE            reduce using rule 144 (newline_list -> .)
    SELECT          reduce using rule 144 (newline_list -> .)
    IF              reduce using rule 144 (newline_list -> .)
    (               reduce using rule 144 (newline_list -> .)
    {               reduce using rule 144 (newline_list -> .)
    ARITH_CMD       reduce using rule 144 (newline_list -> .)
    COND_START      reduce using rule 144 (newline_list -> .)
    >               reduce using rule 144 (newline_list -> .)
    <               reduce using rule 144 (newline_list -> .)
    NUMBER          reduce using rule 144 (newline_list -> .)
    REDIR_WORD      reduce using rule 144 (newline_list -> .)
    GREATER_GREATER reduce using rule 144 (newline_list -> .)
    GREATER_BAR     reduce using rule 144 (newline_list -> .)
    LESS_GREATER    reduce using rule 144 (newline_list -> .)
    LESS_LESS       reduce using rule 144 (newline_list -> .)
    LESS_LESS_MINUS reduce using rule 144 (newline_list -> .)
    LESS_LESS_LESS  reduce using rule 144 (newline_list -> .)
    LESS_AND        reduce using rule 144 (newline_list -> .)
    GREATER_AND     reduce using rule 144 (newline_list -> .)
    AND_GREATER     reduce using rule 144 (newline_list -> .)
    AND_GREATER_GREATER reduce using rule 144 (newline_list -> .)
    SEMI_SEMI       reduce using rule 144 (newline_list -> .)
    SEMI_AND        reduce using rule 144 (newline_list -> .)
    SEMI_SEMI_AND   reduce using rule 144 (newline_list -> .)
    ESAC            reduce using rule 144 (newline_list -> .)

    newline_list                   shift and go to state 337
    compound_list                  shift and go to state 338
    list                           shift and go to state 58

state 329

    (114) elif_clause -> ELIF compound_list THEN compound_list elif_clause .

    FI              reduce using rule 114 (elif_clause -> ELIF compound_list THEN compound_list elif_clause .)


state 330

    (113) elif_clause -> ELIF compound_list THEN compound_list ELSE . compound_list
    (130) compound_list -> . list
    (131) compound_list -> . newline_list list1
    (129) list -> . newline_list list0
    (144) newline_list -> .
    (145) newline_list -> . newline_list NEWLINE

    NEWLINE         reduce using rule 144 (newline_list -> .)
    BANG            reduce using rule 144 (newline_list -> .)
    TIME            reduce using rule 144 (newline_list -> .)
    WHILE           reduce using rule 144 (newline_list -> .)
    UNTIL           reduce using rule 144 (newline_list -> .)
    WORD            reduce using rule 144 (newline_list -> .)
    FUNCTION        reduce using rule 144 (newline_list -> .)
    COPROC          reduce using rule 144 (newline_list -> .)
    ASSIGNMENT_WORD reduce using rule 144 (newline_list -> .)
    FOR             reduce using rule 144 (newline_list -> .)
    CASE            reduce using rule 144 (newline_list -> .)
    SELECT          reduce using rule 144 (newline_list -> .)
    IF              reduce using rule 144 (newline_list -> .)
    (               reduce using rule 144 (newline_list -> .)
    {               reduce using rule 144 (newline_list -> .)
    ARITH_CMD       reduce using rule 144 (newline_list -> .)
    COND_START      reduce using rule 144 (newline_list -> .)
    >               reduce using rule 144 (newline_list -> .)
    <               reduce using rule 144 (newline_list -> .)
    NUMBER          reduce using rule 144 (newline_list -> .)
    REDIR_WORD      reduce using rule 144 (newline_list -> .)
    GREATER_GREATER reduce using rule 144 (newline_list -> .)
    GREATER_BAR     reduce using rule 144 (newline_list -> .)
    LESS_GREATER    reduce using rule 144 (newline_list -> .)
    LESS_LESS       reduce using rule 144 (newline_list -> .)
    LESS_LESS_MINUS reduce using rule 144 (newline_list -> .)
    LESS_LESS_LESS  reduce using rule 144 (newline_list -> .)
    LESS_AND        reduce using rule 144 (newline_list -> .)
    GREATER_AND     reduce using rule 144 (newline_list -> .)
    AND_GREATER     reduce using rule 144 (newline_list -> .)
    AND_GREATER_GREATER reduce using rule 144 (newline_list -> .)

    newline_list                   shift and go to state 56
    compound_list                  shift and go to state 339
    list                           shift and go to state 58

state 331

    (79) for_command -> FOR WORD newline_list IN word_list list_terminator newline_list { compound_list . }

    }               shift and go to state 340


state 332

    (78) for_command -> FOR WORD newline_list IN word_list list_terminator newline_list DO compound_list . DONE

    DONE            shift and go to state 341


state 333

    (81) for_command -> FOR WORD newline_list IN list_terminator newline_list { compound_list } .

    >               reduce using rule 81 (for_command -> FOR WORD newline_list IN list_terminator newline_list { compound_list } .)
    <               reduce using rule 81 (for_command -> FOR WORD newline_list IN list_terminator newline_list { compound_list } .)
    NUMBER          reduce using rule 81 (for_command -> FOR WORD newline_list IN list_terminator newline_list { compound_list } .)
    REDIR_WORD      reduce using rule 81 (for_command -> FOR WORD newline_list IN list_terminator newline_list { compound_list } .)
    GREATER_GREATER reduce using rule 81 (for_command -> FOR WORD newline_list IN list_terminator newline_list { compound_list } .)
    GREATER_BAR     reduce using rule 81 (for_command -> FOR WORD newline_list IN list_terminator newline_list { compound_list } .)
    LESS_GREATER    reduce using rule 81 (for_command -> FOR WORD newline_list IN list_terminator newline_list { compound_list } .)
    LESS_LESS       reduce using rule 81 (for_command -> FOR WORD newline_list IN list_terminator newline_list { compound_list } .)
    LESS_LESS_MINUS reduce using rule 81 (for_command -> FOR WORD newline_list IN list_terminator newline_list { compound_list } .)
    LESS_LESS_LESS  reduce using rule 81 (for_command -> FOR WORD newline_list IN list_terminator newline_list { compound_list } .)
    LESS_AND        reduce using rule 81 (for_command -> FOR WORD newline_list IN list_terminator newline_list { compound_list } .)
    GREATER_AND     reduce using rule 81 (for_command -> FOR WORD newline_list IN list_terminator newline_list { compound_list } .)
    AND_GREATER     reduce using rule 81 (for_command -> FOR WORD newline_list IN list_terminator newline_list { compound_list } .)
    AND_GREATER_GREATER reduce using rule 81 (for_command -> FOR WORD newline_list IN list_terminator newline_list { compound_list } .)
    |               reduce using rule 81 (for_command -> FOR WORD newline_list IN list_terminator newline_list { compound_list } .)
    BAR_AND         reduce using rule 81 (for_command -> FOR WORD newline_list IN list_terminator newline_list { compound_list } .)
    AND_AND         reduce using rule 81 (for_command -> FOR WORD newline_list IN list_terminator newline_list { compound_list } .)
    OR_OR           reduce using rule 81 (for_command -> FOR WORD newline_list IN list_terminator newline_list { compound_list } .)
    &               reduce using rule 81 (for_command -> FOR WORD newline_list IN list_terminator newline_list { compound_list } .)
    ;               reduce using rule 81 (for_command -> FOR WORD newline_list IN list_terminator newline_list { compound_list } .)
    NEWLINE         reduce using rule 81 (for_command -> FOR WORD newline_list IN list_terminator newline_list { compound_list } .)
    DO              reduce using rule 81 (for_command -> FOR WORD newline_list IN list_terminator newline_list { compound_list } .)
    THEN            reduce using rule 81 (for_command -> FOR WORD newline_list IN list_terminator newline_list { compound_list } .)
    }               reduce using rule 81 (for_command -> FOR WORD newline_list IN list_terminator newline_list { compound_list } .)
    )               reduce using rule 81 (for_command -> FOR WORD newline_list IN list_terminator newline_list { compound_list } .)
    DONE            reduce using rule 81 (for_command -> FOR WORD newline_list IN list_terminator newline_list { compound_list } .)
    FI              reduce using rule 81 (for_command -> FOR WORD newline_list IN list_terminator newline_list { compound_list } .)
    ELSE            reduce using rule 81 (for_command -> FOR WORD newline_list IN list_terminator newline_list { compound_list } .)
    ELIF            reduce using rule 81 (for_command -> FOR WORD newline_list IN list_terminator newline_list { compound_list } .)
    SEMI_SEMI       reduce using rule 81 (for_command -> FOR WORD newline_list IN list_terminator newline_list { compound_list } .)
    SEMI_AND        reduce using rule 81 (for_command -> FOR WORD newline_list IN list_terminator newline_list { compound_list } .)
    SEMI_SEMI_AND   reduce using rule 81 (for_command -> FOR WORD newline_list IN list_terminator newline_list { compound_list } .)
    ESAC            reduce using rule 81 (for_command -> FOR WORD newline_list IN list_terminator newline_list { compound_list } .)


state 334

    (80) for_command -> FOR WORD newline_list IN list_terminator newline_list DO compound_list DONE .

    >               reduce using rule 80 (for_command -> FOR WORD newline_list IN list_terminator newline_list DO compound_list DONE .)
    <               reduce using rule 80 (for_command -> FOR WORD newline_list IN list_terminator newline_list DO compound_list DONE .)
    NUMBER          reduce using rule 80 (for_command -> FOR WORD newline_list IN list_terminator newline_list DO compound_list DONE .)
    REDIR_WORD      reduce using rule 80 (for_command -> FOR WORD newline_list IN list_terminator newline_list DO compound_list DONE .)
    GREATER_GREATER reduce using rule 80 (for_command -> FOR WORD newline_list IN list_terminator newline_list DO compound_list DONE .)
    GREATER_BAR     reduce using rule 80 (for_command -> FOR WORD newline_list IN list_terminator newline_list DO compound_list DONE .)
    LESS_GREATER    reduce using rule 80 (for_command -> FOR WORD newline_list IN list_terminator newline_list DO compound_list DONE .)
    LESS_LESS       reduce using rule 80 (for_command -> FOR WORD newline_list IN list_terminator newline_list DO compound_list DONE .)
    LESS_LESS_MINUS reduce using rule 80 (for_command -> FOR WORD newline_list IN list_terminator newline_list DO compound_list DONE .)
    LESS_LESS_LESS  reduce using rule 80 (for_command -> FOR WORD newline_list IN list_terminator newline_list DO compound_list DONE .)
    LESS_AND        reduce using rule 80 (for_command -> FOR WORD newline_list IN list_terminator newline_list DO compound_list DONE .)
    GREATER_AND     reduce using rule 80 (for_command -> FOR WORD newline_list IN list_terminator newline_list DO compound_list DONE .)
    AND_GREATER     reduce using rule 80 (for_command -> FOR WORD newline_list IN list_terminator newline_list DO compound_list DONE .)
    AND_GREATER_GREATER reduce using rule 80 (for_command -> FOR WORD newline_list IN list_terminator newline_list DO compound_list DONE .)
    |               reduce using rule 80 (for_command -> FOR WORD newline_list IN list_terminator newline_list DO compound_list DONE .)
    BAR_AND         reduce using rule 80 (for_command -> FOR WORD newline_list IN list_terminator newline_list DO compound_list DONE .)
    AND_AND         reduce using rule 80 (for_command -> FOR WORD newline_list IN list_terminator newline_list DO compound_list DONE .)
    OR_OR           reduce using rule 80 (for_command -> FOR WORD newline_list IN list_terminator newline_list DO compound_list DONE .)
    &               reduce using rule 80 (for_command -> FOR WORD newline_list IN list_terminator newline_list DO compound_list DONE .)
    ;               reduce using rule 80 (for_command -> FOR WORD newline_list IN list_terminator newline_list DO compound_list DONE .)
    NEWLINE         reduce using rule 80 (for_command -> FOR WORD newline_list IN list_terminator newline_list DO compound_list DONE .)
    DO              reduce using rule 80 (for_command -> FOR WORD newline_list IN list_terminator newline_list DO compound_list DONE .)
    THEN            reduce using rule 80 (for_command -> FOR WORD newline_list IN list_terminator newline_list DO compound_list DONE .)
    }               reduce using rule 80 (for_command -> FOR WORD newline_list IN list_terminator newline_list DO compound_list DONE .)
    )               reduce using rule 80 (for_command -> FOR WORD newline_list IN list_terminator newline_list DO compound_list DONE .)
    DONE            reduce using rule 80 (for_command -> FOR WORD newline_list IN list_terminator newline_list DO compound_list DONE .)
    FI              reduce using rule 80 (for_command -> FOR WORD newline_list IN list_terminator newline_list DO compound_list DONE .)
    ELSE            reduce using rule 80 (for_command -> FOR WORD newline_list IN list_terminator newline_list DO compound_list DONE .)
    ELIF            reduce using rule 80 (for_command -> FOR WORD newline_list IN list_terminator newline_list DO compound_list DONE .)
    SEMI_SEMI       reduce using rule 80 (for_command -> FOR WORD newline_list IN list_terminator newline_list DO compound_list DONE .)
    SEMI_AND        reduce using rule 80 (for_command -> FOR WORD newline_list IN list_terminator newline_list DO compound_list DONE .)
    SEMI_SEMI_AND   reduce using rule 80 (for_command -> FOR WORD newline_list IN list_terminator newline_list DO compound_list DONE .)
    ESAC            reduce using rule 80 (for_command -> FOR WORD newline_list IN list_terminator newline_list DO compound_list DONE .)


state 335

    (91) select_command -> SELECT WORD newline_list IN word_list list_terminator newline_list { list . }

    }               shift and go to state 342


state 336

    (90) select_command -> SELECT WORD newline_list IN word_list list_terminator newline_list DO list . DONE

    DONE            shift and go to state 343


state 337

    (120) pattern_list -> newline_list ( pattern ) newline_list .
    (131) compound_list -> newline_list . list1
    (145) newline_list -> newline_list . NEWLINE
    (129) list -> newline_list . list0
    (135) list1 -> . list1 AND_AND newline_list list1
    (136) list1 -> . list1 OR_OR newline_list list1
    (137) list1 -> . list1 & newline_list list1
    (138) list1 -> . list1 ; newline_list list1
    (139) list1 -> . list1 NEWLINE newline_list list1
    (140) list1 -> . pipeline_command
    (132) list0 -> . list1 NEWLINE newline_list
    (133) list0 -> . list1 & newline_list
    (134) list0 -> . list1 ; newline_list
    (154) pipeline_command -> . pipeline
    (155) pipeline_command -> . BANG pipeline_command
    (156) pipeline_command -> . timespec pipeline_command
    (157) pipeline_command -> . timespec list_terminator
    (158) pipeline_command -> . BANG list_terminator
    (159) pipeline -> . pipeline | newline_list pipeline
    (160) pipeline -> . pipeline BAR_AND newline_list pipeline
    (161) pipeline -> . command
    (162) timespec -> . TIME
    (163) timespec -> . TIME TIMEOPT
    (164) timespec -> . TIME TIMEOPT TIMEIGN
    (58) command -> . simple_command
    (59) command -> . shell_command
    (60) command -> . shell_command redirection_list
    (61) command -> . function_def
    (62) command -> . coproc
    (56) simple_command -> . simple_command_element
    (57) simple_command -> . simple_command simple_command_element
    (63) shell_command -> . for_command
    (64) shell_command -> . case_command
    (65) shell_command -> . WHILE compound_list DO compound_list DONE
    (66) shell_command -> . UNTIL compound_list DO compound_list DONE
    (67) shell_command -> . select_command
    (68) shell_command -> . if_command
    (69) shell_command -> . subshell
    (70) shell_command -> . group_command
    (71) shell_command -> . arith_command
    (72) shell_command -> . cond_command
    (73) shell_command -> . arith_for_command
    (95) function_def -> . WORD ( ) newline_list function_body
    (96) function_def -> . FUNCTION WORD ( ) newline_list function_body
    (97) function_def -> . FUNCTION WORD newline_list function_body
    (101) coproc -> . COPROC shell_command
    (102) coproc -> . COPROC shell_command redirection_list
    (103) coproc -> . COPROC WORD shell_command
    (104) coproc -> . COPROC WORD shell_command redirection_list
    (105) coproc -> . COPROC simple_command
    (51) simple_command_element -> . WORD
    (52) simple_command_element -> . ASSIGNMENT_WORD
    (53) simple_command_element -> . redirection
    (74) for_command -> . FOR WORD newline_list DO compound_list DONE
    (75) for_command -> . FOR WORD newline_list { compound_list }
    (76) for_command -> . FOR WORD ; newline_list DO compound_list DONE
    (77) for_command -> . FOR WORD ; newline_list { compound_list }
    (78) for_command -> . FOR WORD newline_list IN word_list list_terminator newline_list DO compound_list DONE
    (79) for_command -> . FOR WORD newline_list IN word_list list_terminator newline_list { compound_list }
    (80) for_command -> . FOR WORD newline_list IN list_terminator newline_list DO compound_list DONE
    (81) for_command -> . FOR WORD newline_list IN list_terminator newline_list { compound_list }
    (92) case_command -> . CASE WORD newline_list IN newline_list ESAC
    (93) case_command -> . CASE WORD newline_list IN case_clause_sequence newline_list ESAC
    (94) case_command -> . CASE WORD newline_list IN case_clause ESAC
    (86) select_command -> . SELECT WORD newline_list DO list DONE
    (87) select_command -> . SELECT WORD newline_list { list }
    (88) select_command -> . SELECT WORD ; newline_list DO list DONE
    (89) select_command -> . SELECT WORD ; newline_list { list }
    (90) select_command -> . SELECT WORD newline_list IN word_list list_terminator newline_list DO list DONE
    (91) select_command -> . SELECT WORD newline_list IN word_list list_terminator newline_list { list }
    (106) if_command -> . IF compound_list THEN compound_list FI
    (107) if_command -> . IF compound_list THEN compound_list ELSE compound_list FI
    (108) if_command -> . IF compound_list THEN compound_list elif_clause FI
    (100) subshell -> . ( compound_list )
    (109) group_command -> . { compound_list }
    (110) arith_command -> . ARITH_CMD
    (111) cond_command -> . COND_START COND_CMD COND_END
    (82) arith_for_command -> . FOR ARITH_FOR_EXPRS list_terminator newline_list DO compound_list DONE
    (83) arith_for_command -> . FOR ARITH_FOR_EXPRS list_terminator newline_list { compound_list }
    (84) arith_for_command -> . FOR ARITH_FOR_EXPRS DO compound_list DONE
    (85) arith_for_command -> . FOR ARITH_FOR_EXPRS { compound_list }
    (7) redirection -> . > WORD
    (8) redirection -> . < WORD
    (9) redirection -> . NUMBER > WORD
    (10) redirection -> . NUMBER < WORD
    (11) redirection -> . REDIR_WORD > WORD
    (12) redirection -> . REDIR_WORD < WORD
    (13) redirection -> . GREATER_GREATER WORD
    (14) redirection -> . NUMBER GREATER_GREATER WORD
    (15) redirection -> . REDIR_WORD GREATER_GREATER WORD
    (16) redirection -> . GREATER_BAR WORD
    (17) redirection -> . NUMBER GREATER_BAR WORD
    (18) redirection -> . REDIR_WORD GREATER_BAR WORD
    (19) redirection -> . LESS_GREATER WORD
    (20) redirection -> . NUMBER LESS_GREATER WORD
    (21) redirection -> . REDIR_WORD LESS_GREATER WORD
    (22) redirection -> . LESS_LESS WORD
    (23) redirection -> . NUMBER LESS_LESS WORD
    (24) redirection -> . REDIR_WORD LESS_LESS WORD
    (25) redirection -> . LESS_LESS_MINUS WORD
    (26) redirection -> . NUMBER LESS_LESS_MINUS WORD
    (27) redirection -> . REDIR_WORD LESS_LESS_MINUS WORD
    (28) redirection -> . LESS_LESS_LESS WORD
    (29) redirection -> . NUMBER LESS_LESS_LESS WORD
    (30) redirection -> . REDIR_WORD LESS_LESS_LESS WORD
    (31) redirection -> . LESS_AND NUMBER
    (32) redirection -> . NUMBER LESS_AND NUMBER
    (33) redirection -> . REDIR_WORD LESS_AND NUMBER
    (34) redirection -> . GREATER_AND NUMBER
    (35) redirection -> . NUMBER GREATER_AND NUMBER
    (36) redirection -> . REDIR_WORD GREATER_AND NUMBER
    (37) redirection -> . LESS_AND WORD
    (38) redirection -> . NUMBER LESS_AND WORD
    (39) redirection -> . REDIR_WORD LESS_AND WORD
    (40) redirection -> . GREATER_AND WORD
    (41) redirection -> . NUMBER GREATER_AND WORD
    (42) redirection -> . REDIR_WORD GREATER_AND WORD
    (43) redirection -> . GREATER_AND -
    (44) redirection -> . NUMBER GREATER_AND -
    (45) redirection -> . REDIR_WORD GREATER_AND -
    (46) redirection -> . LESS_AND -
    (47) redirection -> . NUMBER LESS_AND -
    (48) redirection -> . REDIR_WORD LESS_AND -
    (49) redirection -> . AND_GREATER WORD
    (50) redirection -> . AND_GREATER_GREATER WORD

    SEMI_SEMI       reduce using rule 120 (pattern_list -> newline_list ( pattern ) newline_list .)
    SEMI_AND        reduce using rule 120 (pattern_list -> newline_list ( pattern ) newline_list .)
    SEMI_SEMI_AND   reduce using rule 120 (pattern_list -> newline_list ( pattern ) newline_list .)
    ESAC            reduce using rule 120 (pattern_list -> newline_list ( pattern ) newline_list .)
    NEWLINE         shift and go to state 128
    BANG            shift and go to state 32
    TIME            shift and go to state 48
    WHILE           shift and go to state 34
    UNTIL           shift and go to state 4
    WORD            shift and go to state 53
    FUNCTION        shift and go to state 49
    COPROC          shift and go to state 44
    ASSIGNMENT_WORD shift and go to state 26
    FOR             shift and go to state 31
    CASE            shift and go to state 51
    SELECT          shift and go to state 39
    IF              shift and go to state 5
    (               shift and go to state 36
    {               shift and go to state 19
    ARITH_CMD       shift and go to state 46
    COND_START      shift and go to state 22
    >               shift and go to state 41
    <               shift and go to state 40
    NUMBER          shift and go to state 9
    REDIR_WORD      shift and go to state 7
    GREATER_GREATER shift and go to state 28
    GREATER_BAR     shift and go to state 11
    LESS_GREATER    shift and go to state 33
    LESS_LESS       shift and go to state 3
    LESS_LESS_MINUS shift and go to state 18
    LESS_LESS_LESS  shift and go to state 14
    LESS_AND        shift and go to state 17
    GREATER_AND     shift and go to state 47
    AND_GREATER     shift and go to state 45
    AND_GREATER_GREATER shift and go to state 37

    command                        shift and go to state 23
    select_command                 shift and go to state 6
    for_command                    shift and go to state 43
    shell_command                  shift and go to state 25
    simple_command_element         shift and go to state 2
    coproc                         shift and go to state 10
    simple_command                 shift and go to state 27
    pipeline_command               shift and go to state 131
    cond_command                   shift and go to state 30
    timespec                       shift and go to state 24
    arith_for_command              shift and go to state 15
    arith_command                  shift and go to state 16
    list1                          shift and go to state 129
    list0                          shift and go to state 130
    group_command                  shift and go to state 20
    redirection                    shift and go to state 50
    subshell                       shift and go to state 21
    pipeline                       shift and go to state 52
    case_command                   shift and go to state 35
    if_command                     shift and go to state 38
    function_def                   shift and go to state 1

state 338

    (119) pattern_list -> newline_list ( pattern ) compound_list .

    SEMI_SEMI       reduce using rule 119 (pattern_list -> newline_list ( pattern ) compound_list .)
    SEMI_AND        reduce using rule 119 (pattern_list -> newline_list ( pattern ) compound_list .)
    SEMI_SEMI_AND   reduce using rule 119 (pattern_list -> newline_list ( pattern ) compound_list .)
    ESAC            reduce using rule 119 (pattern_list -> newline_list ( pattern ) compound_list .)


state 339

    (113) elif_clause -> ELIF compound_list THEN compound_list ELSE compound_list .

    FI              reduce using rule 113 (elif_clause -> ELIF compound_list THEN compound_list ELSE compound_list .)


state 340

    (79) for_command -> FOR WORD newline_list IN word_list list_terminator newline_list { compound_list } .

    >               reduce using rule 79 (for_command -> FOR WORD newline_list IN word_list list_terminator newline_list { compound_list } .)
    <               reduce using rule 79 (for_command -> FOR WORD newline_list IN word_list list_terminator newline_list { compound_list } .)
    NUMBER          reduce using rule 79 (for_command -> FOR WORD newline_list IN word_list list_terminator newline_list { compound_list } .)
    REDIR_WORD      reduce using rule 79 (for_command -> FOR WORD newline_list IN word_list list_terminator newline_list { compound_list } .)
    GREATER_GREATER reduce using rule 79 (for_command -> FOR WORD newline_list IN word_list list_terminator newline_list { compound_list } .)
    GREATER_BAR     reduce using rule 79 (for_command -> FOR WORD newline_list IN word_list list_terminator newline_list { compound_list } .)
    LESS_GREATER    reduce using rule 79 (for_command -> FOR WORD newline_list IN word_list list_terminator newline_list { compound_list } .)
    LESS_LESS       reduce using rule 79 (for_command -> FOR WORD newline_list IN word_list list_terminator newline_list { compound_list } .)
    LESS_LESS_MINUS reduce using rule 79 (for_command -> FOR WORD newline_list IN word_list list_terminator newline_list { compound_list } .)
    LESS_LESS_LESS  reduce using rule 79 (for_command -> FOR WORD newline_list IN word_list list_terminator newline_list { compound_list } .)
    LESS_AND        reduce using rule 79 (for_command -> FOR WORD newline_list IN word_list list_terminator newline_list { compound_list } .)
    GREATER_AND     reduce using rule 79 (for_command -> FOR WORD newline_list IN word_list list_terminator newline_list { compound_list } .)
    AND_GREATER     reduce using rule 79 (for_command -> FOR WORD newline_list IN word_list list_terminator newline_list { compound_list } .)
    AND_GREATER_GREATER reduce using rule 79 (for_command -> FOR WORD newline_list IN word_list list_terminator newline_list { compound_list } .)
    |               reduce using rule 79 (for_command -> FOR WORD newline_list IN word_list list_terminator newline_list { compound_list } .)
    BAR_AND         reduce using rule 79 (for_command -> FOR WORD newline_list IN word_list list_terminator newline_list { compound_list } .)
    AND_AND         reduce using rule 79 (for_command -> FOR WORD newline_list IN word_list list_terminator newline_list { compound_list } .)
    OR_OR           reduce using rule 79 (for_command -> FOR WORD newline_list IN word_list list_terminator newline_list { compound_list } .)
    &               reduce using rule 79 (for_command -> FOR WORD newline_list IN word_list list_terminator newline_list { compound_list } .)
    ;               reduce using rule 79 (for_command -> FOR WORD newline_list IN word_list list_terminator newline_list { compound_list } .)
    NEWLINE         reduce using rule 79 (for_command -> FOR WORD newline_list IN word_list list_terminator newline_list { compound_list } .)
    DO              reduce using rule 79 (for_command -> FOR WORD newline_list IN word_list list_terminator newline_list { compound_list } .)
    THEN            reduce using rule 79 (for_command -> FOR WORD newline_list IN word_list list_terminator newline_list { compound_list } .)
    }               reduce using rule 79 (for_command -> FOR WORD newline_list IN word_list list_terminator newline_list { compound_list } .)
    )               reduce using rule 79 (for_command -> FOR WORD newline_list IN word_list list_terminator newline_list { compound_list } .)
    DONE            reduce using rule 79 (for_command -> FOR WORD newline_list IN word_list list_terminator newline_list { compound_list } .)
    FI              reduce using rule 79 (for_command -> FOR WORD newline_list IN word_list list_terminator newline_list { compound_list } .)
    ELSE            reduce using rule 79 (for_command -> FOR WORD newline_list IN word_list list_terminator newline_list { compound_list } .)
    ELIF            reduce using rule 79 (for_command -> FOR WORD newline_list IN word_list list_terminator newline_list { compound_list } .)
    SEMI_SEMI       reduce using rule 79 (for_command -> FOR WORD newline_list IN word_list list_terminator newline_list { compound_list } .)
    SEMI_AND        reduce using rule 79 (for_command -> FOR WORD newline_list IN word_list list_terminator newline_list { compound_list } .)
    SEMI_SEMI_AND   reduce using rule 79 (for_command -> FOR WORD newline_list IN word_list list_terminator newline_list { compound_list } .)
    ESAC            reduce using rule 79 (for_command -> FOR WORD newline_list IN word_list list_terminator newline_list { compound_list } .)


state 341

    (78) for_command -> FOR WORD newline_list IN word_list list_terminator newline_list DO compound_list DONE .

    >               reduce using rule 78 (for_command -> FOR WORD newline_list IN word_list list_terminator newline_list DO compound_list DONE .)
    <               reduce using rule 78 (for_command -> FOR WORD newline_list IN word_list list_terminator newline_list DO compound_list DONE .)
    NUMBER          reduce using rule 78 (for_command -> FOR WORD newline_list IN word_list list_terminator newline_list DO compound_list DONE .)
    REDIR_WORD      reduce using rule 78 (for_command -> FOR WORD newline_list IN word_list list_terminator newline_list DO compound_list DONE .)
    GREATER_GREATER reduce using rule 78 (for_command -> FOR WORD newline_list IN word_list list_terminator newline_list DO compound_list DONE .)
    GREATER_BAR     reduce using rule 78 (for_command -> FOR WORD newline_list IN word_list list_terminator newline_list DO compound_list DONE .)
    LESS_GREATER    reduce using rule 78 (for_command -> FOR WORD newline_list IN word_list list_terminator newline_list DO compound_list DONE .)
    LESS_LESS       reduce using rule 78 (for_command -> FOR WORD newline_list IN word_list list_terminator newline_list DO compound_list DONE .)
    LESS_LESS_MINUS reduce using rule 78 (for_command -> FOR WORD newline_list IN word_list list_terminator newline_list DO compound_list DONE .)
    LESS_LESS_LESS  reduce using rule 78 (for_command -> FOR WORD newline_list IN word_list list_terminator newline_list DO compound_list DONE .)
    LESS_AND        reduce using rule 78 (for_command -> FOR WORD newline_list IN word_list list_terminator newline_list DO compound_list DONE .)
    GREATER_AND     reduce using rule 78 (for_command -> FOR WORD newline_list IN word_list list_terminator newline_list DO compound_list DONE .)
    AND_GREATER     reduce using rule 78 (for_command -> FOR WORD newline_list IN word_list list_terminator newline_list DO compound_list DONE .)
    AND_GREATER_GREATER reduce using rule 78 (for_command -> FOR WORD newline_list IN word_list list_terminator newline_list DO compound_list DONE .)
    |               reduce using rule 78 (for_command -> FOR WORD newline_list IN word_list list_terminator newline_list DO compound_list DONE .)
    BAR_AND         reduce using rule 78 (for_command -> FOR WORD newline_list IN word_list list_terminator newline_list DO compound_list DONE .)
    AND_AND         reduce using rule 78 (for_command -> FOR WORD newline_list IN word_list list_terminator newline_list DO compound_list DONE .)
    OR_OR           reduce using rule 78 (for_command -> FOR WORD newline_list IN word_list list_terminator newline_list DO compound_list DONE .)
    &               reduce using rule 78 (for_command -> FOR WORD newline_list IN word_list list_terminator newline_list DO compound_list DONE .)
    ;               reduce using rule 78 (for_command -> FOR WORD newline_list IN word_list list_terminator newline_list DO compound_list DONE .)
    NEWLINE         reduce using rule 78 (for_command -> FOR WORD newline_list IN word_list list_terminator newline_list DO compound_list DONE .)
    DO              reduce using rule 78 (for_command -> FOR WORD newline_list IN word_list list_terminator newline_list DO compound_list DONE .)
    THEN            reduce using rule 78 (for_command -> FOR WORD newline_list IN word_list list_terminator newline_list DO compound_list DONE .)
    }               reduce using rule 78 (for_command -> FOR WORD newline_list IN word_list list_terminator newline_list DO compound_list DONE .)
    )               reduce using rule 78 (for_command -> FOR WORD newline_list IN word_list list_terminator newline_list DO compound_list DONE .)
    DONE            reduce using rule 78 (for_command -> FOR WORD newline_list IN word_list list_terminator newline_list DO compound_list DONE .)
    FI              reduce using rule 78 (for_command -> FOR WORD newline_list IN word_list list_terminator newline_list DO compound_list DONE .)
    ELSE            reduce using rule 78 (for_command -> FOR WORD newline_list IN word_list list_terminator newline_list DO compound_list DONE .)
    ELIF            reduce using rule 78 (for_command -> FOR WORD newline_list IN word_list list_terminator newline_list DO compound_list DONE .)
    SEMI_SEMI       reduce using rule 78 (for_command -> FOR WORD newline_list IN word_list list_terminator newline_list DO compound_list DONE .)
    SEMI_AND        reduce using rule 78 (for_command -> FOR WORD newline_list IN word_list list_terminator newline_list DO compound_list DONE .)
    SEMI_SEMI_AND   reduce using rule 78 (for_command -> FOR WORD newline_list IN word_list list_terminator newline_list DO compound_list DONE .)
    ESAC            reduce using rule 78 (for_command -> FOR WORD newline_list IN word_list list_terminator newline_list DO compound_list DONE .)


state 342

    (91) select_command -> SELECT WORD newline_list IN word_list list_terminator newline_list { list } .

    >               reduce using rule 91 (select_command -> SELECT WORD newline_list IN word_list list_terminator newline_list { list } .)
    <               reduce using rule 91 (select_command -> SELECT WORD newline_list IN word_list list_terminator newline_list { list } .)
    NUMBER          reduce using rule 91 (select_command -> SELECT WORD newline_list IN word_list list_terminator newline_list { list } .)
    REDIR_WORD      reduce using rule 91 (select_command -> SELECT WORD newline_list IN word_list list_terminator newline_list { list } .)
    GREATER_GREATER reduce using rule 91 (select_command -> SELECT WORD newline_list IN word_list list_terminator newline_list { list } .)
    GREATER_BAR     reduce using rule 91 (select_command -> SELECT WORD newline_list IN word_list list_terminator newline_list { list } .)
    LESS_GREATER    reduce using rule 91 (select_command -> SELECT WORD newline_list IN word_list list_terminator newline_list { list } .)
    LESS_LESS       reduce using rule 91 (select_command -> SELECT WORD newline_list IN word_list list_terminator newline_list { list } .)
    LESS_LESS_MINUS reduce using rule 91 (select_command -> SELECT WORD newline_list IN word_list list_terminator newline_list { list } .)
    LESS_LESS_LESS  reduce using rule 91 (select_command -> SELECT WORD newline_list IN word_list list_terminator newline_list { list } .)
    LESS_AND        reduce using rule 91 (select_command -> SELECT WORD newline_list IN word_list list_terminator newline_list { list } .)
    GREATER_AND     reduce using rule 91 (select_command -> SELECT WORD newline_list IN word_list list_terminator newline_list { list } .)
    AND_GREATER     reduce using rule 91 (select_command -> SELECT WORD newline_list IN word_list list_terminator newline_list { list } .)
    AND_GREATER_GREATER reduce using rule 91 (select_command -> SELECT WORD newline_list IN word_list list_terminator newline_list { list } .)
    |               reduce using rule 91 (select_command -> SELECT WORD newline_list IN word_list list_terminator newline_list { list } .)
    BAR_AND         reduce using rule 91 (select_command -> SELECT WORD newline_list IN word_list list_terminator newline_list { list } .)
    &               reduce using rule 91 (select_command -> SELECT WORD newline_list IN word_list list_terminator newline_list { list } .)
    ;               reduce using rule 91 (select_command -> SELECT WORD newline_list IN word_list list_terminator newline_list { list } .)
    AND_AND         reduce using rule 91 (select_command -> SELECT WORD newline_list IN word_list list_terminator newline_list { list } .)
    OR_OR           reduce using rule 91 (select_command -> SELECT WORD newline_list IN word_list list_terminator newline_list { list } .)
    NEWLINE         reduce using rule 91 (select_command -> SELECT WORD newline_list IN word_list list_terminator newline_list { list } .)
    DO              reduce using rule 91 (select_command -> SELECT WORD newline_list IN word_list list_terminator newline_list { list } .)
    THEN            reduce using rule 91 (select_command -> SELECT WORD newline_list IN word_list list_terminator newline_list { list } .)
    }               reduce using rule 91 (select_command -> SELECT WORD newline_list IN word_list list_terminator newline_list { list } .)
    )               reduce using rule 91 (select_command -> SELECT WORD newline_list IN word_list list_terminator newline_list { list } .)
    DONE            reduce using rule 91 (select_command -> SELECT WORD newline_list IN word_list list_terminator newline_list { list } .)
    FI              reduce using rule 91 (select_command -> SELECT WORD newline_list IN word_list list_terminator newline_list { list } .)
    ELSE            reduce using rule 91 (select_command -> SELECT WORD newline_list IN word_list list_terminator newline_list { list } .)
    ELIF            reduce using rule 91 (select_command -> SELECT WORD newline_list IN word_list list_terminator newline_list { list } .)
    SEMI_SEMI       reduce using rule 91 (select_command -> SELECT WORD newline_list IN word_list list_terminator newline_list { list } .)
    SEMI_AND        reduce using rule 91 (select_command -> SELECT WORD newline_list IN word_list list_terminator newline_list { list } .)
    SEMI_SEMI_AND   reduce using rule 91 (select_command -> SELECT WORD newline_list IN word_list list_terminator newline_list { list } .)
    ESAC            reduce using rule 91 (select_command -> SELECT WORD newline_list IN word_list list_terminator newline_list { list } .)


state 343

    (90) select_command -> SELECT WORD newline_list IN word_list list_terminator newline_list DO list DONE .

    >               reduce using rule 90 (select_command -> SELECT WORD newline_list IN word_list list_terminator newline_list DO list DONE .)
    <               reduce using rule 90 (select_command -> SELECT WORD newline_list IN word_list list_terminator newline_list DO list DONE .)
    NUMBER          reduce using rule 90 (select_command -> SELECT WORD newline_list IN word_list list_terminator newline_list DO list DONE .)
    REDIR_WORD      reduce using rule 90 (select_command -> SELECT WORD newline_list IN word_list list_terminator newline_list DO list DONE .)
    GREATER_GREATER reduce using rule 90 (select_command -> SELECT WORD newline_list IN word_list list_terminator newline_list DO list DONE .)
    GREATER_BAR     reduce using rule 90 (select_command -> SELECT WORD newline_list IN word_list list_terminator newline_list DO list DONE .)
    LESS_GREATER    reduce using rule 90 (select_command -> SELECT WORD newline_list IN word_list list_terminator newline_list DO list DONE .)
    LESS_LESS       reduce using rule 90 (select_command -> SELECT WORD newline_list IN word_list list_terminator newline_list DO list DONE .)
    LESS_LESS_MINUS reduce using rule 90 (select_command -> SELECT WORD newline_list IN word_list list_terminator newline_list DO list DONE .)
    LESS_LESS_LESS  reduce using rule 90 (select_command -> SELECT WORD newline_list IN word_list list_terminator newline_list DO list DONE .)
    LESS_AND        reduce using rule 90 (select_command -> SELECT WORD newline_list IN word_list list_terminator newline_list DO list DONE .)
    GREATER_AND     reduce using rule 90 (select_command -> SELECT WORD newline_list IN word_list list_terminator newline_list DO list DONE .)
    AND_GREATER     reduce using rule 90 (select_command -> SELECT WORD newline_list IN word_list list_terminator newline_list DO list DONE .)
    AND_GREATER_GREATER reduce using rule 90 (select_command -> SELECT WORD newline_list IN word_list list_terminator newline_list DO list DONE .)
    |               reduce using rule 90 (select_command -> SELECT WORD newline_list IN word_list list_terminator newline_list DO list DONE .)
    BAR_AND         reduce using rule 90 (select_command -> SELECT WORD newline_list IN word_list list_terminator newline_list DO list DONE .)
    &               reduce using rule 90 (select_command -> SELECT WORD newline_list IN word_list list_terminator newline_list DO list DONE .)
    ;               reduce using rule 90 (select_command -> SELECT WORD newline_list IN word_list list_terminator newline_list DO list DONE .)
    AND_AND         reduce using rule 90 (select_command -> SELECT WORD newline_list IN word_list list_terminator newline_list DO list DONE .)
    OR_OR           reduce using rule 90 (select_command -> SELECT WORD newline_list IN word_list list_terminator newline_list DO list DONE .)
    NEWLINE         reduce using rule 90 (select_command -> SELECT WORD newline_list IN word_list list_terminator newline_list DO list DONE .)
    DO              reduce using rule 90 (select_command -> SELECT WORD newline_list IN word_list list_terminator newline_list DO list DONE .)
    THEN            reduce using rule 90 (select_command -> SELECT WORD newline_list IN word_list list_terminator newline_list DO list DONE .)
    }               reduce using rule 90 (select_command -> SELECT WORD newline_list IN word_list list_terminator newline_list DO list DONE .)
    )               reduce using rule 90 (select_command -> SELECT WORD newline_list IN word_list list_terminator newline_list DO list DONE .)
    DONE            reduce using rule 90 (select_command -> SELECT WORD newline_list IN word_list list_terminator newline_list DO list DONE .)
    FI              reduce using rule 90 (select_command -> SELECT WORD newline_list IN word_list list_terminator newline_list DO list DONE .)
    ELSE            reduce using rule 90 (select_command -> SELECT WORD newline_list IN word_list list_terminator newline_list DO list DONE .)
    ELIF            reduce using rule 90 (select_command -> SELECT WORD newline_list IN word_list list_terminator newline_list DO list DONE .)
    SEMI_SEMI       reduce using rule 90 (select_command -> SELECT WORD newline_list IN word_list list_terminator newline_list DO list DONE .)
    SEMI_AND        reduce using rule 90 (select_command -> SELECT WORD newline_list IN word_list list_terminator newline_list DO list DONE .)
    SEMI_SEMI_AND   reduce using rule 90 (select_command -> SELECT WORD newline_list IN word_list list_terminator newline_list DO list DONE .)
    ESAC            reduce using rule 90 (select_command -> SELECT WORD newline_list IN word_list list_terminator newline_list DO list DONE .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for ( in state 122 resolved as shift
WARNING: shift/reduce conflict for AND_AND in state 149 resolved as shift
WARNING: shift/reduce conflict for OR_OR in state 149 resolved as shift
WARNING: shift/reduce conflict for & in state 149 resolved as shift
WARNING: shift/reduce conflict for ; in state 149 resolved as shift
WARNING: shift/reduce conflict for AND_AND in state 151 resolved as shift
WARNING: shift/reduce conflict for OR_OR in state 151 resolved as shift
WARNING: shift/reduce conflict for & in state 151 resolved as shift
WARNING: shift/reduce conflict for ; in state 151 resolved as shift
WARNING: shift/reduce conflict for AND_AND in state 194 resolved as shift
WARNING: shift/reduce conflict for OR_OR in state 194 resolved as shift
WARNING: shift/reduce conflict for & in state 194 resolved as shift
WARNING: shift/reduce conflict for ; in state 194 resolved as shift
WARNING: shift/reduce conflict for AND_AND in state 197 resolved as shift
WARNING: shift/reduce conflict for OR_OR in state 197 resolved as shift
WARNING: shift/reduce conflict for & in state 197 resolved as shift
WARNING: shift/reduce conflict for ; in state 197 resolved as shift
WARNING: shift/reduce conflict for | in state 215 resolved as shift
WARNING: shift/reduce conflict for BAR_AND in state 215 resolved as shift
WARNING: shift/reduce conflict for | in state 216 resolved as shift
WARNING: shift/reduce conflict for BAR_AND in state 216 resolved as shift
WARNING: shift/reduce conflict for AND_AND in state 253 resolved as shift
WARNING: shift/reduce conflict for OR_OR in state 253 resolved as shift
WARNING: shift/reduce conflict for & in state 253 resolved as shift
WARNING: shift/reduce conflict for ; in state 253 resolved as shift
WARNING: shift/reduce conflict for NEWLINE in state 253 resolved as shift
WARNING: shift/reduce conflict for AND_AND in state 254 resolved as shift
WARNING: shift/reduce conflict for OR_OR in state 254 resolved as shift
WARNING: shift/reduce conflict for & in state 254 resolved as shift
WARNING: shift/reduce conflict for ; in state 254 resolved as shift
WARNING: shift/reduce conflict for NEWLINE in state 254 resolved as shift
WARNING: shift/reduce conflict for AND_AND in state 255 resolved as shift
WARNING: shift/reduce conflict for OR_OR in state 255 resolved as shift
WARNING: shift/reduce conflict for & in state 255 resolved as shift
WARNING: shift/reduce conflict for ; in state 255 resolved as shift
WARNING: shift/reduce conflict for NEWLINE in state 255 resolved as shift
WARNING: shift/reduce conflict for AND_AND in state 256 resolved as shift
WARNING: shift/reduce conflict for OR_OR in state 256 resolved as shift
WARNING: shift/reduce conflict for & in state 256 resolved as shift
WARNING: shift/reduce conflict for ; in state 256 resolved as shift
WARNING: shift/reduce conflict for NEWLINE in state 256 resolved as shift
WARNING: shift/reduce conflict for AND_AND in state 257 resolved as shift
WARNING: shift/reduce conflict for OR_OR in state 257 resolved as shift
WARNING: shift/reduce conflict for & in state 257 resolved as shift
WARNING: shift/reduce conflict for ; in state 257 resolved as shift
WARNING: shift/reduce conflict for NEWLINE in state 257 resolved as shift
