# bashtab.py. This file automatically created by PLY (version 3.4). Don't edit!
_tabversion   = '3.4'
_lextokens    = {'COND_END': 1, 'ARITH_CMD': 1, 'LESS_AND': 1, 'COMMENT': 1, 'UNTIL': 1, 'DONE': 1, 'DO': 1, 'LESS_LESS': 1, 'ELIF': 1, 'SEMI_SEMI': 1, 'LESS_LESS_LESS': 1, 'ASSIGNMENT_WORD': 1, 'LESS_GREATER': 1, 'AND_GREATER': 1, 'FI': 1, 'TIMEIGN': 1, 'WORD': 1, 'REDIR_WORD': 1, 'WHILE': 1, 'TIME': 1, 'TIMEOPT': 1, 'ESAC': 1, 'COPROC': 1, 'LESS_LESS_MINUS': 1, 'BAR_AND': 1, 'COND_START': 1, 'ARITH_FOR_EXPRS': 1, 'SEMI_AND': 1, 'CASE': 1, 'BANG': 1, 'FOR': 1, 'FUNCTION': 1, 'OR_OR': 1, 'GREATER_GREATER': 1, 'AND_AND': 1, 'ELSE': 1, 'GREATER_AND': 1, 'SELECT': 1, 'GREATER_BAR': 1, 'AND_GREATER_GREATER': 1, 'IN': 1, 'COND_CMD': 1, 'NEWLINE': 1, 'IF': 1, 'THEN': 1, 'SEMI_SEMI_AND': 1, 'NUMBER': 1}
_lexreflags   = 0
_lexliterals  = '<>|-;(){}&'
_lexstateinfo = {'INITIAL': 'inclusive'}
_lexstatere   = {'INITIAL': [('(?P<t_ARITH_CMD>arith cmd)|(?P<t_ARITH_FOR_EXPRS>arith for exprs)|(?P<t_ASSIGNMENT_WORD>======)|(?P<t_COND_CMD>cond cmd)|(?P<t_newline>\\n)|(?P<t_NUMBER>\\d+)|(?P<t_REDIR_WORD>stdin|stdout|stderr)|(?P<t_WORD>[a-zA-Z][a-zA-Z_]*)|(?P<t_ignore_COMMENT>\\#[^\\n]*)|(?P<t_OR_OR>\\|\\|)|(?P<t_COND_START>\\[\\[)|(?P<t_SEMI_SEMI_AND>;;&)|(?P<t_GREATER_BAR>>\\|)|(?P<t_LESS_LESS_MINUS><<-)|(?P<t_LESS_LESS_LESS><<<)|(?P<t_BAR_AND>\\|&)|(?P<t_AND_GREATER_GREATER>&<<)|(?P<t_LESS_AND><&)|(?P<t_SEMI_AND>;&)|(?P<t_COND_END>]])|(?P<t_SEMI_SEMI>;;)|(?P<t_GREATER_AND>>&)|(?P<t_TIMEIGN>--)|(?P<t_AND_GREATER>&<)|(?P<t_LESS_GREATER><>)|(?P<t_GREATER_GREATER>>>)|(?P<t_AND_AND>&&)|(?P<t_LESS_LESS><<)|(?P<t_TIMEOPT>-p)|(?P<t_BANG>!)', [None, ('t_ARITH_CMD', 'ARITH_CMD'), ('t_ARITH_FOR_EXPRS', 'ARITH_FOR_EXPRS'), ('t_ASSIGNMENT_WORD', 'ASSIGNMENT_WORD'), ('t_COND_CMD', 'COND_CMD'), ('t_newline', 'newline'), ('t_NUMBER', 'NUMBER'), ('t_REDIR_WORD', 'REDIR_WORD'), ('t_WORD', 'WORD'), (None, None), (None, 'OR_OR'), (None, 'COND_START'), (None, 'SEMI_SEMI_AND'), (None, 'GREATER_BAR'), (None, 'LESS_LESS_MINUS'), (None, 'LESS_LESS_LESS'), (None, 'BAR_AND'), (None, 'AND_GREATER_GREATER'), (None, 'LESS_AND'), (None, 'SEMI_AND'), (None, 'COND_END'), (None, 'SEMI_SEMI'), (None, 'GREATER_AND'), (None, 'TIMEIGN'), (None, 'AND_GREATER'), (None, 'LESS_GREATER'), (None, 'GREATER_GREATER'), (None, 'AND_AND'), (None, 'LESS_LESS'), (None, 'TIMEOPT'), (None, 'BANG')])]}
_lexstateignore = {'INITIAL': ' \t'}
_lexstateerrorf = {'INITIAL': 't_error'}
